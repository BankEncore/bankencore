
===== BEGIN:app/assets/builds/application.css =====
/*! tailwindcss v4.1.13 | MIT License | https://tailwindcss.com */
@layer properties;
@layer theme, base, components, utilities;
@layer theme {
  :root, :host {
    --font-sans: ui-sans-serif, system-ui, sans-serif, "Apple Color Emoji",
      "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
    --font-mono: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono",
      "Courier New", monospace;
    --color-neutral-700: oklch(37.1% 0 0);
    --color-black: #000;
    --spacing: 0.25rem;
    --container-xs: 20rem;
    --container-md: 28rem;
    --container-5xl: 64rem;
    --container-7xl: 80rem;
    --text-xs: 0.75rem;
    --text-xs--line-height: calc(1 / 0.75);
    --text-sm: 0.875rem;
    --text-sm--line-height: calc(1.25 / 0.875);
    --text-base: 1rem;
    --text-base--line-height: calc(1.5 / 1);
    --text-lg: 1.125rem;
    --text-lg--line-height: calc(1.75 / 1.125);
    --text-xl: 1.25rem;
    --text-xl--line-height: calc(1.75 / 1.25);
    --text-2xl: 1.5rem;
    --text-2xl--line-height: calc(2 / 1.5);
    --text-3xl: 1.875rem;
    --text-3xl--line-height: calc(2.25 / 1.875);
    --font-weight-medium: 500;
    --font-weight-semibold: 600;
    --font-weight-bold: 700;
    --ease-out: cubic-bezier(0, 0, 0.2, 1);
    --ease-in-out: cubic-bezier(0.4, 0, 0.2, 1);
    --default-transition-duration: 150ms;
    --default-transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    --default-font-family: var(--font-sans);
    --default-mono-font-family: var(--font-mono);
  }
}
@layer base {
  *, ::after, ::before, ::backdrop, ::file-selector-button {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
    border: 0 solid;
  }
  html, :host {
    line-height: 1.5;
    -webkit-text-size-adjust: 100%;
    tab-size: 4;
    font-family: var(--default-font-family, ui-sans-serif, system-ui, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji");
    font-feature-settings: var(--default-font-feature-settings, normal);
    font-variation-settings: var(--default-font-variation-settings, normal);
    -webkit-tap-highlight-color: transparent;
  }
  hr {
    height: 0;
    color: inherit;
    border-top-width: 1px;
  }
  abbr:where([title]) {
    -webkit-text-decoration: underline dotted;
    text-decoration: underline dotted;
  }
  h1, h2, h3, h4, h5, h6 {
    font-size: inherit;
    font-weight: inherit;
  }
  a {
    color: inherit;
    -webkit-text-decoration: inherit;
    text-decoration: inherit;
  }
  b, strong {
    font-weight: bolder;
  }
  code, kbd, samp, pre {
    font-family: var(--default-mono-font-family, ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace);
    font-feature-settings: var(--default-mono-font-feature-settings, normal);
    font-variation-settings: var(--default-mono-font-variation-settings, normal);
    font-size: 1em;
  }
  small {
    font-size: 80%;
  }
  sub, sup {
    font-size: 75%;
    line-height: 0;
    position: relative;
    vertical-align: baseline;
  }
  sub {
    bottom: -0.25em;
  }
  sup {
    top: -0.5em;
  }
  table {
    text-indent: 0;
    border-color: inherit;
    border-collapse: collapse;
  }
  :-moz-focusring {
    outline: auto;
  }
  progress {
    vertical-align: baseline;
  }
  summary {
    display: list-item;
  }
  ol, ul, menu {
    list-style: none;
  }
  img, svg, video, canvas, audio, iframe, embed, object {
    display: block;
    vertical-align: middle;
  }
  img, video {
    max-width: 100%;
    height: auto;
  }
  button, input, select, optgroup, textarea, ::file-selector-button {
    font: inherit;
    font-feature-settings: inherit;
    font-variation-settings: inherit;
    letter-spacing: inherit;
    color: inherit;
    border-radius: 0;
    background-color: transparent;
    opacity: 1;
  }
  :where(select:is([multiple], [size])) optgroup {
    font-weight: bolder;
  }
  :where(select:is([multiple], [size])) optgroup option {
    padding-inline-start: 20px;
  }
  ::file-selector-button {
    margin-inline-end: 4px;
  }
  ::placeholder {
    opacity: 1;
  }
  @supports (not (-webkit-appearance: -apple-pay-button))  or (contain-intrinsic-size: 1px) {
    ::placeholder {
      color: currentcolor;
      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, currentcolor 50%, transparent);
      }
    }
  }
  textarea {
    resize: vertical;
  }
  ::-webkit-search-decoration {
    -webkit-appearance: none;
  }
  ::-webkit-date-and-time-value {
    min-height: 1lh;
    text-align: inherit;
  }
  ::-webkit-datetime-edit {
    display: inline-flex;
  }
  ::-webkit-datetime-edit-fields-wrapper {
    padding: 0;
  }
  ::-webkit-datetime-edit, ::-webkit-datetime-edit-year-field, ::-webkit-datetime-edit-month-field, ::-webkit-datetime-edit-day-field, ::-webkit-datetime-edit-hour-field, ::-webkit-datetime-edit-minute-field, ::-webkit-datetime-edit-second-field, ::-webkit-datetime-edit-millisecond-field, ::-webkit-datetime-edit-meridiem-field {
    padding-block: 0;
  }
  ::-webkit-calendar-picker-indicator {
    line-height: 1;
  }
  :-moz-ui-invalid {
    box-shadow: none;
  }
  button, input:where([type="button"], [type="reset"], [type="submit"]), ::file-selector-button {
    appearance: button;
  }
  ::-webkit-inner-spin-button, ::-webkit-outer-spin-button {
    height: auto;
  }
  [hidden]:where(:not([hidden="until-found"])) {
    display: none !important;
  }
}
@layer utilities {
  .diff {
    position: relative;
    display: grid;
    width: 100%;
    overflow: hidden;
    webkit-user-select: none;
    user-select: none;
    grid-template-rows: 1fr 1.8rem 1fr;
    direction: ltr;
    container-type: inline-size;
    grid-template-columns: auto 1fr;
    &:focus-visible, &:has(.diff-item-1:focus-visible) {
      outline-style: var(--tw-outline-style);
      outline-width: 2px;
      outline-offset: 1px;
      outline-color: var(--color-base-content);
    }
    &:focus-visible {
      outline-style: var(--tw-outline-style);
      outline-width: 2px;
      outline-offset: 1px;
      outline-color: var(--color-base-content);
      .diff-resizer {
        min-width: 95cqi;
        max-width: 95cqi;
      }
    }
    &:has(.diff-item-1:focus-visible) {
      outline-style: var(--tw-outline-style);
      outline-width: 2px;
      outline-offset: 1px;
      .diff-resizer {
        min-width: 5cqi;
        max-width: 5cqi;
      }
    }
    @supports (-webkit-overflow-scrolling: touch) and (overflow: -webkit-paged-x) {
      &:focus {
        .diff-resizer {
          min-width: 5cqi;
          max-width: 5cqi;
        }
      }
      &:has(.diff-item-1:focus) {
        .diff-resizer {
          min-width: 95cqi;
          max-width: 95cqi;
        }
      }
    }
  }
  .modal {
    pointer-events: none;
    visibility: hidden;
    position: fixed;
    inset: calc(0.25rem * 0);
    margin: calc(0.25rem * 0);
    display: grid;
    height: 100%;
    max-height: none;
    width: 100%;
    max-width: none;
    align-items: center;
    justify-items: center;
    background-color: transparent;
    padding: calc(0.25rem * 0);
    color: inherit;
    overflow-x: hidden;
    transition: translate 0.3s ease-out, visibility 0.3s allow-discrete, background-color 0.3s ease-out, opacity 0.1s ease-out;
    overflow-y: hidden;
    overscroll-behavior: contain;
    z-index: 999;
    scrollbar-gutter: auto;
    &::backdrop {
      display: none;
    }
    &.modal-open, &[open], &:target {
      pointer-events: auto;
      visibility: visible;
      opacity: 100%;
      background-color: oklch(0% 0 0/ 0.4);
      .modal-box {
        translate: 0 0;
        scale: 1;
        opacity: 1;
      }
    }
    @starting-style {
      &.modal-open, &[open], &:target {
        visibility: hidden;
        opacity: 0%;
      }
    }
  }
  .drawer-side {
    pointer-events: none;
    visibility: hidden;
    position: fixed;
    inset-inline-start: calc(0.25rem * 0);
    top: calc(0.25rem * 0);
    z-index: 10;
    grid-column-start: 1;
    grid-row-start: 1;
    display: grid;
    width: 100%;
    grid-template-columns: repeat(1, minmax(0, 1fr));
    grid-template-rows: repeat(1, minmax(0, 1fr));
    align-items: flex-start;
    justify-items: start;
    overflow-x: hidden;
    overflow-y: hidden;
    overscroll-behavior: contain;
    opacity: 0%;
    transition: opacity 0.2s ease-out 0.1s allow-discrete, visibility 0.3s ease-out 0.1s allow-discrete;
    height: 100vh;
    height: 100dvh;
    > .drawer-overlay {
      position: sticky;
      top: calc(0.25rem * 0);
      cursor: pointer;
      place-self: stretch;
      background-color: oklch(0% 0 0 / 40%);
    }
    > * {
      grid-column-start: 1;
      grid-row-start: 1;
    }
    > *:not(.drawer-overlay) {
      will-change: transform;
      transition: translate 0.3s ease-out;
      translate: -100%;
      [dir="rtl"] & {
        translate: 100%;
      }
    }
  }
  .drawer-open {
    > .drawer-side {
      overflow-y: auto;
    }
    > .drawer-toggle {
      display: none;
      & ~ .drawer-side {
        pointer-events: auto;
        visibility: visible;
        position: sticky;
        display: block;
        width: auto;
        overscroll-behavior: auto;
        opacity: 100%;
        & > .drawer-overlay {
          cursor: default;
          background-color: transparent;
        }
        & > *:not(.drawer-overlay) {
          translate: 0%;
          [dir="rtl"] & {
            translate: 0%;
          }
        }
      }
      &:checked ~ .drawer-side {
        pointer-events: auto;
        visibility: visible;
      }
    }
  }
  .drawer-toggle {
    position: fixed;
    height: calc(0.25rem * 0);
    width: calc(0.25rem * 0);
    appearance: none;
    opacity: 0%;
    &:checked {
      & ~ .drawer-side {
        pointer-events: auto;
        visibility: visible;
        overflow-y: auto;
        opacity: 100%;
        & > *:not(.drawer-overlay) {
          translate: 0%;
        }
      }
    }
    &:focus-visible ~ .drawer-content label.drawer-button {
      outline: 2px solid;
      outline-offset: 2px;
    }
  }
  .tab {
    position: relative;
    display: inline-flex;
    cursor: pointer;
    appearance: none;
    flex-wrap: wrap;
    align-items: center;
    justify-content: center;
    text-align: center;
    webkit-user-select: none;
    user-select: none;
    &:hover {
      @media (hover: hover) {
        color: var(--color-base-content);
      }
    }
    --tab-p: 1rem;
    --tab-bg: var(--color-base-100);
    --tab-border-color: var(--color-base-300);
    --tab-radius-ss: 0;
    --tab-radius-se: 0;
    --tab-radius-es: 0;
    --tab-radius-ee: 0;
    --tab-order: 0;
    --tab-radius-min: calc(0.75rem - var(--border));
    border-color: #0000;
    order: var(--tab-order);
    height: var(--tab-height);
    font-size: 0.875rem;
    padding-inline-start: var(--tab-p);
    padding-inline-end: var(--tab-p);
    &:is(input[type="radio"]) {
      min-width: fit-content;
      &:after {
        content: attr(aria-label);
      }
    }
    &:is(label) {
      position: relative;
      input {
        position: absolute;
        inset: calc(0.25rem * 0);
        cursor: pointer;
        appearance: none;
        opacity: 0%;
      }
    }
    &:checked, &:is(label:has(:checked)), &:is(.tab-active, [aria-selected=true], [aria-current=true], [aria-current=page]) {
      & + .tab-content {
        display: block;
        height: calc(100% - var(--tab-height) + var(--border));
      }
    }
    &:not(:checked, label:has(:checked), :hover, .tab-active, [aria-selected=true], [aria-current=true], [aria-current=page]) {
      color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, var(--color-base-content) 50%, transparent);
      }
    }
    &:not(input):empty {
      flex-grow: 1;
      cursor: default;
    }
    &:focus {
      --tw-outline-style: none;
      outline-style: none;
      @media (forced-colors: active) {
        outline: 2px solid transparent;
        outline-offset: 2px;
      }
    }
    &:focus-visible, &:is(label:has(:checked:focus-visible)) {
      outline: 2px solid currentColor;
      outline-offset: -5px;
    }
    &[disabled] {
      pointer-events: none;
      opacity: 40%;
    }
  }
  .menu {
    display: flex;
    width: fit-content;
    flex-direction: column;
    flex-wrap: wrap;
    padding: calc(0.25rem * 2);
    --menu-active-fg: var(--color-neutral-content);
    --menu-active-bg: var(--color-neutral);
    font-size: 0.875rem;
    :where(li ul) {
      position: relative;
      margin-inline-start: calc(0.25rem * 4);
      padding-inline-start: calc(0.25rem * 2);
      white-space: nowrap;
      &:before {
        position: absolute;
        inset-inline-start: calc(0.25rem * 0);
        top: calc(0.25rem * 3);
        bottom: calc(0.25rem * 3);
        background-color: var(--color-base-content);
        opacity: 10%;
        width: var(--border);
        content: "";
      }
    }
    :where(li > .menu-dropdown:not(.menu-dropdown-show)) {
      display: none;
    }
    :where(li:not(.menu-title) > *:not(ul, details, .menu-title, .btn)), :where(li:not(.menu-title) > details > summary:not(.menu-title)) {
      display: grid;
      grid-auto-flow: column;
      align-content: flex-start;
      align-items: center;
      gap: calc(0.25rem * 2);
      border-radius: var(--radius-field);
      padding-inline: calc(0.25rem * 3);
      padding-block: calc(0.25rem * 1.5);
      text-align: start;
      transition-property: color, background-color, box-shadow;
      transition-duration: 0.2s;
      transition-timing-function: cubic-bezier(0, 0, 0.2, 1);
      grid-auto-columns: minmax(auto, max-content) auto max-content;
      text-wrap: balance;
      user-select: none;
    }
    :where(li > details > summary) {
      --tw-outline-style: none;
      outline-style: none;
      @media (forced-colors: active) {
        outline: 2px solid transparent;
        outline-offset: 2px;
      }
      &::-webkit-details-marker {
        display: none;
      }
    }
    :where(li > details > summary), :where(li > .menu-dropdown-toggle) {
      &:after {
        justify-self: flex-end;
        display: block;
        height: 0.375rem;
        width: 0.375rem;
        rotate: -135deg;
        translate: 0 -1px;
        transition-property: rotate, translate;
        transition-duration: 0.2s;
        content: "";
        transform-origin: 50% 50%;
        box-shadow: 2px 2px inset;
        pointer-events: none;
      }
    }
    :where(li > details[open] > summary):after, :where(li > .menu-dropdown-toggle.menu-dropdown-show):after {
      rotate: 45deg;
      translate: 0 1px;
    }
    :where( li:not(.menu-title, .disabled) > *:not(ul, details, .menu-title), li:not(.menu-title, .disabled) > details > summary:not(.menu-title) ):not(.menu-active, :active, .btn) {
      &.menu-focus, &:focus-visible {
        cursor: pointer;
        background-color: var(--color-base-content);
        @supports (color: color-mix(in lab, red, red)) {
          background-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
        }
        color: var(--color-base-content);
        --tw-outline-style: none;
        outline-style: none;
        @media (forced-colors: active) {
          outline: 2px solid transparent;
          outline-offset: 2px;
        }
      }
    }
    :where( li:not(.menu-title, .disabled) > *:not(ul, details, .menu-title):not(.menu-active, :active, .btn):hover, li:not(.menu-title, .disabled) > details > summary:not(.menu-title):not(.menu-active, :active, .btn):hover ) {
      cursor: pointer;
      background-color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        background-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
      }
      --tw-outline-style: none;
      outline-style: none;
      @media (forced-colors: active) {
        outline: 2px solid transparent;
        outline-offset: 2px;
      }
      box-shadow: 0 1px oklch(0% 0 0 / 0.01) inset, 0 -1px oklch(100% 0 0 / 0.01) inset;
    }
    :where(li:empty) {
      background-color: var(--color-base-content);
      opacity: 10%;
      margin: 0.5rem 1rem;
      height: 1px;
    }
    :where(li) {
      position: relative;
      display: flex;
      flex-shrink: 0;
      flex-direction: column;
      flex-wrap: wrap;
      align-items: stretch;
      .badge {
        justify-self: flex-end;
      }
      & > *:not(ul, .menu-title, details, .btn):active, & > *:not(ul, .menu-title, details, .btn).menu-active, & > details > summary:active {
        --tw-outline-style: none;
        outline-style: none;
        @media (forced-colors: active) {
          outline: 2px solid transparent;
          outline-offset: 2px;
        }
        color: var(--menu-active-fg);
        background-color: var(--menu-active-bg);
        background-size: auto, calc(var(--noise) * 100%);
        background-image: none, var(--fx-noise);
        &:not(&:active) {
          box-shadow: 0 2px calc(var(--depth) * 3px) -2px var(--menu-active-bg);
        }
      }
      &.menu-disabled {
        pointer-events: none;
        color: var(--color-base-content);
        @supports (color: color-mix(in lab, red, red)) {
          color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
        }
      }
    }
    .dropdown:focus-within {
      .menu-dropdown-toggle:after {
        rotate: 45deg;
        translate: 0 1px;
      }
    }
    .dropdown-content {
      margin-top: calc(0.25rem * 2);
      padding: calc(0.25rem * 2);
      &:before {
        display: none;
      }
    }
  }
  .dropdown {
    position: relative;
    display: inline-block;
    position-area: var(--anchor-v, bottom) var(--anchor-h, span-right);
    & > *:not(summary):focus {
      --tw-outline-style: none;
      outline-style: none;
      @media (forced-colors: active) {
        outline: 2px solid transparent;
        outline-offset: 2px;
      }
    }
    .dropdown-content {
      position: absolute;
    }
    &:not(details, .dropdown-open, .dropdown-hover:hover, :focus-within) {
      .dropdown-content {
        display: none;
        transform-origin: top;
        opacity: 0%;
        scale: 95%;
      }
    }
    &[popover], .dropdown-content {
      z-index: 999;
      @media (prefers-reduced-motion: no-preference) {
        animation: dropdown 0.2s;
        transition-property: opacity, scale, display;
        transition-behavior: allow-discrete;
        transition-duration: 0.2s;
        transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
      }
    }
    @starting-style {
      &[popover], .dropdown-content {
        scale: 95%;
        opacity: 0;
      }
    }
    &.dropdown-open, &:not(.dropdown-hover):focus, &:focus-within {
      > [tabindex]:first-child {
        pointer-events: none;
      }
      .dropdown-content {
        opacity: 100%;
      }
    }
    &.dropdown-hover:hover {
      .dropdown-content {
        opacity: 100%;
        scale: 100%;
      }
    }
    &:is(details) {
      summary {
        &::-webkit-details-marker {
          display: none;
        }
      }
    }
    &.dropdown-open, &:focus, &:focus-within {
      .dropdown-content {
        scale: 100%;
      }
    }
    &:where([popover]) {
      background: #0000;
    }
    &[popover] {
      position: fixed;
      color: inherit;
      @supports not (position-area: bottom) {
        margin: auto;
        &.dropdown-open:not(:popover-open) {
          display: none;
          transform-origin: top;
          opacity: 0%;
          scale: 95%;
        }
        &::backdrop {
          background-color: color-mix(in oklab, #000 30%, #0000);
        }
      }
      &:not(.dropdown-open, :popover-open) {
        display: none;
        transform-origin: top;
        opacity: 0%;
        scale: 95%;
      }
    }
  }
  .btn {
    :where(&) {
      width: unset;
    }
    display: inline-flex;
    flex-shrink: 0;
    cursor: pointer;
    flex-wrap: nowrap;
    align-items: center;
    justify-content: center;
    gap: calc(0.25rem * 1.5);
    text-align: center;
    vertical-align: middle;
    outline-offset: 2px;
    webkit-user-select: none;
    user-select: none;
    padding-inline: var(--btn-p);
    color: var(--btn-fg);
    --tw-prose-links: var(--btn-fg);
    height: var(--size);
    font-size: var(--fontsize, 0.875rem);
    font-weight: 600;
    outline-color: var(--btn-color, var(--color-base-content));
    transition-property: color, background-color, border-color, box-shadow;
    transition-timing-function: cubic-bezier(0, 0, 0.2, 1);
    transition-duration: 0.2s;
    border-start-start-radius: var(--join-ss, var(--radius-field));
    border-start-end-radius: var(--join-se, var(--radius-field));
    border-end-start-radius: var(--join-es, var(--radius-field));
    border-end-end-radius: var(--join-ee, var(--radius-field));
    background-color: var(--btn-bg);
    background-size: auto, calc(var(--noise) * 100%);
    background-image: none, var(--btn-noise);
    border-width: var(--border);
    border-style: solid;
    border-color: var(--btn-border);
    text-shadow: 0 0.5px oklch(100% 0 0 / calc(var(--depth) * 0.15));
    touch-action: manipulation;
    box-shadow: 0 0.5px 0 0.5px oklch(100% 0 0 / calc(var(--depth) * 6%)) inset, var(--btn-shadow);
    --size: calc(var(--size-field, 0.25rem) * 10);
    --btn-bg: var(--btn-color, var(--color-base-200));
    --btn-fg: var(--color-base-content);
    --btn-p: 1rem;
    --btn-border: var(--btn-bg);
    @supports (color: color-mix(in lab, red, red)) {
      --btn-border: color-mix(in oklab, var(--btn-bg), #000 calc(var(--depth) * 5%));
    }
    --btn-shadow: 0 3px 2px -2px var(--btn-bg),
    0 4px 3px -2px var(--btn-bg);
    @supports (color: color-mix(in lab, red, red)) {
      --btn-shadow: 0 3px 2px -2px color-mix(in oklab, var(--btn-bg) calc(var(--depth) * 30%), #0000),
    0 4px 3px -2px color-mix(in oklab, var(--btn-bg) calc(var(--depth) * 30%), #0000);
    }
    --btn-noise: var(--fx-noise);
    .prose & {
      text-decoration-line: none;
    }
    @media (hover: hover) {
      &:hover {
        --btn-bg: var(--btn-color, var(--color-base-200));
        @supports (color: color-mix(in lab, red, red)) {
          --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-base-200)), #000 7%);
        }
      }
    }
    &:focus-visible, &:has(:focus-visible) {
      outline-width: 2px;
      outline-style: solid;
      isolation: isolate;
    }
    &:active:not(.btn-active) {
      translate: 0 0.5px;
      --btn-bg: var(--btn-color, var(--color-base-200));
      @supports (color: color-mix(in lab, red, red)) {
        --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-base-200)), #000 5%);
      }
      --btn-border: var(--btn-color, var(--color-base-200));
      @supports (color: color-mix(in lab, red, red)) {
        --btn-border: color-mix(in oklab, var(--btn-color, var(--color-base-200)), #000 7%);
      }
      --btn-shadow: 0 0 0 0 oklch(0% 0 0/0), 0 0 0 0 oklch(0% 0 0/0);
    }
    &:is(:disabled, [disabled], .btn-disabled) {
      &:not(.btn-link, .btn-ghost) {
        background-color: var(--color-base-content);
        @supports (color: color-mix(in lab, red, red)) {
          background-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
        }
        box-shadow: none;
      }
      pointer-events: none;
      --btn-border: #0000;
      --btn-noise: none;
      --btn-fg: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        --btn-fg: color-mix(in oklch, var(--color-base-content) 20%, #0000);
      }
      @media (hover: hover) {
        &:hover {
          pointer-events: none;
          background-color: var(--color-neutral);
          @supports (color: color-mix(in lab, red, red)) {
            background-color: color-mix(in oklab, var(--color-neutral) 20%, transparent);
          }
          --btn-border: #0000;
          --btn-fg: var(--color-base-content);
          @supports (color: color-mix(in lab, red, red)) {
            --btn-fg: color-mix(in oklch, var(--color-base-content) 20%, #0000);
          }
        }
      }
    }
    &:is(input[type="checkbox"], input[type="radio"]) {
      appearance: none;
      &::after {
        content: attr(aria-label);
      }
    }
    &:where(input:checked:not(.filter .btn)) {
      --btn-color: var(--color-primary);
      --btn-fg: var(--color-primary-content);
      isolation: isolate;
    }
  }
  .loading {
    pointer-events: none;
    display: inline-block;
    aspect-ratio: 1 / 1;
    background-color: currentColor;
    vertical-align: middle;
    width: calc(var(--size-selector, 0.25rem) * 6);
    mask-size: 100%;
    mask-repeat: no-repeat;
    mask-position: center;
    mask-image: url("data:image/svg+xml,%3Csvg width='24' height='24' stroke='black' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cg transform-origin='center'%3E%3Ccircle cx='12' cy='12' r='9.5' fill='none' stroke-width='3' stroke-linecap='round'%3E%3CanimateTransform attributeName='transform' type='rotate' from='0 12 12' to='360 12 12' dur='2s' repeatCount='indefinite'/%3E%3Canimate attributeName='stroke-dasharray' values='0,150;42,150;42,150' keyTimes='0;0.475;1' dur='1.5s' repeatCount='indefinite'/%3E%3Canimate attributeName='stroke-dashoffset' values='0;-16;-59' keyTimes='0;0.475;1' dur='1.5s' repeatCount='indefinite'/%3E%3C/circle%3E%3C/g%3E%3C/svg%3E");
  }
  .visible {
    visibility: visible;
  }
  .list {
    display: flex;
    flex-direction: column;
    font-size: 0.875rem;
    :where(.list-row) {
      --list-grid-cols: minmax(0, auto) 1fr;
      position: relative;
      display: grid;
      grid-auto-flow: column;
      gap: calc(0.25rem * 4);
      border-radius: var(--radius-box);
      padding: calc(0.25rem * 4);
      word-break: break-word;
      grid-template-columns: var(--list-grid-cols);
      &:has(.list-col-grow:nth-child(1)) {
        --list-grid-cols: 1fr;
      }
      &:has(.list-col-grow:nth-child(2)) {
        --list-grid-cols: minmax(0, auto) 1fr;
      }
      &:has(.list-col-grow:nth-child(3)) {
        --list-grid-cols: minmax(0, auto) minmax(0, auto) 1fr;
      }
      &:has(.list-col-grow:nth-child(4)) {
        --list-grid-cols: minmax(0, auto) minmax(0, auto) minmax(0, auto) 1fr;
      }
      &:has(.list-col-grow:nth-child(5)) {
        --list-grid-cols: minmax(0, auto) minmax(0, auto) minmax(0, auto) minmax(0, auto) 1fr;
      }
      &:has(.list-col-grow:nth-child(6)) {
        --list-grid-cols: minmax(0, auto) minmax(0, auto) minmax(0, auto) minmax(0, auto)
        minmax(0, auto) 1fr;
      }
      :not(.list-col-wrap) {
        grid-row-start: 1;
      }
    }
    & > :not(:last-child) {
      &.list-row, .list-row {
        &:after {
          content: "";
          border-bottom: var(--border) solid;
          inset-inline: var(--radius-box);
          position: absolute;
          bottom: calc(0.25rem * 0);
          border-color: var(--color-base-content);
          @supports (color: color-mix(in lab, red, red)) {
            border-color: color-mix(in oklab, var(--color-base-content) 5%, transparent);
          }
        }
      }
    }
  }
  .toast {
    position: fixed;
    inset-inline-start: auto;
    inset-inline-end: calc(0.25rem * 4);
    top: auto;
    bottom: calc(0.25rem * 4);
    display: flex;
    flex-direction: column;
    gap: calc(0.25rem * 2);
    background-color: transparent;
    translate: var(--toast-x, 0) var(--toast-y, 0);
    width: max-content;
    max-width: calc(100vw - 2rem);
    & > * {
      @media (prefers-reduced-motion: no-preference) {
        animation: toast 0.25s ease-out;
      }
    }
    &:where(.toast-start) {
      inset-inline-start: calc(0.25rem * 4);
      inset-inline-end: auto;
      --toast-x: 0;
    }
    &:where(.toast-center) {
      inset-inline-start: calc(1/2 * 100%);
      inset-inline-end: calc(1/2 * 100%);
      --toast-x: -50%;
    }
    &:where(.toast-end) {
      inset-inline-start: auto;
      inset-inline-end: calc(0.25rem * 4);
      --toast-x: 0;
    }
    &:where(.toast-bottom) {
      top: auto;
      bottom: calc(0.25rem * 4);
      --toast-y: 0;
    }
    &:where(.toast-middle) {
      top: calc(1/2 * 100%);
      bottom: auto;
      --toast-y: -50%;
    }
    &:where(.toast-top) {
      top: calc(0.25rem * 4);
      bottom: auto;
      --toast-y: 0;
    }
  }
  .toggle {
    border: var(--border) solid currentColor;
    color: var(--input-color);
    position: relative;
    display: inline-grid;
    flex-shrink: 0;
    cursor: pointer;
    appearance: none;
    place-content: center;
    vertical-align: middle;
    webkit-user-select: none;
    user-select: none;
    grid-template-columns: 0fr 1fr 1fr;
    --radius-selector-max: calc(
    var(--radius-selector) + var(--radius-selector) + var(--radius-selector)
  );
    border-radius: calc( var(--radius-selector) + min(var(--toggle-p), var(--radius-selector-max)) + min(var(--border), var(--radius-selector-max)) );
    padding: var(--toggle-p);
    box-shadow: 0 1px currentColor inset;
    @supports (color: color-mix(in lab, red, red)) {
      box-shadow: 0 1px color-mix(in oklab, currentColor calc(var(--depth) * 10%), #0000) inset;
    }
    transition: color 0.3s, grid-template-columns 0.2s;
    --input-color: var(--color-base-content);
    @supports (color: color-mix(in lab, red, red)) {
      --input-color: color-mix(in oklab, var(--color-base-content) 50%, #0000);
    }
    --toggle-p: calc(var(--size) * 0.125);
    --size: calc(var(--size-selector, 0.25rem) * 6);
    width: calc((var(--size) * 2) - (var(--border) + var(--toggle-p)) * 2);
    height: var(--size);
    > * {
      z-index: 1;
      grid-column: span 1 / span 1;
      grid-column-start: 2;
      grid-row-start: 1;
      height: 100%;
      cursor: pointer;
      appearance: none;
      background-color: transparent;
      padding: calc(0.25rem * 0.5);
      transition: opacity 0.2s, rotate 0.4s;
      border: none;
      &:focus {
        --tw-outline-style: none;
        outline-style: none;
        @media (forced-colors: active) {
          outline: 2px solid transparent;
          outline-offset: 2px;
        }
      }
      &:nth-child(2) {
        color: var(--color-base-100);
        rotate: 0deg;
      }
      &:nth-child(3) {
        color: var(--color-base-100);
        opacity: 0%;
        rotate: -15deg;
      }
    }
    &:has(:checked) {
      > :nth-child(2) {
        opacity: 0%;
        rotate: 15deg;
      }
      > :nth-child(3) {
        opacity: 100%;
        rotate: 0deg;
      }
    }
    &:before {
      position: relative;
      inset-inline-start: calc(0.25rem * 0);
      grid-column-start: 2;
      grid-row-start: 1;
      aspect-ratio: 1 / 1;
      height: 100%;
      border-radius: var(--radius-selector);
      background-color: currentColor;
      translate: 0;
      --tw-content: "";
      content: var(--tw-content);
      transition: background-color 0.1s, translate 0.2s, inset-inline-start 0.2s;
      box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px currentColor;
      @supports (color: color-mix(in lab, red, red)) {
        box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px color-mix(in oklab, currentColor calc(var(--depth) * 10%), #0000);
      }
      background-size: auto, calc(var(--noise) * 100%);
      background-image: none, var(--fx-noise);
    }
    @media (forced-colors: active) {
      &:before {
        outline-style: var(--tw-outline-style);
        outline-width: 1px;
        outline-offset: calc(1px * -1);
      }
    }
    @media print {
      &:before {
        outline: 0.25rem solid;
        outline-offset: -1rem;
      }
    }
    &:focus-visible, &:has(:focus-visible) {
      outline: 2px solid currentColor;
      outline-offset: 2px;
    }
    &:checked, &[aria-checked="true"], &:has(> input:checked) {
      grid-template-columns: 1fr 1fr 0fr;
      background-color: var(--color-base-100);
      --input-color: var(--color-base-content);
      &:before {
        background-color: currentColor;
      }
      @starting-style {
        &:before {
          opacity: 0;
        }
      }
    }
    &:indeterminate {
      grid-template-columns: 0.5fr 1fr 0.5fr;
    }
    &:disabled {
      cursor: not-allowed;
      opacity: 30%;
      &:before {
        background-color: transparent;
        border: var(--border) solid currentColor;
      }
    }
  }
  .input {
    cursor: text;
    border: var(--border) solid #0000;
    position: relative;
    display: inline-flex;
    flex-shrink: 1;
    appearance: none;
    align-items: center;
    gap: calc(0.25rem * 2);
    background-color: var(--color-base-100);
    padding-inline: calc(0.25rem * 3);
    vertical-align: middle;
    white-space: nowrap;
    width: clamp(3rem, 20rem, 100%);
    height: var(--size);
    font-size: 0.875rem;
    touch-action: manipulation;
    border-start-start-radius: var(--join-ss, var(--radius-field));
    border-start-end-radius: var(--join-se, var(--radius-field));
    border-end-start-radius: var(--join-es, var(--radius-field));
    border-end-end-radius: var(--join-ee, var(--radius-field));
    border-color: var(--input-color);
    box-shadow: 0 1px var(--input-color) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
    @supports (color: color-mix(in lab, red, red)) {
      box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
    }
    --size: calc(var(--size-field, 0.25rem) * 10);
    --input-color: var(--color-base-content);
    @supports (color: color-mix(in lab, red, red)) {
      --input-color: color-mix(in oklab, var(--color-base-content) 20%, #0000);
    }
    &:where(input) {
      display: inline-flex;
    }
    :where(input) {
      display: inline-flex;
      height: 100%;
      width: 100%;
      appearance: none;
      background-color: transparent;
      border: none;
      &:focus, &:focus-within {
        --tw-outline-style: none;
        outline-style: none;
        @media (forced-colors: active) {
          outline: 2px solid transparent;
          outline-offset: 2px;
        }
      }
    }
    :where(input[type="url"]), :where(input[type="email"]) {
      direction: ltr;
    }
    :where(input[type="date"]) {
      display: inline-flex;
    }
    &:focus, &:focus-within {
      --input-color: var(--color-base-content);
      box-shadow: 0 1px var(--input-color);
      @supports (color: color-mix(in lab, red, red)) {
        box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000);
      }
      outline: 2px solid var(--input-color);
      outline-offset: 2px;
      isolation: isolate;
      z-index: 1;
    }
    &:has(> input[disabled]), &:is(:disabled, [disabled]), fieldset:disabled & {
      cursor: not-allowed;
      border-color: var(--color-base-200);
      background-color: var(--color-base-200);
      color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, var(--color-base-content) 40%, transparent);
      }
      &::placeholder {
        color: var(--color-base-content);
        @supports (color: color-mix(in lab, red, red)) {
          color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
        }
      }
      box-shadow: none;
    }
    &:has(> input[disabled]) > input[disabled] {
      cursor: not-allowed;
    }
    &::-webkit-date-and-time-value {
      text-align: inherit;
    }
    &[type="number"] {
      &::-webkit-inner-spin-button {
        margin-block: calc(0.25rem * -3);
        margin-inline-end: calc(0.25rem * -3);
      }
    }
    &::-webkit-calendar-picker-indicator {
      position: absolute;
      inset-inline-end: 0.75em;
    }
    &:has(> input[type="date"]) {
      :where(input[type="date"]) {
        display: inline-flex;
        webkit-appearance: none;
        appearance: none;
      }
      input[type="date"]::-webkit-calendar-picker-indicator {
        position: absolute;
        inset-inline-end: 0.75em;
        width: 1em;
        height: 1em;
        cursor: pointer;
      }
    }
  }
  .table {
    font-size: 0.875rem;
    position: relative;
    width: 100%;
    border-radius: var(--radius-box);
    text-align: left;
    &:where(:dir(rtl), [dir="rtl"], [dir="rtl"] *) {
      text-align: right;
    }
    tr.row-hover {
      &, &:nth-child(even) {
        &:hover {
          @media (hover: hover) {
            background-color: var(--color-base-200);
          }
        }
      }
    }
    :where(th, td) {
      padding-inline: calc(0.25rem * 4);
      padding-block: calc(0.25rem * 3);
      vertical-align: middle;
    }
    :where(thead, tfoot) {
      white-space: nowrap;
      color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, var(--color-base-content) 60%, transparent);
      }
      font-size: 0.875rem;
      font-weight: 600;
    }
    :where(tfoot) {
      border-top: var(--border) solid var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        border-top: var(--border) solid color-mix(in oklch, var(--color-base-content) 5%, #0000);
      }
    }
    :where(.table-pin-rows thead tr) {
      position: sticky;
      top: calc(0.25rem * 0);
      z-index: 1;
      background-color: var(--color-base-100);
    }
    :where(.table-pin-rows tfoot tr) {
      position: sticky;
      bottom: calc(0.25rem * 0);
      z-index: 1;
      background-color: var(--color-base-100);
    }
    :where(.table-pin-cols tr th) {
      position: sticky;
      right: calc(0.25rem * 0);
      left: calc(0.25rem * 0);
      background-color: var(--color-base-100);
    }
    :where(thead tr, tbody tr:not(:last-child)) {
      border-bottom: var(--border) solid var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        border-bottom: var(--border) solid color-mix(in oklch, var(--color-base-content) 5%, #0000);
      }
    }
  }
  .steps {
    display: inline-grid;
    grid-auto-flow: column;
    overflow: hidden;
    overflow-x: auto;
    counter-reset: step;
    grid-auto-columns: 1fr;
    .step {
      display: grid;
      grid-template-columns: repeat(1, minmax(0, 1fr));
      grid-template-columns: auto;
      grid-template-rows: repeat(2, minmax(0, 1fr));
      grid-template-rows: 40px 1fr;
      place-items: center;
      text-align: center;
      min-width: 4rem;
      --step-bg: var(--color-base-300);
      --step-fg: var(--color-base-content);
      &:before {
        top: calc(0.25rem * 0);
        grid-column-start: 1;
        grid-row-start: 1;
        height: calc(0.25rem * 2);
        width: 100%;
        border: 1px solid;
        color: var(--step-bg);
        background-color: var(--step-bg);
        --tw-content: "";
        content: var(--tw-content);
        margin-inline-start: -100%;
      }
      > .step-icon, &:not(:has(.step-icon)):after {
        content: counter(step);
        counter-increment: step;
        z-index: 1;
        color: var(--step-fg);
        background-color: var(--step-bg);
        border: 1px solid var(--step-bg);
        position: relative;
        grid-column-start: 1;
        grid-row-start: 1;
        display: grid;
        height: calc(0.25rem * 8);
        width: calc(0.25rem * 8);
        place-items: center;
        place-self: center;
        border-radius: calc(infinity * 1px);
      }
      &:first-child:before {
        content: none;
      }
      &[data-content]:after {
        content: attr(data-content);
      }
    }
    .step-neutral {
      + .step-neutral:before, &:after, > .step-icon {
        --step-bg: var(--color-neutral);
        --step-fg: var(--color-neutral-content);
      }
    }
    .step-primary {
      + .step-primary:before, &:after, > .step-icon {
        --step-bg: var(--color-primary);
        --step-fg: var(--color-primary-content);
      }
    }
    .step-secondary {
      + .step-secondary:before, &:after, > .step-icon {
        --step-bg: var(--color-secondary);
        --step-fg: var(--color-secondary-content);
      }
    }
    .step-accent {
      + .step-accent:before, &:after, > .step-icon {
        --step-bg: var(--color-accent);
        --step-fg: var(--color-accent-content);
      }
    }
    .step-info {
      + .step-info:before, &:after, > .step-icon {
        --step-bg: var(--color-info);
        --step-fg: var(--color-info-content);
      }
    }
    .step-success {
      + .step-success:before, &:after, > .step-icon {
        --step-bg: var(--color-success);
        --step-fg: var(--color-success-content);
      }
    }
    .step-warning {
      + .step-warning:before, &:after, > .step-icon {
        --step-bg: var(--color-warning);
        --step-fg: var(--color-warning-content);
      }
    }
    .step-error {
      + .step-error:before, &:after, > .step-icon {
        --step-bg: var(--color-error);
        --step-fg: var(--color-error-content);
      }
    }
  }
  .select {
    border: var(--border) solid #0000;
    position: relative;
    display: inline-flex;
    flex-shrink: 1;
    appearance: none;
    align-items: center;
    gap: calc(0.25rem * 1.5);
    background-color: var(--color-base-100);
    padding-inline-start: calc(0.25rem * 3);
    padding-inline-end: calc(0.25rem * 7);
    vertical-align: middle;
    width: clamp(3rem, 20rem, 100%);
    height: var(--size);
    font-size: 0.875rem;
    touch-action: manipulation;
    border-start-start-radius: var(--join-ss, var(--radius-field));
    border-start-end-radius: var(--join-se, var(--radius-field));
    border-end-start-radius: var(--join-es, var(--radius-field));
    border-end-end-radius: var(--join-ee, var(--radius-field));
    background-image: linear-gradient(45deg, #0000 50%, currentColor 50%), linear-gradient(135deg, currentColor 50%, #0000 50%);
    background-position: calc(100% - 20px) calc(1px + 50%), calc(100% - 16.1px) calc(1px + 50%);
    background-size: 4px 4px, 4px 4px;
    background-repeat: no-repeat;
    text-overflow: ellipsis;
    box-shadow: 0 1px var(--input-color) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
    @supports (color: color-mix(in lab, red, red)) {
      box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
    }
    border-color: var(--input-color);
    --input-color: var(--color-base-content);
    @supports (color: color-mix(in lab, red, red)) {
      --input-color: color-mix(in oklab, var(--color-base-content) 20%, #0000);
    }
    --size: calc(var(--size-field, 0.25rem) * 10);
    [dir="rtl"] & {
      background-position: calc(0% + 12px) calc(1px + 50%), calc(0% + 16px) calc(1px + 50%);
    }
    select {
      margin-inline-start: calc(0.25rem * -3);
      margin-inline-end: calc(0.25rem * -7);
      width: calc(100% + 2.75rem);
      appearance: none;
      padding-inline-start: calc(0.25rem * 3);
      padding-inline-end: calc(0.25rem * 7);
      height: calc(100% - calc(var(--border) * 2));
      align-items: center;
      background: inherit;
      border-radius: inherit;
      border-style: none;
      &:focus, &:focus-within {
        --tw-outline-style: none;
        outline-style: none;
        @media (forced-colors: active) {
          outline: 2px solid transparent;
          outline-offset: 2px;
        }
      }
      &:not(:last-child) {
        margin-inline-end: calc(0.25rem * -5.5);
        background-image: none;
      }
    }
    &:focus, &:focus-within {
      --input-color: var(--color-base-content);
      box-shadow: 0 1px var(--input-color);
      @supports (color: color-mix(in lab, red, red)) {
        box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000);
      }
      outline: 2px solid var(--input-color);
      outline-offset: 2px;
      isolation: isolate;
      z-index: 1;
    }
    &:has(> select[disabled]), &:is(:disabled, [disabled]), fieldset:disabled & {
      cursor: not-allowed;
      border-color: var(--color-base-200);
      background-color: var(--color-base-200);
      color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, var(--color-base-content) 40%, transparent);
      }
      &::placeholder {
        color: var(--color-base-content);
        @supports (color: color-mix(in lab, red, red)) {
          color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
        }
      }
    }
    &:has(> select[disabled]) > select[disabled] {
      cursor: not-allowed;
    }
    &, & select {
      @supports (appearance: base-select) {
        appearance: base-select;
      }
      @supports (appearance: base-select) {
        &::picker(select) {
          appearance: base-select;
        }
      }
      &::picker(select) {
        color: inherit;
        max-height: min(24rem, 70dvh);
        border: var(--border) solid var(--color-base-200);
        margin-block: calc(0.25rem * 2);
        border-radius: var(--radius-box);
        padding: calc(0.25rem * 2);
        background-color: inherit;
        box-shadow: 0 2px calc(var(--depth) * 3px) -2px oklch(0% 0 0/0.2);
        box-shadow: 0 20px 25px -5px rgb(0 0 0 / calc(var(--depth) * 0.1)), 0 8px 10px -6px rgb(0 0 0 / calc(var(--depth) * 0.1));
      }
      &::picker-icon {
        display: none;
      }
      optgroup {
        padding-top: 0.5em;
        option {
          &:nth-child(1) {
            margin-top: 0.5em;
          }
        }
      }
      option {
        border-radius: var(--radius-field);
        padding-inline: calc(0.25rem * 3);
        padding-block: calc(0.25rem * 1.5);
        transition-property: color, background-color;
        transition-duration: 0.2s;
        transition-timing-function: cubic-bezier(0, 0, 0.2, 1);
        &:not(:disabled) {
          &:hover, &:focus-visible {
            cursor: pointer;
            background-color: var(--color-base-content);
            @supports (color: color-mix(in lab, red, red)) {
              background-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
            }
            --tw-outline-style: none;
            outline-style: none;
            @media (forced-colors: active) {
              outline: 2px solid transparent;
              outline-offset: 2px;
            }
          }
          &:active {
            background-color: var(--color-neutral);
            color: var(--color-neutral-content);
            box-shadow: 0 2px calc(var(--depth) * 3px) -2px var(--color-neutral);
          }
        }
      }
    }
  }
  .select\! {
    border: var(--border) solid #0000 !important;
    position: relative !important;
    display: inline-flex !important;
    flex-shrink: 1 !important;
    appearance: none !important;
    align-items: center !important;
    gap: calc(0.25rem * 1.5) !important;
    background-color: var(--color-base-100) !important;
    padding-inline-start: calc(0.25rem * 3) !important;
    padding-inline-end: calc(0.25rem * 7) !important;
    vertical-align: middle !important;
    width: clamp(3rem, 20rem, 100%) !important;
    height: var(--size) !important;
    font-size: 0.875rem !important;
    touch-action: manipulation !important;
    border-start-start-radius: var(--join-ss, var(--radius-field)) !important;
    border-start-end-radius: var(--join-se, var(--radius-field)) !important;
    border-end-start-radius: var(--join-es, var(--radius-field)) !important;
    border-end-end-radius: var(--join-ee, var(--radius-field)) !important;
    background-image: linear-gradient(45deg, #0000 50%, currentColor 50%), linear-gradient(135deg, currentColor 50%, #0000 50%) !important;
    background-position: calc(100% - 20px) calc(1px + 50%), calc(100% - 16.1px) calc(1px + 50%) !important;
    background-size: 4px 4px, 4px 4px !important;
    background-repeat: no-repeat !important;
    text-overflow: ellipsis !important;
    box-shadow: 0 1px var(--input-color) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset !important;
    @supports (color: color-mix(in lab, red, red)) {
      box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset !important;
    }
    border-color: var(--input-color) !important;
    --input-color: var(--color-base-content) !important;
    @supports (color: color-mix(in lab, red, red)) {
      --input-color: color-mix(in oklab, var(--color-base-content) 20%, #0000) !important;
    }
    --size: calc(var(--size-field, 0.25rem) * 10) !important;
    [dir="rtl"] & {
      background-position: calc(0% + 12px) calc(1px + 50%), calc(0% + 16px) calc(1px + 50%) !important;
    }
    select {
      margin-inline-start: calc(0.25rem * -3) !important;
      margin-inline-end: calc(0.25rem * -7) !important;
      width: calc(100% + 2.75rem) !important;
      appearance: none !important;
      padding-inline-start: calc(0.25rem * 3) !important;
      padding-inline-end: calc(0.25rem * 7) !important;
      height: calc(100% - calc(var(--border) * 2)) !important;
      align-items: center !important;
      background: inherit !important;
      border-radius: inherit !important;
      border-style: none !important;
      &:focus, &:focus-within {
        --tw-outline-style: none !important;
        outline-style: none !important;
        @media (forced-colors: active) {
          outline: 2px solid transparent !important;
          outline-offset: 2px !important;
        }
      }
      &:not(:last-child) {
        margin-inline-end: calc(0.25rem * -5.5) !important;
        background-image: none !important;
      }
    }
    &:focus, &:focus-within {
      --input-color: var(--color-base-content) !important;
      box-shadow: 0 1px var(--input-color) !important;
      @supports (color: color-mix(in lab, red, red)) {
        box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000) !important;
      }
      outline: 2px solid var(--input-color) !important;
      outline-offset: 2px !important;
      isolation: isolate !important;
      z-index: 1 !important;
    }
    &:has(> select[disabled]), &:is(:disabled, [disabled]), fieldset:disabled & {
      cursor: not-allowed !important;
      border-color: var(--color-base-200) !important;
      background-color: var(--color-base-200) !important;
      color: var(--color-base-content) !important;
      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, var(--color-base-content) 40%, transparent) !important;
      }
      &::placeholder {
        color: var(--color-base-content) !important;
        @supports (color: color-mix(in lab, red, red)) {
          color: color-mix(in oklab, var(--color-base-content) 20%, transparent) !important;
        }
      }
    }
    &:has(> select[disabled]) > select[disabled] {
      cursor: not-allowed !important;
    }
    &, & select {
      @supports (appearance: base-select) {
        appearance: base-select !important;
      }
      @supports (appearance: base-select) {
        &::picker(select) {
          appearance: base-select !important;
        }
      }
      &::picker(select) {
        color: inherit !important;
        max-height: min(24rem, 70dvh) !important;
        border: var(--border) solid var(--color-base-200) !important;
        margin-block: calc(0.25rem * 2) !important;
        border-radius: var(--radius-box) !important;
        padding: calc(0.25rem * 2) !important;
        background-color: inherit !important;
        box-shadow: 0 2px calc(var(--depth) * 3px) -2px oklch(0% 0 0/0.2) !important;
        box-shadow: 0 20px 25px -5px rgb(0 0 0 / calc(var(--depth) * 0.1)), 0 8px 10px -6px rgb(0 0 0 / calc(var(--depth) * 0.1)) !important;
      }
      &::picker-icon {
        display: none !important;
      }
      optgroup {
        padding-top: 0.5em !important;
        option {
          &:nth-child(1) {
            margin-top: 0.5em !important;
          }
        }
      }
      option {
        border-radius: var(--radius-field) !important;
        padding-inline: calc(0.25rem * 3) !important;
        padding-block: calc(0.25rem * 1.5) !important;
        transition-property: color, background-color !important;
        transition-duration: 0.2s !important;
        transition-timing-function: cubic-bezier(0, 0, 0.2, 1) !important;
        &:not(:disabled) {
          &:hover, &:focus-visible {
            cursor: pointer !important;
            background-color: var(--color-base-content) !important;
            @supports (color: color-mix(in lab, red, red)) {
              background-color: color-mix(in oklab, var(--color-base-content) 10%, transparent) !important;
            }
            --tw-outline-style: none !important;
            outline-style: none !important;
            @media (forced-colors: active) {
              outline: 2px solid transparent !important;
              outline-offset: 2px !important;
            }
          }
          &:active {
            background-color: var(--color-neutral) !important;
            color: var(--color-neutral-content) !important;
            box-shadow: 0 2px calc(var(--depth) * 3px) -2px var(--color-neutral) !important;
          }
        }
      }
    }
  }
  .diff-resizer {
    position: relative;
    z-index: 1;
    grid-column-start: 1;
    grid-row-start: 2;
    height: calc(0.25rem * 4);
    width: 50cqi;
    max-width: calc(100cqi - 1rem);
    min-width: 1rem;
    resize: horizontal;
    overflow: hidden;
    opacity: 0%;
    transform: scaleY(3) translate(0.35rem, 0.35rem);
    cursor: ew-resize;
    transform-origin: 100% 100%;
    clip-path: inset(calc(100% - 0.75rem) 0 0 calc(100% - 0.75rem));
    transition: min-width 0.3s ease-out, max-width 0.3s ease-out;
  }
  .card {
    position: relative;
    display: flex;
    flex-direction: column;
    border-radius: var(--radius-box);
    outline-width: 2px;
    transition: outline 0.2s ease-in-out;
    outline: 0 solid #0000;
    outline-offset: 2px;
    &:focus {
      --tw-outline-style: none;
      outline-style: none;
      @media (forced-colors: active) {
        outline: 2px solid transparent;
        outline-offset: 2px;
      }
    }
    &:focus-visible {
      outline-color: currentColor;
    }
    :where(figure:first-child) {
      overflow: hidden;
      border-start-start-radius: inherit;
      border-start-end-radius: inherit;
      border-end-start-radius: unset;
      border-end-end-radius: unset;
    }
    :where(figure:last-child) {
      overflow: hidden;
      border-start-start-radius: unset;
      border-start-end-radius: unset;
      border-end-start-radius: inherit;
      border-end-end-radius: inherit;
    }
    &:where(.card-border) {
      border: var(--border) solid var(--color-base-200);
    }
    &:where(.card-dash) {
      border: var(--border) dashed var(--color-base-200);
    }
    &.image-full {
      display: grid;
      > * {
        grid-column-start: 1;
        grid-row-start: 1;
      }
      > .card-body {
        position: relative;
        color: var(--color-neutral-content);
      }
      :where(figure) {
        overflow: hidden;
        border-radius: inherit;
      }
      > figure img {
        height: 100%;
        object-fit: cover;
        filter: brightness(28%);
      }
    }
    figure {
      display: flex;
      align-items: center;
      justify-content: center;
    }
    &:has(> input:is(input[type="checkbox"], input[type="radio"])) {
      cursor: pointer;
      user-select: none;
    }
    &:has(> :checked) {
      outline: 2px solid currentColor;
    }
  }
  .swap {
    position: relative;
    display: inline-grid;
    cursor: pointer;
    place-content: center;
    vertical-align: middle;
    webkit-user-select: none;
    user-select: none;
    input {
      appearance: none;
      border: none;
    }
    > * {
      grid-column-start: 1;
      grid-row-start: 1;
      @media (prefers-reduced-motion: no-preference) {
        transition-property: transform, rotate, opacity;
        transition-duration: 0.2s;
        transition-timing-function: cubic-bezier(0, 0, 0.2, 1);
      }
    }
    .swap-on, .swap-indeterminate, input:indeterminate ~ .swap-on {
      opacity: 0%;
    }
    input:is(:checked, :indeterminate) {
      & ~ .swap-off {
        opacity: 0%;
      }
    }
    input:checked ~ .swap-on, input:indeterminate ~ .swap-indeterminate {
      opacity: 100%;
      backface-visibility: visible;
    }
  }
  .avatar {
    position: relative;
    display: inline-flex;
    vertical-align: middle;
    & > div {
      display: block;
      aspect-ratio: 1 / 1;
      overflow: hidden;
    }
    img {
      height: 100%;
      width: 100%;
      object-fit: cover;
    }
  }
  .checkbox {
    border: var(--border) solid var(--input-color, var(--color-base-content));
    @supports (color: color-mix(in lab, red, red)) {
      border: var(--border) solid var(--input-color, color-mix(in oklab, var(--color-base-content) 20%, #0000));
    }
    position: relative;
    display: inline-block;
    flex-shrink: 0;
    cursor: pointer;
    appearance: none;
    border-radius: var(--radius-selector);
    padding: calc(0.25rem * 1);
    vertical-align: middle;
    color: var(--color-base-content);
    box-shadow: 0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 0 #0000 inset, 0 0 #0000;
    transition: background-color 0.2s, box-shadow 0.2s;
    --size: calc(var(--size-selector, 0.25rem) * 6);
    width: var(--size);
    height: var(--size);
    background-size: auto, calc(var(--noise) * 100%);
    background-image: none, var(--fx-noise);
    &:before {
      --tw-content: "";
      content: var(--tw-content);
      display: block;
      width: 100%;
      height: 100%;
      rotate: 45deg;
      background-color: currentColor;
      opacity: 0%;
      transition: clip-path 0.3s, opacity 0.1s, rotate 0.3s, translate 0.3s;
      transition-delay: 0.1s;
      clip-path: polygon(20% 100%, 20% 80%, 50% 80%, 50% 80%, 70% 80%, 70% 100%);
      box-shadow: 0px 3px 0 0px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
      font-size: 1rem;
      line-height: 0.75;
    }
    &:focus-visible {
      outline: 2px solid var(--input-color, currentColor);
      outline-offset: 2px;
    }
    &:checked, &[aria-checked="true"] {
      background-color: var(--input-color, #0000);
      box-shadow: 0 0 #0000 inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1));
      &:before {
        clip-path: polygon(20% 100%, 20% 80%, 50% 80%, 50% 0%, 70% 0%, 70% 100%);
        opacity: 100%;
      }
      @media (forced-colors: active) {
        &:before {
          rotate: 0deg;
          background-color: transparent;
          --tw-content: "✔︎";
          clip-path: none;
        }
      }
      @media print {
        &:before {
          rotate: 0deg;
          background-color: transparent;
          --tw-content: "✔︎";
          clip-path: none;
        }
      }
    }
    &:indeterminate {
      background-color: var(--input-color, var(--color-base-content));
      @supports (color: color-mix(in lab, red, red)) {
        background-color: var(--input-color, color-mix(in oklab, var(--color-base-content) 20%, #0000));
      }
      &:before {
        rotate: 0deg;
        opacity: 100%;
        translate: 0 -35%;
        clip-path: polygon(20% 100%, 20% 80%, 50% 80%, 50% 80%, 80% 80%, 80% 100%);
      }
    }
    &:disabled {
      cursor: not-allowed;
      opacity: 20%;
    }
  }
  .radio {
    position: relative;
    display: inline-block;
    flex-shrink: 0;
    cursor: pointer;
    appearance: none;
    border-radius: calc(infinity * 1px);
    padding: calc(0.25rem * 1);
    vertical-align: middle;
    border: var(--border) solid var(--input-color, currentColor);
    @supports (color: color-mix(in lab, red, red)) {
      border: var(--border) solid var(--input-color, color-mix(in srgb, currentColor 20%, #0000));
    }
    box-shadow: 0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset;
    --size: calc(var(--size-selector, 0.25rem) * 6);
    width: var(--size);
    height: var(--size);
    color: var(--input-color, currentColor);
    &:before {
      display: block;
      width: 100%;
      height: 100%;
      border-radius: calc(infinity * 1px);
      --tw-content: "";
      content: var(--tw-content);
      background-size: auto, calc(var(--noise) * 100%);
      background-image: none, var(--fx-noise);
    }
    &:focus-visible {
      outline: 2px solid currentColor;
    }
    &:checked, &[aria-checked="true"] {
      border-color: currentColor;
      background-color: var(--color-base-100);
      @media (prefers-reduced-motion: no-preference) {
        animation: radio 0.2s ease-out;
      }
      &:before {
        background-color: currentColor;
        box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1));
      }
      @media (forced-colors: active) {
        &:before {
          outline-style: var(--tw-outline-style);
          outline-width: 1px;
          outline-offset: calc(1px * -1);
        }
      }
      @media print {
        &:before {
          outline: 0.25rem solid;
          outline-offset: -1rem;
        }
      }
    }
    &:disabled {
      cursor: not-allowed;
      opacity: 20%;
    }
  }
  .rating {
    position: relative;
    display: inline-flex;
    vertical-align: middle;
    & input {
      border: none;
      appearance: none;
    }
    :where(*) {
      height: calc(0.25rem * 6);
      width: calc(0.25rem * 6);
      border-radius: 0;
      background-color: var(--color-base-content);
      opacity: 20%;
      @media (prefers-reduced-motion: no-preference) {
        animation: rating 0.25s ease-out;
      }
      &:is(input) {
        cursor: pointer;
      }
    }
    & .rating-hidden {
      width: calc(0.25rem * 2);
      background-color: transparent;
    }
    input[type="radio"]:checked {
      background-image: none;
    }
    * {
      &:checked, &[aria-checked="true"], &[aria-current="true"], &:has(~ *:checked, ~ *[aria-checked="true"], ~ *[aria-current="true"]) {
        opacity: 100%;
      }
      &:focus-visible {
        scale: 1.1;
        @media (prefers-reduced-motion: no-preference) {
          transition: scale 0.2s ease-out;
        }
      }
    }
    & *:active:focus {
      animation: none;
      scale: 1.1;
    }
    &.rating-xs :where(*:not(.rating-hidden)) {
      width: calc(0.25rem * 4);
      height: calc(0.25rem * 4);
    }
    &.rating-sm :where(*:not(.rating-hidden)) {
      width: calc(0.25rem * 5);
      height: calc(0.25rem * 5);
    }
    &.rating-md :where(*:not(.rating-hidden)) {
      width: calc(0.25rem * 6);
      height: calc(0.25rem * 6);
    }
    &.rating-lg :where(*:not(.rating-hidden)) {
      width: calc(0.25rem * 7);
      height: calc(0.25rem * 7);
    }
    &.rating-xl :where(*:not(.rating-hidden)) {
      width: calc(0.25rem * 8);
      height: calc(0.25rem * 8);
    }
  }
  .progress {
    position: relative;
    height: calc(0.25rem * 2);
    width: 100%;
    appearance: none;
    overflow: hidden;
    border-radius: var(--radius-box);
    background-color: currentColor;
    @supports (color: color-mix(in lab, red, red)) {
      background-color: color-mix(in oklab, currentColor 20%, transparent);
    }
    color: var(--color-base-content);
    &:indeterminate {
      background-image: repeating-linear-gradient( 90deg, currentColor -1%, currentColor 10%, #0000 10%, #0000 90% );
      background-size: 200%;
      background-position-x: 15%;
      @media (prefers-reduced-motion: no-preference) {
        animation: progress 5s ease-in-out infinite;
      }
      @supports (-moz-appearance: none) {
        &::-moz-progress-bar {
          background-color: transparent;
          @media (prefers-reduced-motion: no-preference) {
            animation: progress 5s ease-in-out infinite;
            background-image: repeating-linear-gradient( 90deg, currentColor -1%, currentColor 10%, #0000 10%, #0000 90% );
            background-size: 200%;
            background-position-x: 15%;
          }
        }
      }
    }
    @supports (-moz-appearance: none) {
      &::-moz-progress-bar {
        border-radius: var(--radius-box);
        background-color: currentColor;
      }
    }
    @supports (-webkit-appearance: none) {
      &::-webkit-progress-bar {
        border-radius: var(--radius-box);
        background-color: transparent;
      }
      &::-webkit-progress-value {
        border-radius: var(--radius-box);
        background-color: currentColor;
      }
    }
  }
  .absolute {
    position: absolute;
  }
  .relative {
    position: relative;
  }
  .static {
    position: static;
  }
  .sticky {
    position: sticky;
  }
  .dropdown-right {
    --anchor-h: right;
    --anchor-v: span-bottom;
    .dropdown-content {
      inset-inline-start: 100%;
      top: calc(0.25rem * 0);
      bottom: auto;
      transform-origin: left;
    }
  }
  .dropdown-left {
    --anchor-h: left;
    --anchor-v: span-bottom;
    .dropdown-content {
      inset-inline-end: 100%;
      top: calc(0.25rem * 0);
      bottom: auto;
      transform-origin: right;
    }
  }
  .dropdown-end {
    --anchor-h: span-left;
    :where(.dropdown-content) {
      inset-inline-end: calc(0.25rem * 0);
      translate: 0 0;
      [dir="rtl"] & {
        translate: 0 0;
      }
    }
    &.dropdown-left {
      --anchor-h: left;
      --anchor-v: span-top;
      .dropdown-content {
        top: auto;
        bottom: calc(0.25rem * 0);
      }
    }
    &.dropdown-right {
      --anchor-h: right;
      --anchor-v: span-top;
      .dropdown-content {
        top: auto;
        bottom: calc(0.25rem * 0);
      }
    }
  }
  .top-0 {
    top: calc(var(--spacing) * 0);
  }
  .textarea {
    border: var(--border) solid #0000;
    min-height: calc(0.25rem * 20);
    flex-shrink: 1;
    appearance: none;
    border-radius: var(--radius-field);
    background-color: var(--color-base-100);
    padding-block: calc(0.25rem * 2);
    vertical-align: middle;
    width: clamp(3rem, 20rem, 100%);
    padding-inline-start: 0.75rem;
    padding-inline-end: 0.75rem;
    font-size: 0.875rem;
    touch-action: manipulation;
    border-color: var(--input-color);
    box-shadow: 0 1px var(--input-color) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
    @supports (color: color-mix(in lab, red, red)) {
      box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
    }
    --input-color: var(--color-base-content);
    @supports (color: color-mix(in lab, red, red)) {
      --input-color: color-mix(in oklab, var(--color-base-content) 20%, #0000);
    }
    textarea {
      appearance: none;
      background-color: transparent;
      border: none;
      &:focus, &:focus-within {
        --tw-outline-style: none;
        outline-style: none;
        @media (forced-colors: active) {
          outline: 2px solid transparent;
          outline-offset: 2px;
        }
      }
    }
    &:focus, &:focus-within {
      --input-color: var(--color-base-content);
      box-shadow: 0 1px var(--input-color);
      @supports (color: color-mix(in lab, red, red)) {
        box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000);
      }
      outline: 2px solid var(--input-color);
      outline-offset: 2px;
      isolation: isolate;
    }
    &:has(> textarea[disabled]), &:is(:disabled, [disabled]) {
      cursor: not-allowed;
      border-color: var(--color-base-200);
      background-color: var(--color-base-200);
      color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, var(--color-base-content) 40%, transparent);
      }
      &::placeholder {
        color: var(--color-base-content);
        @supports (color: color-mix(in lab, red, red)) {
          color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
        }
      }
      box-shadow: none;
    }
    &:has(> textarea[disabled]) > textarea[disabled] {
      cursor: not-allowed;
    }
  }
  .isolate {
    isolation: isolate;
  }
  .stack {
    display: inline-grid;
    grid-template-columns: 3px 4px 1fr 4px 3px;
    grid-template-rows: 3px 4px 1fr 4px 3px;
    & > * {
      height: 100%;
      width: 100%;
      &:nth-child(n + 2) {
        width: 100%;
        opacity: 70%;
      }
      &:nth-child(2) {
        z-index: 2;
        opacity: 90%;
      }
      &:nth-child(1) {
        z-index: 3;
        width: 100%;
      }
    }
    &, &.stack-bottom {
      > * {
        grid-column: 3 / 4;
        grid-row: 3 / 6;
        &:nth-child(2) {
          grid-column: 2 / 5;
          grid-row: 2 / 5;
        }
        &:nth-child(1) {
          grid-column: 1 / 6;
          grid-row: 1 / 4;
        }
      }
    }
    &.stack-top {
      > * {
        grid-column: 3 / 4;
        grid-row: 1 / 4;
        &:nth-child(2) {
          grid-column: 2 / 5;
          grid-row: 2 / 5;
        }
        &:nth-child(1) {
          grid-column: 1 / 6;
          grid-row: 3 / 6;
        }
      }
    }
    &.stack-start {
      > * {
        grid-column: 1 / 4;
        grid-row: 3 / 4;
        &:nth-child(2) {
          grid-column: 2 / 5;
          grid-row: 2 / 5;
        }
        &:nth-child(1) {
          grid-column: 3 / 6;
          grid-row: 1 / 6;
        }
      }
    }
    &.stack-end {
      > * {
        grid-column: 3 / 6;
        grid-row: 3 / 4;
        &:nth-child(2) {
          grid-column: 2 / 5;
          grid-row: 2 / 5;
        }
        &:nth-child(1) {
          grid-column: 1 / 4;
          grid-row: 1 / 6;
        }
      }
    }
  }
  .modal-backdrop {
    grid-column-start: 1;
    grid-row-start: 1;
    display: grid;
    align-self: stretch;
    justify-self: stretch;
    color: transparent;
    z-index: -1;
    button {
      cursor: pointer;
    }
  }
  .z-10 {
    z-index: 10;
  }
  .tab-content {
    order: var(--tabcontent-order);
    display: none;
    border-color: transparent;
    --tabcontent-radius-ss: 0;
    --tabcontent-radius-se: 0;
    --tabcontent-radius-es: 0;
    --tabcontent-radius-ee: 0;
    --tabcontent-order: 1;
    width: 100%;
    margin: var(--tabcontent-margin);
    border-width: var(--border);
    border-start-start-radius: var(--tabcontent-radius-ss);
    border-start-end-radius: var(--tabcontent-radius-se);
    border-end-start-radius: var(--tabcontent-radius-es);
    border-end-end-radius: var(--tabcontent-radius-ee);
  }
  .col-span-1 {
    grid-column: span 1 / span 1;
  }
  .col-span-2 {
    grid-column: span 2 / span 2;
  }
  .col-span-3 {
    grid-column: span 3 / span 3;
  }
  .col-span-6 {
    grid-column: span 6 / span 6;
  }
  .col-span-12 {
    grid-column: span 12 / span 12;
  }
  .modal-box {
    grid-column-start: 1;
    grid-row-start: 1;
    max-height: 100vh;
    width: calc(11/12 * 100%);
    max-width: 32rem;
    background-color: var(--color-base-100);
    padding: calc(0.25rem * 6);
    transition: translate 0.3s ease-out, scale 0.3s ease-out, opacity 0.2s ease-out 0.05s, box-shadow 0.3s ease-out;
    border-top-left-radius: var(--modal-tl, var(--radius-box));
    border-top-right-radius: var(--modal-tr, var(--radius-box));
    border-bottom-left-radius: var(--modal-bl, var(--radius-box));
    border-bottom-right-radius: var(--modal-br, var(--radius-box));
    scale: 95%;
    opacity: 0;
    box-shadow: oklch(0% 0 0/ 0.25) 0px 25px 50px -12px;
    overflow-y: auto;
    overscroll-behavior: contain;
  }
  .drawer-content {
    grid-column-start: 2;
    grid-row-start: 1;
    min-width: calc(0.25rem * 0);
  }
  .container {
    width: 100%;
    @media (width >= 40rem) {
      max-width: 40rem;
    }
    @media (width >= 48rem) {
      max-width: 48rem;
    }
    @media (width >= 64rem) {
      max-width: 64rem;
    }
    @media (width >= 80rem) {
      max-width: 80rem;
    }
    @media (width >= 96rem) {
      max-width: 96rem;
    }
  }
  .divider {
    display: flex;
    height: calc(0.25rem * 4);
    flex-direction: row;
    align-items: center;
    align-self: stretch;
    white-space: nowrap;
    margin: var(--divider-m, 1rem 0);
    --divider-color: var(--color-base-content);
    @supports (color: color-mix(in lab, red, red)) {
      --divider-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
    }
    &:before, &:after {
      content: "";
      height: calc(0.25rem * 0.5);
      width: 100%;
      flex-grow: 1;
      background-color: var(--divider-color);
    }
    @media print {
      &:before, &:after {
        border: 0.5px solid;
      }
    }
    &:not(:empty) {
      gap: calc(0.25rem * 4);
    }
  }
  .filter {
    display: flex;
    flex-wrap: wrap;
    input[type="radio"] {
      width: auto;
    }
    input {
      overflow: hidden;
      opacity: 100%;
      scale: 1;
      transition: margin 0.1s, opacity 0.3s, padding 0.3s, border-width 0.1s;
      &:not(:last-child) {
        margin-inline-end: calc(0.25rem * 1);
      }
      &.filter-reset {
        aspect-ratio: 1 / 1;
        &::after {
          content: "×";
        }
      }
    }
    &:not(:has(input:checked:not(.filter-reset))) {
      .filter-reset, input[type="reset"] {
        scale: 0;
        border-width: 0;
        margin-inline: calc(0.25rem * 0);
        width: calc(0.25rem * 0);
        padding-inline: calc(0.25rem * 0);
        opacity: 0%;
      }
    }
    &:has(input:checked:not(.filter-reset)) {
      input:not(:checked, .filter-reset, input[type="reset"]) {
        scale: 0;
        border-width: 0;
        margin-inline: calc(0.25rem * 0);
        width: calc(0.25rem * 0);
        padding-inline: calc(0.25rem * 0);
        opacity: 0%;
      }
    }
  }
  .mx-2 {
    margin-inline: calc(var(--spacing) * 2);
  }
  .mx-auto {
    margin-inline: auto;
  }
  .my-2 {
    margin-block: calc(var(--spacing) * 2);
  }
  .label {
    display: inline-flex;
    align-items: center;
    gap: calc(0.25rem * 1.5);
    white-space: nowrap;
    color: currentColor;
    @supports (color: color-mix(in lab, red, red)) {
      color: color-mix(in oklab, currentColor 60%, transparent);
    }
    &:has(input) {
      cursor: pointer;
    }
    &:is(.input > *, .select > *) {
      display: flex;
      height: calc(100% - 0.5rem);
      align-items: center;
      padding-inline: calc(0.25rem * 3);
      white-space: nowrap;
      font-size: inherit;
      &:first-child {
        margin-inline-start: calc(0.25rem * -3);
        margin-inline-end: calc(0.25rem * 3);
        border-inline-end: var(--border) solid currentColor;
        @supports (color: color-mix(in lab, red, red)) {
          border-inline-end: var(--border) solid color-mix(in oklab, currentColor 10%, #0000);
        }
      }
      &:last-child {
        margin-inline-start: calc(0.25rem * 3);
        margin-inline-end: calc(0.25rem * -3);
        border-inline-start: var(--border) solid currentColor;
        @supports (color: color-mix(in lab, red, red)) {
          border-inline-start: var(--border) solid color-mix(in oklab, currentColor 10%, #0000);
        }
      }
    }
  }
  .join-item {
    &:where(*:not(:first-child, :disabled, [disabled], .btn-disabled)) {
      margin-inline-start: calc(var(--border, 1px) * -1);
      margin-block-start: 0;
    }
    &:where(*:is(:disabled, [disabled], .btn-disabled)) {
      border-width: var(--border, 1px) 0 var(--border, 1px) var(--border, 1px);
    }
  }
  .modal-action {
    margin-top: calc(0.25rem * 6);
    display: flex;
    justify-content: flex-end;
    gap: calc(0.25rem * 2);
  }
  .mt-1 {
    margin-top: calc(var(--spacing) * 1);
  }
  .mt-2 {
    margin-top: calc(var(--spacing) * 2);
  }
  .mt-3 {
    margin-top: calc(var(--spacing) * 3);
  }
  .mt-4 {
    margin-top: calc(var(--spacing) * 4);
  }
  .mt-6 {
    margin-top: calc(var(--spacing) * 6);
  }
  .breadcrumbs {
    max-width: 100%;
    overflow-x: auto;
    padding-block: calc(0.25rem * 2);
    > menu, > ul, > ol {
      display: flex;
      min-height: min-content;
      align-items: center;
      white-space: nowrap;
      > li {
        display: flex;
        align-items: center;
        > * {
          display: flex;
          cursor: pointer;
          align-items: center;
          gap: calc(0.25rem * 2);
          &:hover {
            @media (hover: hover) {
              text-decoration-line: underline;
            }
          }
          &:focus {
            --tw-outline-style: none;
            outline-style: none;
            @media (forced-colors: active) {
              outline: 2px solid transparent;
              outline-offset: 2px;
            }
          }
          &:focus-visible {
            outline: 2px solid currentColor;
            outline-offset: 2px;
          }
        }
        & + *:before {
          content: "";
          margin-right: calc(0.25rem * 3);
          margin-left: calc(0.25rem * 2);
          display: block;
          height: calc(0.25rem * 1.5);
          width: calc(0.25rem * 1.5);
          opacity: 40%;
          rotate: 45deg;
          border-top: 1px solid;
          border-right: 1px solid;
          background-color: #0000;
        }
        [dir="rtl"] & + *:before {
          rotate: -135deg;
        }
      }
    }
  }
  .mr-2 {
    margin-right: calc(var(--spacing) * 2);
  }
  .mb-1 {
    margin-bottom: calc(var(--spacing) * 1);
  }
  .mb-2 {
    margin-bottom: calc(var(--spacing) * 2);
  }
  .mb-3 {
    margin-bottom: calc(var(--spacing) * 3);
  }
  .mb-4 {
    margin-bottom: calc(var(--spacing) * 4);
  }
  .mb-6 {
    margin-bottom: calc(var(--spacing) * 6);
  }
  .mb-10 {
    margin-bottom: calc(var(--spacing) * 10);
  }
  .ml-2 {
    margin-left: calc(var(--spacing) * 2);
  }
  .status {
    display: inline-block;
    aspect-ratio: 1 / 1;
    width: calc(0.25rem * 2);
    height: calc(0.25rem * 2);
    border-radius: var(--radius-selector);
    background-color: var(--color-base-content);
    @supports (color: color-mix(in lab, red, red)) {
      background-color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
    }
    background-position: center;
    background-repeat: no-repeat;
    vertical-align: middle;
    color: color-mix(in srgb, #000 30%, transparent);
    @supports (color: color-mix(in lab, red, red)) {
      color: color-mix(in srgb, #000 30%, transparent);
      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, var(--color-black) 30%, transparent);
      }
    }
    background-image: radial-gradient( circle at 35% 30%, oklch(1 0 0 / calc(var(--depth) * 0.5)), #0000 );
    box-shadow: 0 2px 3px -1px currentColor;
    @supports (color: color-mix(in lab, red, red)) {
      box-shadow: 0 2px 3px -1px color-mix(in oklab, currentColor calc(var(--depth) * 100%), #0000);
    }
  }
  .badge {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: calc(0.25rem * 2);
    border-radius: var(--radius-selector);
    vertical-align: middle;
    color: var(--badge-fg);
    border: var(--border) solid var(--badge-color, var(--color-base-200));
    font-size: 0.875rem;
    width: fit-content;
    padding-inline: calc(0.25rem * 3 - var(--border));
    background-size: auto, calc(var(--noise) * 100%);
    background-image: none, var(--fx-noise);
    background-color: var(--badge-bg);
    --badge-bg: var(--badge-color, var(--color-base-100));
    --badge-fg: var(--color-base-content);
    --size: calc(var(--size-selector, 0.25rem) * 6);
    height: var(--size);
  }
  .tabs {
    display: flex;
    flex-wrap: wrap;
    --tabs-height: auto;
    --tabs-direction: row;
    --tab-height: calc(var(--size-field, 0.25rem) * 10);
    height: var(--tabs-height);
    flex-direction: var(--tabs-direction);
  }
  .footer {
    display: grid;
    width: 100%;
    grid-auto-flow: row;
    place-items: start;
    column-gap: calc(0.25rem * 4);
    row-gap: calc(0.25rem * 10);
    font-size: 0.875rem;
    line-height: 1.25rem;
    & > * {
      display: grid;
      place-items: start;
      gap: calc(0.25rem * 2);
    }
    &.footer-center {
      grid-auto-flow: column dense;
      place-items: center;
      text-align: center;
      & > * {
        place-items: center;
      }
    }
  }
  .card-body {
    display: flex;
    flex: auto;
    flex-direction: column;
    gap: calc(0.25rem * 2);
    padding: var(--card-p, 1.5rem);
    font-size: var(--card-fs, 0.875rem);
    :where(p) {
      flex-grow: 1;
    }
  }
  .alert {
    display: grid;
    align-items: center;
    gap: calc(0.25rem * 4);
    border-radius: var(--radius-box);
    padding-inline: calc(0.25rem * 4);
    padding-block: calc(0.25rem * 3);
    color: var(--color-base-content);
    background-color: var(--alert-color, var(--color-base-200));
    justify-content: start;
    justify-items: start;
    grid-auto-flow: column;
    grid-template-columns: auto;
    text-align: start;
    border: var(--border) solid var(--color-base-200);
    font-size: 0.875rem;
    line-height: 1.25rem;
    background-size: auto, calc(var(--noise) * 100%);
    background-image: none, var(--fx-noise);
    box-shadow: 0 3px 0 -2px oklch(100% 0 0 / calc(var(--depth) * 0.08)) inset, 0 1px #000, 0 4px 3px -2px oklch(0% 0 0 / calc(var(--depth) * 0.08));
    @supports (color: color-mix(in lab, red, red)) {
      box-shadow: 0 3px 0 -2px oklch(100% 0 0 / calc(var(--depth) * 0.08)) inset, 0 1px color-mix( in oklab, color-mix(in oklab, #000 20%, var(--alert-color, var(--color-base-200))) calc(var(--depth) * 20%), #0000 ), 0 4px 3px -2px oklch(0% 0 0 / calc(var(--depth) * 0.08));
    }
    &:has(:nth-child(2)) {
      grid-template-columns: auto minmax(auto, 1fr);
    }
    &.alert-outline {
      background-color: transparent;
      color: var(--alert-color);
      box-shadow: none;
      background-image: none;
    }
    &.alert-dash {
      background-color: transparent;
      color: var(--alert-color);
      border-style: dashed;
      box-shadow: none;
      background-image: none;
    }
    &.alert-soft {
      color: var(--alert-color, var(--color-base-content));
      background: var(--alert-color, var(--color-base-content));
      @supports (color: color-mix(in lab, red, red)) {
        background: color-mix( in oklab, var(--alert-color, var(--color-base-content)) 8%, var(--color-base-100) );
      }
      border-color: var(--alert-color, var(--color-base-content));
      @supports (color: color-mix(in lab, red, red)) {
        border-color: color-mix( in oklab, var(--alert-color, var(--color-base-content)) 10%, var(--color-base-100) );
      }
      box-shadow: none;
      background-image: none;
    }
  }
  .card-actions {
    display: flex;
    flex-wrap: wrap;
    align-items: flex-start;
    gap: calc(0.25rem * 2);
  }
  .card-title {
    display: flex;
    align-items: center;
    gap: calc(0.25rem * 2);
    font-size: var(--cardtitle-fs, 1.125rem);
    font-weight: 600;
  }
  .join {
    display: inline-flex;
    align-items: stretch;
    --join-ss: 0;
    --join-se: 0;
    --join-es: 0;
    --join-ee: 0;
    :where(.join-item) {
      border-start-start-radius: var(--join-ss, 0);
      border-start-end-radius: var(--join-se, 0);
      border-end-start-radius: var(--join-es, 0);
      border-end-end-radius: var(--join-ee, 0);
      * {
        --join-ss: var(--radius-field);
        --join-se: var(--radius-field);
        --join-es: var(--radius-field);
        --join-ee: var(--radius-field);
      }
    }
    > .join-item:where(:first-child) {
      --join-ss: var(--radius-field);
      --join-se: 0;
      --join-es: var(--radius-field);
      --join-ee: 0;
    }
    :first-child:not(:last-child) {
      :where(.join-item) {
        --join-ss: var(--radius-field);
        --join-se: 0;
        --join-es: var(--radius-field);
        --join-ee: 0;
      }
    }
    > .join-item:where(:last-child) {
      --join-ss: 0;
      --join-se: var(--radius-field);
      --join-es: 0;
      --join-ee: var(--radius-field);
    }
    :last-child:not(:first-child) {
      :where(.join-item) {
        --join-ss: 0;
        --join-se: var(--radius-field);
        --join-es: 0;
        --join-ee: var(--radius-field);
      }
    }
    > .join-item:where(:only-child) {
      --join-ss: var(--radius-field);
      --join-se: var(--radius-field);
      --join-es: var(--radius-field);
      --join-ee: var(--radius-field);
    }
    :only-child {
      :where(.join-item) {
        --join-ss: var(--radius-field);
        --join-se: var(--radius-field);
        --join-es: var(--radius-field);
        --join-ee: var(--radius-field);
      }
    }
  }
  .prose {
    :root & {
      --tw-prose-body: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        --tw-prose-body: color-mix(in oklab, var(--color-base-content) 80%, #0000);
      }
      --tw-prose-headings: var(--color-base-content);
      --tw-prose-lead: var(--color-base-content);
      --tw-prose-links: var(--color-base-content);
      --tw-prose-bold: var(--color-base-content);
      --tw-prose-counters: var(--color-base-content);
      --tw-prose-bullets: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        --tw-prose-bullets: color-mix(in oklab, var(--color-base-content) 50%, #0000);
      }
      --tw-prose-hr: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        --tw-prose-hr: color-mix(in oklab, var(--color-base-content) 20%, #0000);
      }
      --tw-prose-quotes: var(--color-base-content);
      --tw-prose-quote-borders: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        --tw-prose-quote-borders: color-mix(in oklab, var(--color-base-content) 20%, #0000);
      }
      --tw-prose-captions: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        --tw-prose-captions: color-mix(in oklab, var(--color-base-content) 50%, #0000);
      }
      --tw-prose-code: var(--color-base-content);
      --tw-prose-pre-code: var(--color-neutral-content);
      --tw-prose-pre-bg: var(--color-neutral);
      --tw-prose-th-borders: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        --tw-prose-th-borders: color-mix(in oklab, var(--color-base-content) 50%, #0000);
      }
      --tw-prose-td-borders: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        --tw-prose-td-borders: color-mix(in oklab, var(--color-base-content) 20%, #0000);
      }
      --tw-prose-kbd: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        --tw-prose-kbd: color-mix(in oklab, var(--color-base-content) 80%, #0000);
      }
      :where(code):not(pre > code) {
        background-color: var(--color-base-200);
        border-radius: var(--radius-selector);
        border: var(--border) solid var(--color-base-300);
        padding-inline: 0.5em;
        font-weight: inherit;
        &:before, &:after {
          display: none;
        }
      }
    }
  }
  .mask {
    display: inline-block;
    vertical-align: middle;
    mask-size: contain;
    mask-repeat: no-repeat;
    mask-position: center;
  }
  .block {
    display: block;
  }
  .contents {
    display: contents;
  }
  .flex {
    display: flex;
  }
  .grid {
    display: grid;
  }
  .hidden {
    display: none;
  }
  .inline {
    display: inline;
  }
  .inline-block {
    display: inline-block;
  }
  .inline-flex {
    display: inline-flex;
  }
  .table {
    display: table;
  }
  .btn-circle {
    border-radius: calc(infinity * 1px);
    padding-inline: calc(0.25rem * 0);
    width: var(--size);
    height: var(--size);
  }
  .h-5 {
    height: calc(var(--spacing) * 5);
  }
  .h-6 {
    height: calc(var(--spacing) * 6);
  }
  .h-8 {
    height: calc(var(--spacing) * 8);
  }
  .h-24 {
    height: calc(var(--spacing) * 24);
  }
  .h-auto {
    height: auto;
  }
  .h-dvh {
    height: 100dvh;
  }
  .min-h-screen {
    min-height: 100vh;
  }
  .loading-sm {
    width: calc(var(--size-selector, 0.25rem) * 5);
  }
  .loading-xs {
    width: calc(var(--size-selector, 0.25rem) * 4);
  }
  .w-0 {
    width: calc(var(--spacing) * 0);
  }
  .w-5 {
    width: calc(var(--spacing) * 5);
  }
  .w-6 {
    width: calc(var(--spacing) * 6);
  }
  .w-8 {
    width: calc(var(--spacing) * 8);
  }
  .w-40 {
    width: calc(var(--spacing) * 40);
  }
  .w-52 {
    width: calc(var(--spacing) * 52);
  }
  .w-64 {
    width: calc(var(--spacing) * 64);
  }
  .w-72 {
    width: calc(var(--spacing) * 72);
  }
  .w-auto {
    width: auto;
  }
  .w-full {
    width: 100%;
  }
  .max-w-5xl {
    max-width: var(--container-5xl);
  }
  .max-w-7xl {
    max-width: var(--container-7xl);
  }
  .max-w-md {
    max-width: var(--container-md);
  }
  .max-w-xs {
    max-width: var(--container-xs);
  }
  .flex-1 {
    flex: 1;
  }
  .flex-shrink {
    flex-shrink: 1;
  }
  .shrink-0 {
    flex-shrink: 0;
  }
  .flex-grow {
    flex-grow: 1;
  }
  .border-collapse {
    border-collapse: collapse;
  }
  .transform {
    transform: var(--tw-rotate-x,) var(--tw-rotate-y,) var(--tw-rotate-z,) var(--tw-skew-x,) var(--tw-skew-y,);
  }
  .skeleton {
    border-radius: var(--radius-box);
    background-color: var(--color-base-300);
    @media (prefers-reduced-motion: reduce) {
      transition-duration: 15s;
    }
    will-change: background-position;
    background-image: linear-gradient( 105deg, #0000 0% 40%, var(--color-base-100) 50%, #0000 60% 100% );
    background-size: 200% auto;
    background-repeat: no-repeat;
    background-position-x: -50%;
    @media (prefers-reduced-motion: no-preference) {
      animation: skeleton 1.8s ease-in-out infinite;
    }
  }
  .link {
    cursor: pointer;
    text-decoration-line: underline;
    &:focus {
      --tw-outline-style: none;
      outline-style: none;
      @media (forced-colors: active) {
        outline: 2px solid transparent;
        outline-offset: 2px;
      }
    }
    &:focus-visible {
      outline: 2px solid currentColor;
      outline-offset: 2px;
    }
  }
  .cursor-pointer {
    cursor: pointer;
  }
  .resize {
    resize: both;
  }
  .list-inside {
    list-style-position: inside;
  }
  .list-disc {
    list-style-type: disc;
  }
  .grid-cols-2 {
    grid-template-columns: repeat(2, minmax(0, 1fr));
  }
  .grid-cols-3 {
    grid-template-columns: repeat(3, minmax(0, 1fr));
  }
  .grid-cols-12 {
    grid-template-columns: repeat(12, minmax(0, 1fr));
  }
  .flex-col {
    flex-direction: column;
  }
  .flex-row {
    flex-direction: row;
  }
  .flex-wrap {
    flex-wrap: wrap;
  }
  .place-items-center {
    place-items: center;
  }
  .items-center {
    align-items: center;
  }
  .items-end {
    align-items: flex-end;
  }
  .items-start {
    align-items: flex-start;
  }
  .justify-between {
    justify-content: space-between;
  }
  .justify-center {
    justify-content: center;
  }
  .justify-end {
    justify-content: flex-end;
  }
  .justify-start {
    justify-content: flex-start;
  }
  .gap-2 {
    gap: calc(var(--spacing) * 2);
  }
  .gap-3 {
    gap: calc(var(--spacing) * 3);
  }
  .gap-4 {
    gap: calc(var(--spacing) * 4);
  }
  .gap-6 {
    gap: calc(var(--spacing) * 6);
  }
  .gap-8 {
    gap: calc(var(--spacing) * 8);
  }
  .space-y-1 {
    :where(& > :not(:last-child)) {
      --tw-space-y-reverse: 0;
      margin-block-start: calc(calc(var(--spacing) * 1) * var(--tw-space-y-reverse));
      margin-block-end: calc(calc(var(--spacing) * 1) * calc(1 - var(--tw-space-y-reverse)));
    }
  }
  .space-y-2 {
    :where(& > :not(:last-child)) {
      --tw-space-y-reverse: 0;
      margin-block-start: calc(calc(var(--spacing) * 2) * var(--tw-space-y-reverse));
      margin-block-end: calc(calc(var(--spacing) * 2) * calc(1 - var(--tw-space-y-reverse)));
    }
  }
  .space-y-3 {
    :where(& > :not(:last-child)) {
      --tw-space-y-reverse: 0;
      margin-block-start: calc(calc(var(--spacing) * 3) * var(--tw-space-y-reverse));
      margin-block-end: calc(calc(var(--spacing) * 3) * calc(1 - var(--tw-space-y-reverse)));
    }
  }
  .space-y-4 {
    :where(& > :not(:last-child)) {
      --tw-space-y-reverse: 0;
      margin-block-start: calc(calc(var(--spacing) * 4) * var(--tw-space-y-reverse));
      margin-block-end: calc(calc(var(--spacing) * 4) * calc(1 - var(--tw-space-y-reverse)));
    }
  }
  .space-y-6 {
    :where(& > :not(:last-child)) {
      --tw-space-y-reverse: 0;
      margin-block-start: calc(calc(var(--spacing) * 6) * var(--tw-space-y-reverse));
      margin-block-end: calc(calc(var(--spacing) * 6) * calc(1 - var(--tw-space-y-reverse)));
    }
  }
  .space-x-1 {
    :where(& > :not(:last-child)) {
      --tw-space-x-reverse: 0;
      margin-inline-start: calc(calc(var(--spacing) * 1) * var(--tw-space-x-reverse));
      margin-inline-end: calc(calc(var(--spacing) * 1) * calc(1 - var(--tw-space-x-reverse)));
    }
  }
  .space-x-2 {
    :where(& > :not(:last-child)) {
      --tw-space-x-reverse: 0;
      margin-inline-start: calc(calc(var(--spacing) * 2) * var(--tw-space-x-reverse));
      margin-inline-end: calc(calc(var(--spacing) * 2) * calc(1 - var(--tw-space-x-reverse)));
    }
  }
  .divide-y {
    :where(& > :not(:last-child)) {
      --tw-divide-y-reverse: 0;
      border-bottom-style: var(--tw-border-style);
      border-top-style: var(--tw-border-style);
      border-top-width: calc(1px * var(--tw-divide-y-reverse));
      border-bottom-width: calc(1px * calc(1 - var(--tw-divide-y-reverse)));
    }
  }
  .divide-base-200 {
    :where(& > :not(:last-child)) {
      border-color: var(--color-base-200);
    }
  }
  .overflow-x-auto {
    overflow-x: auto;
  }
  .rounded {
    border-radius: 0.25rem;
  }
  .rounded-box {
    border-radius: var(--radius-box);
  }
  .rounded-box {
    border-radius: var(--radius-box);
  }
  .rounded-full {
    border-radius: calc(infinity * 1px);
  }
  .border {
    border-style: var(--tw-border-style);
    border-width: 1px;
  }
  .border-t {
    border-top-style: var(--tw-border-style);
    border-top-width: 1px;
  }
  .border-r {
    border-right-style: var(--tw-border-style);
    border-right-width: 1px;
  }
  .border-b {
    border-bottom-style: var(--tw-border-style);
    border-bottom-width: 1px;
  }
  .border-dashed {
    --tw-border-style: dashed;
    border-style: dashed;
  }
  .badge-ghost {
    border-color: var(--color-base-200);
    background-color: var(--color-base-200);
    color: var(--color-base-content);
    background-image: none;
  }
  .badge-outline {
    color: var(--badge-color);
    --badge-bg: #0000;
    background-image: none;
    border-color: currentColor;
  }
  .alert-error {
    border-color: var(--color-error);
    color: var(--color-error-content);
    --alert-color: var(--color-error);
  }
  .table-zebra {
    tbody {
      tr {
        &:where(:nth-child(even)) {
          background-color: var(--color-base-200);
          :where(.table-pin-cols tr th) {
            background-color: var(--color-base-200);
          }
        }
        &.row-hover {
          &, &:where(:nth-child(even)) {
            &:hover {
              @media (hover: hover) {
                background-color: var(--color-base-300);
              }
            }
          }
        }
      }
    }
  }
  .bg-base-100 {
    background-color: var(--color-base-100);
  }
  .bg-base-200 {
    background-color: var(--color-base-200);
  }
  .bg-base-300 {
    background-color: var(--color-base-300);
  }
  .loading-spinner {
    mask-image: url("data:image/svg+xml,%3Csvg width='24' height='24' stroke='black' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cg transform-origin='center'%3E%3Ccircle cx='12' cy='12' r='9.5' fill='none' stroke-width='3' stroke-linecap='round'%3E%3CanimateTransform attributeName='transform' type='rotate' from='0 12 12' to='360 12 12' dur='2s' repeatCount='indefinite'/%3E%3Canimate attributeName='stroke-dasharray' values='0,150;42,150;42,150' keyTimes='0;0.475;1' dur='1.5s' repeatCount='indefinite'/%3E%3Canimate attributeName='stroke-dashoffset' values='0;-16;-59' keyTimes='0;0.475;1' dur='1.5s' repeatCount='indefinite'/%3E%3C/circle%3E%3C/g%3E%3C/svg%3E");
  }
  .mask-repeat {
    mask-repeat: repeat;
  }
  .fill-accent {
    fill: var(--color-accent);
  }
  .fill-info {
    fill: var(--color-info);
  }
  .fill-neutral {
    fill: var(--color-neutral);
  }
  .p-2 {
    padding: calc(var(--spacing) * 2);
  }
  .p-3 {
    padding: calc(var(--spacing) * 3);
  }
  .p-4 {
    padding: calc(var(--spacing) * 4);
  }
  .p-6 {
    padding: calc(var(--spacing) * 6);
  }
  .p-8 {
    padding: calc(var(--spacing) * 8);
  }
  .p-10 {
    padding: calc(var(--spacing) * 10);
  }
  .badge-sm {
    --size: calc(var(--size-selector, 0.25rem) * 5);
    font-size: 0.75rem;
    padding-inline: calc(0.25rem * 2.5 - var(--border));
  }
  .px-2 {
    padding-inline: calc(var(--spacing) * 2);
  }
  .px-4 {
    padding-inline: calc(var(--spacing) * 4);
  }
  .py-2 {
    padding-block: calc(var(--spacing) * 2);
  }
  .py-3 {
    padding-block: calc(var(--spacing) * 3);
  }
  .py-6 {
    padding-block: calc(var(--spacing) * 6);
  }
  .pt-1 {
    padding-top: calc(var(--spacing) * 1);
  }
  .pt-6 {
    padding-top: calc(var(--spacing) * 6);
  }
  .pl-6 {
    padding-left: calc(var(--spacing) * 6);
  }
  .text-center {
    text-align: center;
  }
  .text-right {
    text-align: right;
  }
  .align-middle {
    vertical-align: middle;
  }
  .font-mono {
    font-family: var(--font-mono);
  }
  .font-sans {
    font-family: var(--font-sans);
  }
  .text-2xl {
    font-size: var(--text-2xl);
    line-height: var(--tw-leading, var(--text-2xl--line-height));
  }
  .text-3xl {
    font-size: var(--text-3xl);
    line-height: var(--tw-leading, var(--text-3xl--line-height));
  }
  .text-base {
    font-size: var(--text-base);
    line-height: var(--tw-leading, var(--text-base--line-height));
  }
  .text-lg {
    font-size: var(--text-lg);
    line-height: var(--tw-leading, var(--text-lg--line-height));
  }
  .text-sm {
    font-size: var(--text-sm);
    line-height: var(--tw-leading, var(--text-sm--line-height));
  }
  .text-xl {
    font-size: var(--text-xl);
    line-height: var(--tw-leading, var(--text-xl--line-height));
  }
  .text-xs {
    font-size: var(--text-xs);
    line-height: var(--tw-leading, var(--text-xs--line-height));
  }
  .font-bold {
    --tw-font-weight: var(--font-weight-bold);
    font-weight: var(--font-weight-bold);
  }
  .font-medium {
    --tw-font-weight: var(--font-weight-medium);
    font-weight: var(--font-weight-medium);
  }
  .font-semibold {
    --tw-font-weight: var(--font-weight-semibold);
    font-weight: var(--font-weight-semibold);
  }
  .text-wrap {
    text-wrap: wrap;
  }
  .whitespace-pre-line {
    white-space: pre-line;
  }
  .text-accent {
    color: var(--color-accent);
  }
  .text-base-100 {
    color: var(--color-base-100);
  }
  .text-base-content {
    color: var(--color-base-content);
  }
  .text-base-content\/70 {
    color: var(--color-base-content);
    @supports (color: color-mix(in lab, red, red)) {
      color: color-mix(in oklab, var(--color-base-content) 70%, transparent);
    }
  }
  .text-black {
    color: var(--color-black);
  }
  .text-error {
    color: var(--color-error);
  }
  .text-neutral-700 {
    color: var(--color-neutral-700);
  }
  .text-primary {
    color: var(--color-primary);
  }
  .capitalize {
    text-transform: capitalize;
  }
  .uppercase {
    text-transform: uppercase;
  }
  .link-hover {
    text-decoration-line: none;
    &:hover {
      @media (hover: hover) {
        text-decoration-line: underline;
      }
    }
  }
  .underline {
    text-decoration-line: underline;
  }
  .opacity-60 {
    opacity: 60%;
  }
  .opacity-70 {
    opacity: 70%;
  }
  .opacity-80 {
    opacity: 80%;
  }
  .shadow {
    --tw-shadow: 0 1px 3px 0 var(--tw-shadow-color, rgb(0 0 0 / 0.1)), 0 1px 2px -1px var(--tw-shadow-color, rgb(0 0 0 / 0.1));
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }
  .outline {
    outline-style: var(--tw-outline-style);
    outline-width: 1px;
  }
  .btn-ghost {
    &:not(.btn-active, :hover, :active:focus, :focus-visible) {
      --btn-shadow: "";
      --btn-bg: #0000;
      --btn-border: #0000;
      --btn-noise: none;
      &:not(:disabled, [disabled], .btn-disabled) {
        outline-color: currentColor;
        --btn-fg: currentColor;
      }
    }
    @media (hover: none) {
      &:hover:not(.btn-active, :active, :focus-visible, :disabled, [disabled], .btn-disabled) {
        --btn-shadow: "";
        --btn-bg: #0000;
        --btn-border: #0000;
        --btn-noise: none;
        --btn-fg: currentColor;
      }
    }
  }
  .filter {
    filter: var(--tw-blur,) var(--tw-brightness,) var(--tw-contrast,) var(--tw-grayscale,) var(--tw-hue-rotate,) var(--tw-invert,) var(--tw-saturate,) var(--tw-sepia,) var(--tw-drop-shadow,);
  }
  .transition {
    transition-property: color, background-color, border-color, outline-color, text-decoration-color, fill, stroke, --tw-gradient-from, --tw-gradient-via, --tw-gradient-to, opacity, box-shadow, transform, translate, scale, rotate, filter, -webkit-backdrop-filter, backdrop-filter, display, content-visibility, overlay, pointer-events;
    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
    transition-duration: var(--tw-duration, var(--default-transition-duration));
  }
  .ease-in-out {
    --tw-ease: var(--ease-in-out);
    transition-timing-function: var(--ease-in-out);
  }
  .ease-out {
    --tw-ease: var(--ease-out);
    transition-timing-function: var(--ease-out);
  }
  .btn-outline {
    &:not( .btn-active, :hover, :active:focus, :focus-visible, :disabled, [disabled], .btn-disabled, :checked ) {
      --btn-shadow: "";
      --btn-bg: #0000;
      --btn-fg: var(--btn-color);
      --btn-border: var(--btn-color);
      --btn-noise: none;
    }
    @media (hover: none) {
      &:hover:not( .btn-active, :active, :focus-visible, :disabled, [disabled], .btn-disabled, :checked ) {
        --btn-shadow: "";
        --btn-bg: #0000;
        --btn-fg: var(--btn-color);
        --btn-border: var(--btn-color);
        --btn-noise: none;
      }
    }
  }
  .btn-soft {
    &:not(.btn-active, :hover, :active:focus, :focus-visible, :disabled, [disabled], .btn-disabled) {
      --btn-shadow: "";
      --btn-fg: var(--btn-color, var(--color-base-content));
      --btn-bg: var(--btn-color, var(--color-base-content));
      @supports (color: color-mix(in lab, red, red)) {
        --btn-bg: color-mix(
      in oklab,
      var(--btn-color, var(--color-base-content)) 8%,
      var(--color-base-100)
    );
      }
      --btn-border: var(--btn-color, var(--color-base-content));
      @supports (color: color-mix(in lab, red, red)) {
        --btn-border: color-mix(
      in oklab,
      var(--btn-color, var(--color-base-content)) 10%,
      var(--color-base-100)
    );
      }
      --btn-noise: none;
    }
    @media (hover: none) {
      &:hover:not(.btn-active, :active, :focus-visible, :disabled, [disabled], .btn-disabled) {
        --btn-shadow: "";
        --btn-fg: var(--btn-color, var(--color-base-content));
        --btn-bg: var(--btn-color, var(--color-base-content));
        @supports (color: color-mix(in lab, red, red)) {
          --btn-bg: color-mix(
        in oklab,
        var(--btn-color, var(--color-base-content)) 8%,
        var(--color-base-100)
      );
        }
        --btn-border: var(--btn-color, var(--color-base-content));
        @supports (color: color-mix(in lab, red, red)) {
          --btn-border: color-mix(
        in oklab,
        var(--btn-color, var(--color-base-content)) 10%,
        var(--color-base-100)
      );
        }
        --btn-noise: none;
      }
    }
  }
  .btn-sm {
    --fontsize: 0.75rem;
    --btn-p: 0.75rem;
    --size: calc(var(--size-field, 0.25rem) * 8);
  }
  .btn-xs {
    --fontsize: 0.6875rem;
    --btn-p: 0.5rem;
    --size: calc(var(--size-field, 0.25rem) * 6);
  }
  .badge-primary {
    --badge-color: var(--color-primary);
    --badge-fg: var(--color-primary-content);
  }
  .badge-success {
    --badge-color: var(--color-success);
    --badge-fg: var(--color-success-content);
  }
  .btn-accent {
    --btn-color: var(--color-accent);
    --btn-fg: var(--color-accent-content);
  }
  .btn-error {
    --btn-color: var(--color-error);
    --btn-fg: var(--color-error-content);
  }
  .btn-neutral {
    --btn-color: var(--color-neutral);
    --btn-fg: var(--color-neutral-content);
  }
  .btn-primary {
    --btn-color: var(--color-primary);
    --btn-fg: var(--color-primary-content);
  }
  .btn-secondary {
    --btn-color: var(--color-secondary);
    --btn-fg: var(--color-secondary-content);
  }
  .btn-success {
    --btn-color: var(--color-success);
    --btn-fg: var(--color-success-content);
  }
  .select-none {
    -webkit-user-select: none;
    user-select: none;
  }
  .focus-visible\:outline {
    &:focus-visible {
      outline-style: var(--tw-outline-style);
      outline-width: 1px;
    }
  }
  .focus-visible\:outline-2 {
    &:focus-visible {
      outline-style: var(--tw-outline-style);
      outline-width: 2px;
    }
  }
  .md\:col-span-1 {
    @media (width >= 48rem) {
      grid-column: span 1 / span 1;
    }
  }
  .md\:col-span-2 {
    @media (width >= 48rem) {
      grid-column: span 2 / span 2;
    }
  }
  .md\:col-span-3 {
    @media (width >= 48rem) {
      grid-column: span 3 / span 3;
    }
  }
  .md\:col-span-4 {
    @media (width >= 48rem) {
      grid-column: span 4 / span 4;
    }
  }
  .md\:col-span-5 {
    @media (width >= 48rem) {
      grid-column: span 5 / span 5;
    }
  }
  .md\:col-span-6 {
    @media (width >= 48rem) {
      grid-column: span 6 / span 6;
    }
  }
  .md\:col-span-8 {
    @media (width >= 48rem) {
      grid-column: span 8 / span 8;
    }
  }
  .md\:col-span-9 {
    @media (width >= 48rem) {
      grid-column: span 9 / span 9;
    }
  }
  .md\:flex {
    @media (width >= 48rem) {
      display: flex;
    }
  }
  .md\:inline-flex {
    @media (width >= 48rem) {
      display: inline-flex;
    }
  }
  .md\:w-80 {
    @media (width >= 48rem) {
      width: calc(var(--spacing) * 80);
    }
  }
  .md\:grid-cols-2 {
    @media (width >= 48rem) {
      grid-template-columns: repeat(2, minmax(0, 1fr));
    }
  }
  .md\:grid-cols-3 {
    @media (width >= 48rem) {
      grid-template-columns: repeat(3, minmax(0, 1fr));
    }
  }
  .md\:grid-cols-5 {
    @media (width >= 48rem) {
      grid-template-columns: repeat(5, minmax(0, 1fr));
    }
  }
  .md\:grid-cols-6 {
    @media (width >= 48rem) {
      grid-template-columns: repeat(6, minmax(0, 1fr));
    }
  }
  .md\:grid-cols-12 {
    @media (width >= 48rem) {
      grid-template-columns: repeat(12, minmax(0, 1fr));
    }
  }
  .md\:flex-nowrap {
    @media (width >= 48rem) {
      flex-wrap: nowrap;
    }
  }
  .md\:px-6 {
    @media (width >= 48rem) {
      padding-inline: calc(var(--spacing) * 6);
    }
  }
  .md\:text-3xl {
    @media (width >= 48rem) {
      font-size: var(--text-3xl);
      line-height: var(--tw-leading, var(--text-3xl--line-height));
    }
  }
}
@layer base {
  :where(:root),:root:has(input.theme-controller[value=light]:checked),[data-theme=light] {
    color-scheme: light;
    --color-base-100: oklch(100% 0 0);
    --color-base-200: oklch(98% 0 0);
    --color-base-300: oklch(95% 0 0);
    --color-base-content: oklch(21% 0.006 285.885);
    --color-primary: oklch(45% 0.24 277.023);
    --color-primary-content: oklch(93% 0.034 272.788);
    --color-secondary: oklch(65% 0.241 354.308);
    --color-secondary-content: oklch(94% 0.028 342.258);
    --color-accent: oklch(77% 0.152 181.912);
    --color-accent-content: oklch(38% 0.063 188.416);
    --color-neutral: oklch(14% 0.005 285.823);
    --color-neutral-content: oklch(92% 0.004 286.32);
    --color-info: oklch(74% 0.16 232.661);
    --color-info-content: oklch(29% 0.066 243.157);
    --color-success: oklch(76% 0.177 163.223);
    --color-success-content: oklch(37% 0.077 168.94);
    --color-warning: oklch(82% 0.189 84.429);
    --color-warning-content: oklch(41% 0.112 45.904);
    --color-error: oklch(71% 0.194 13.428);
    --color-error-content: oklch(27% 0.105 12.094);
    --radius-selector: 0.5rem;
    --radius-field: 0.25rem;
    --radius-box: 0.5rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 1;
    --noise: 0;
  }
}
@layer base {
  @media (prefers-color-scheme: dark) {
    :root:not([data-theme]) {
      color-scheme: dark;
      --color-base-100: oklch(25.33% 0.016 252.42);
      --color-base-200: oklch(23.26% 0.014 253.1);
      --color-base-300: oklch(21.15% 0.012 254.09);
      --color-base-content: oklch(97.807% 0.029 256.847);
      --color-primary: oklch(58% 0.233 277.117);
      --color-primary-content: oklch(96% 0.018 272.314);
      --color-secondary: oklch(65% 0.241 354.308);
      --color-secondary-content: oklch(94% 0.028 342.258);
      --color-accent: oklch(77% 0.152 181.912);
      --color-accent-content: oklch(38% 0.063 188.416);
      --color-neutral: oklch(14% 0.005 285.823);
      --color-neutral-content: oklch(92% 0.004 286.32);
      --color-info: oklch(74% 0.16 232.661);
      --color-info-content: oklch(29% 0.066 243.157);
      --color-success: oklch(76% 0.177 163.223);
      --color-success-content: oklch(37% 0.077 168.94);
      --color-warning: oklch(82% 0.189 84.429);
      --color-warning-content: oklch(41% 0.112 45.904);
      --color-error: oklch(71% 0.194 13.428);
      --color-error-content: oklch(27% 0.105 12.094);
      --radius-selector: 0.5rem;
      --radius-field: 0.25rem;
      --radius-box: 0.5rem;
      --size-selector: 0.25rem;
      --size-field: 0.25rem;
      --border: 1px;
      --depth: 1;
      --noise: 0;
    }
  }
}
@layer base {
  :root:has(input.theme-controller[value=light]:checked),[data-theme=light] {
    color-scheme: light;
    --color-base-100: oklch(100% 0 0);
    --color-base-200: oklch(98% 0 0);
    --color-base-300: oklch(95% 0 0);
    --color-base-content: oklch(21% 0.006 285.885);
    --color-primary: oklch(45% 0.24 277.023);
    --color-primary-content: oklch(93% 0.034 272.788);
    --color-secondary: oklch(65% 0.241 354.308);
    --color-secondary-content: oklch(94% 0.028 342.258);
    --color-accent: oklch(77% 0.152 181.912);
    --color-accent-content: oklch(38% 0.063 188.416);
    --color-neutral: oklch(14% 0.005 285.823);
    --color-neutral-content: oklch(92% 0.004 286.32);
    --color-info: oklch(74% 0.16 232.661);
    --color-info-content: oklch(29% 0.066 243.157);
    --color-success: oklch(76% 0.177 163.223);
    --color-success-content: oklch(37% 0.077 168.94);
    --color-warning: oklch(82% 0.189 84.429);
    --color-warning-content: oklch(41% 0.112 45.904);
    --color-error: oklch(71% 0.194 13.428);
    --color-error-content: oklch(27% 0.105 12.094);
    --radius-selector: 0.5rem;
    --radius-field: 0.25rem;
    --radius-box: 0.5rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 1;
    --noise: 0;
  }
}
@layer base {
  :root:has(input.theme-controller[value=dark]:checked),[data-theme=dark] {
    color-scheme: dark;
    --color-base-100: oklch(25.33% 0.016 252.42);
    --color-base-200: oklch(23.26% 0.014 253.1);
    --color-base-300: oklch(21.15% 0.012 254.09);
    --color-base-content: oklch(97.807% 0.029 256.847);
    --color-primary: oklch(58% 0.233 277.117);
    --color-primary-content: oklch(96% 0.018 272.314);
    --color-secondary: oklch(65% 0.241 354.308);
    --color-secondary-content: oklch(94% 0.028 342.258);
    --color-accent: oklch(77% 0.152 181.912);
    --color-accent-content: oklch(38% 0.063 188.416);
    --color-neutral: oklch(14% 0.005 285.823);
    --color-neutral-content: oklch(92% 0.004 286.32);
    --color-info: oklch(74% 0.16 232.661);
    --color-info-content: oklch(29% 0.066 243.157);
    --color-success: oklch(76% 0.177 163.223);
    --color-success-content: oklch(37% 0.077 168.94);
    --color-warning: oklch(82% 0.189 84.429);
    --color-warning-content: oklch(41% 0.112 45.904);
    --color-error: oklch(71% 0.194 13.428);
    --color-error-content: oklch(27% 0.105 12.094);
    --radius-selector: 0.5rem;
    --radius-field: 0.25rem;
    --radius-box: 0.5rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 1;
    --noise: 0;
  }
}
@layer base {
  :root:has(input.theme-controller[value=cupcake]:checked),[data-theme=cupcake] {
    color-scheme: light;
    --color-base-100: oklch(97.788% 0.004 56.375);
    --color-base-200: oklch(93.982% 0.007 61.449);
    --color-base-300: oklch(91.586% 0.006 53.44);
    --color-base-content: oklch(23.574% 0.066 313.189);
    --color-primary: oklch(85% 0.138 181.071);
    --color-primary-content: oklch(43% 0.078 188.216);
    --color-secondary: oklch(89% 0.061 343.231);
    --color-secondary-content: oklch(45% 0.187 3.815);
    --color-accent: oklch(90% 0.076 70.697);
    --color-accent-content: oklch(47% 0.157 37.304);
    --color-neutral: oklch(27% 0.006 286.033);
    --color-neutral-content: oklch(92% 0.004 286.32);
    --color-info: oklch(68% 0.169 237.323);
    --color-info-content: oklch(29% 0.066 243.157);
    --color-success: oklch(69% 0.17 162.48);
    --color-success-content: oklch(26% 0.051 172.552);
    --color-warning: oklch(79% 0.184 86.047);
    --color-warning-content: oklch(28% 0.066 53.813);
    --color-error: oklch(64% 0.246 16.439);
    --color-error-content: oklch(27% 0.105 12.094);
    --radius-selector: 1rem;
    --radius-field: 2rem;
    --radius-box: 1rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 2px;
    --depth: 1;
    --noise: 0;
  }
}
@layer base {
  :root:has(input.theme-controller[value=bumblebee]:checked),[data-theme=bumblebee] {
    color-scheme: light;
    --color-base-100: oklch(100% 0 0);
    --color-base-200: oklch(97% 0 0);
    --color-base-300: oklch(92% 0 0);
    --color-base-content: oklch(20% 0 0);
    --color-primary: oklch(85% 0.199 91.936);
    --color-primary-content: oklch(42% 0.095 57.708);
    --color-secondary: oklch(75% 0.183 55.934);
    --color-secondary-content: oklch(40% 0.123 38.172);
    --color-accent: oklch(0% 0 0);
    --color-accent-content: oklch(100% 0 0);
    --color-neutral: oklch(37% 0.01 67.558);
    --color-neutral-content: oklch(92% 0.003 48.717);
    --color-info: oklch(74% 0.16 232.661);
    --color-info-content: oklch(39% 0.09 240.876);
    --color-success: oklch(76% 0.177 163.223);
    --color-success-content: oklch(37% 0.077 168.94);
    --color-warning: oklch(82% 0.189 84.429);
    --color-warning-content: oklch(41% 0.112 45.904);
    --color-error: oklch(70% 0.191 22.216);
    --color-error-content: oklch(39% 0.141 25.723);
    --radius-selector: 1rem;
    --radius-field: 0.5rem;
    --radius-box: 1rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 1;
    --noise: 0;
  }
}
@layer base {
  :root:has(input.theme-controller[value=emerald]:checked),[data-theme=emerald] {
    color-scheme: light;
    --color-base-100: oklch(100% 0 0);
    --color-base-200: oklch(93% 0 0);
    --color-base-300: oklch(86% 0 0);
    --color-base-content: oklch(35.519% 0.032 262.988);
    --color-primary: oklch(76.662% 0.135 153.45);
    --color-primary-content: oklch(33.387% 0.04 162.24);
    --color-secondary: oklch(61.302% 0.202 261.294);
    --color-secondary-content: oklch(100% 0 0);
    --color-accent: oklch(72.772% 0.149 33.2);
    --color-accent-content: oklch(0% 0 0);
    --color-neutral: oklch(35.519% 0.032 262.988);
    --color-neutral-content: oklch(98.462% 0.001 247.838);
    --color-info: oklch(72.06% 0.191 231.6);
    --color-info-content: oklch(0% 0 0);
    --color-success: oklch(64.8% 0.15 160);
    --color-success-content: oklch(0% 0 0);
    --color-warning: oklch(84.71% 0.199 83.87);
    --color-warning-content: oklch(0% 0 0);
    --color-error: oklch(71.76% 0.221 22.18);
    --color-error-content: oklch(0% 0 0);
    --radius-selector: 1rem;
    --radius-field: 0.5rem;
    --radius-box: 1rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 0;
    --noise: 0;
  }
}
@layer base {
  :root:has(input.theme-controller[value=corporate]:checked),[data-theme=corporate] {
    color-scheme: light;
    --color-base-100: oklch(100% 0 0);
    --color-base-200: oklch(93% 0 0);
    --color-base-300: oklch(86% 0 0);
    --color-base-content: oklch(22.389% 0.031 278.072);
    --color-primary: oklch(58% 0.158 241.966);
    --color-primary-content: oklch(100% 0 0);
    --color-secondary: oklch(55% 0.046 257.417);
    --color-secondary-content: oklch(100% 0 0);
    --color-accent: oklch(60% 0.118 184.704);
    --color-accent-content: oklch(100% 0 0);
    --color-neutral: oklch(0% 0 0);
    --color-neutral-content: oklch(100% 0 0);
    --color-info: oklch(60% 0.126 221.723);
    --color-info-content: oklch(100% 0 0);
    --color-success: oklch(62% 0.194 149.214);
    --color-success-content: oklch(100% 0 0);
    --color-warning: oklch(85% 0.199 91.936);
    --color-warning-content: oklch(0% 0 0);
    --color-error: oklch(70% 0.191 22.216);
    --color-error-content: oklch(0% 0 0);
    --radius-selector: 0.25rem;
    --radius-field: 0.25rem;
    --radius-box: 0.25rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 0;
    --noise: 0;
  }
}
@layer base {
  :root:has(input.theme-controller[value=synthwave]:checked),[data-theme=synthwave] {
    color-scheme: dark;
    --color-base-100: oklch(15% 0.09 281.288);
    --color-base-200: oklch(20% 0.09 281.288);
    --color-base-300: oklch(25% 0.09 281.288);
    --color-base-content: oklch(78% 0.115 274.713);
    --color-primary: oklch(71% 0.202 349.761);
    --color-primary-content: oklch(28% 0.109 3.907);
    --color-secondary: oklch(82% 0.111 230.318);
    --color-secondary-content: oklch(29% 0.066 243.157);
    --color-accent: oklch(75% 0.183 55.934);
    --color-accent-content: oklch(26% 0.079 36.259);
    --color-neutral: oklch(45% 0.24 277.023);
    --color-neutral-content: oklch(87% 0.065 274.039);
    --color-info: oklch(74% 0.16 232.661);
    --color-info-content: oklch(29% 0.066 243.157);
    --color-success: oklch(77% 0.152 181.912);
    --color-success-content: oklch(27% 0.046 192.524);
    --color-warning: oklch(90% 0.182 98.111);
    --color-warning-content: oklch(42% 0.095 57.708);
    --color-error: oklch(73.7% 0.121 32.639);
    --color-error-content: oklch(23.501% 0.096 290.329);
    --radius-selector: 1rem;
    --radius-field: 0.5rem;
    --radius-box: 1rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 0;
    --noise: 0;
  }
}
@layer base {
  :root:has(input.theme-controller[value=retro]:checked),[data-theme=retro] {
    color-scheme: light;
    --color-base-100: oklch(91.637% 0.034 90.515);
    --color-base-200: oklch(88.272% 0.049 91.774);
    --color-base-300: oklch(84.133% 0.065 90.856);
    --color-base-content: oklch(41% 0.112 45.904);
    --color-primary: oklch(80% 0.114 19.571);
    --color-primary-content: oklch(39% 0.141 25.723);
    --color-secondary: oklch(92% 0.084 155.995);
    --color-secondary-content: oklch(44% 0.119 151.328);
    --color-accent: oklch(68% 0.162 75.834);
    --color-accent-content: oklch(41% 0.112 45.904);
    --color-neutral: oklch(44% 0.011 73.639);
    --color-neutral-content: oklch(86% 0.005 56.366);
    --color-info: oklch(58% 0.158 241.966);
    --color-info-content: oklch(96% 0.059 95.617);
    --color-success: oklch(51% 0.096 186.391);
    --color-success-content: oklch(96% 0.059 95.617);
    --color-warning: oklch(64% 0.222 41.116);
    --color-warning-content: oklch(96% 0.059 95.617);
    --color-error: oklch(70% 0.191 22.216);
    --color-error-content: oklch(40% 0.123 38.172);
    --radius-selector: 0.25rem;
    --radius-field: 0.25rem;
    --radius-box: 0.5rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 0;
    --noise: 0;
  }
}
@layer base {
  :root:has(input.theme-controller[value=cyberpunk]:checked),[data-theme=cyberpunk] {
    color-scheme: light;
    --color-base-100: oklch(94.51% 0.179 104.32);
    --color-base-200: oklch(91.51% 0.179 104.32);
    --color-base-300: oklch(85.51% 0.179 104.32);
    --color-base-content: oklch(0% 0 0);
    --color-primary: oklch(74.22% 0.209 6.35);
    --color-primary-content: oklch(14.844% 0.041 6.35);
    --color-secondary: oklch(83.33% 0.184 204.72);
    --color-secondary-content: oklch(16.666% 0.036 204.72);
    --color-accent: oklch(71.86% 0.217 310.43);
    --color-accent-content: oklch(14.372% 0.043 310.43);
    --color-neutral: oklch(23.04% 0.065 269.31);
    --color-neutral-content: oklch(94.51% 0.179 104.32);
    --color-info: oklch(72.06% 0.191 231.6);
    --color-info-content: oklch(0% 0 0);
    --color-success: oklch(64.8% 0.15 160);
    --color-success-content: oklch(0% 0 0);
    --color-warning: oklch(84.71% 0.199 83.87);
    --color-warning-content: oklch(0% 0 0);
    --color-error: oklch(71.76% 0.221 22.18);
    --color-error-content: oklch(0% 0 0);
    --radius-selector: 0rem;
    --radius-field: 0rem;
    --radius-box: 0rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 0;
    --noise: 0;
  }
}
@layer base {
  :root:has(input.theme-controller[value=valentine]:checked),[data-theme=valentine] {
    color-scheme: light;
    --color-base-100: oklch(97% 0.014 343.198);
    --color-base-200: oklch(94% 0.028 342.258);
    --color-base-300: oklch(89% 0.061 343.231);
    --color-base-content: oklch(52% 0.223 3.958);
    --color-primary: oklch(65% 0.241 354.308);
    --color-primary-content: oklch(100% 0 0);
    --color-secondary: oklch(62% 0.265 303.9);
    --color-secondary-content: oklch(97% 0.014 308.299);
    --color-accent: oklch(82% 0.111 230.318);
    --color-accent-content: oklch(39% 0.09 240.876);
    --color-neutral: oklch(40% 0.153 2.432);
    --color-neutral-content: oklch(89% 0.061 343.231);
    --color-info: oklch(86% 0.127 207.078);
    --color-info-content: oklch(44% 0.11 240.79);
    --color-success: oklch(84% 0.143 164.978);
    --color-success-content: oklch(43% 0.095 166.913);
    --color-warning: oklch(75% 0.183 55.934);
    --color-warning-content: oklch(26% 0.079 36.259);
    --color-error: oklch(63% 0.237 25.331);
    --color-error-content: oklch(97% 0.013 17.38);
    --radius-selector: 1rem;
    --radius-field: 2rem;
    --radius-box: 1rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 0;
    --noise: 0;
  }
}
@layer base {
  :root:has(input.theme-controller[value=halloween]:checked),[data-theme=halloween] {
    color-scheme: dark;
    --color-base-100: oklch(21% 0.006 56.043);
    --color-base-200: oklch(14% 0.004 49.25);
    --color-base-300: oklch(0% 0 0);
    --color-base-content: oklch(84.955% 0 0);
    --color-primary: oklch(77.48% 0.204 60.62);
    --color-primary-content: oklch(19.693% 0.004 196.779);
    --color-secondary: oklch(45.98% 0.248 305.03);
    --color-secondary-content: oklch(89.196% 0.049 305.03);
    --color-accent: oklch(64.8% 0.223 136.073);
    --color-accent-content: oklch(0% 0 0);
    --color-neutral: oklch(24.371% 0.046 65.681);
    --color-neutral-content: oklch(84.874% 0.009 65.681);
    --color-info: oklch(54.615% 0.215 262.88);
    --color-info-content: oklch(90.923% 0.043 262.88);
    --color-success: oklch(62.705% 0.169 149.213);
    --color-success-content: oklch(12.541% 0.033 149.213);
    --color-warning: oklch(66.584% 0.157 58.318);
    --color-warning-content: oklch(13.316% 0.031 58.318);
    --color-error: oklch(65.72% 0.199 27.33);
    --color-error-content: oklch(13.144% 0.039 27.33);
    --radius-selector: 1rem;
    --radius-field: 0.5rem;
    --radius-box: 1rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 1;
    --noise: 0;
  }
}
@layer base {
  :root:has(input.theme-controller[value=garden]:checked),[data-theme=garden] {
    color-scheme: light;
    --color-base-100: oklch(92.951% 0.002 17.197);
    --color-base-200: oklch(86.445% 0.002 17.197);
    --color-base-300: oklch(79.938% 0.001 17.197);
    --color-base-content: oklch(16.961% 0.001 17.32);
    --color-primary: oklch(62.45% 0.278 3.836);
    --color-primary-content: oklch(100% 0 0);
    --color-secondary: oklch(48.495% 0.11 355.095);
    --color-secondary-content: oklch(89.699% 0.022 355.095);
    --color-accent: oklch(56.273% 0.054 154.39);
    --color-accent-content: oklch(100% 0 0);
    --color-neutral: oklch(24.155% 0.049 89.07);
    --color-neutral-content: oklch(92.951% 0.002 17.197);
    --color-info: oklch(72.06% 0.191 231.6);
    --color-info-content: oklch(0% 0 0);
    --color-success: oklch(64.8% 0.15 160);
    --color-success-content: oklch(0% 0 0);
    --color-warning: oklch(84.71% 0.199 83.87);
    --color-warning-content: oklch(0% 0 0);
    --color-error: oklch(71.76% 0.221 22.18);
    --color-error-content: oklch(0% 0 0);
    --radius-selector: 1rem;
    --radius-field: 0.5rem;
    --radius-box: 1rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 0;
    --noise: 0;
  }
}
@layer base {
  :root:has(input.theme-controller[value=forest]:checked),[data-theme=forest] {
    color-scheme: dark;
    --color-base-100: oklch(20.84% 0.008 17.911);
    --color-base-200: oklch(18.522% 0.007 17.911);
    --color-base-300: oklch(16.203% 0.007 17.911);
    --color-base-content: oklch(83.768% 0.001 17.911);
    --color-primary: oklch(68.628% 0.185 148.958);
    --color-primary-content: oklch(0% 0 0);
    --color-secondary: oklch(69.776% 0.135 168.327);
    --color-secondary-content: oklch(13.955% 0.027 168.327);
    --color-accent: oklch(70.628% 0.119 185.713);
    --color-accent-content: oklch(14.125% 0.023 185.713);
    --color-neutral: oklch(30.698% 0.039 171.364);
    --color-neutral-content: oklch(86.139% 0.007 171.364);
    --color-info: oklch(72.06% 0.191 231.6);
    --color-info-content: oklch(0% 0 0);
    --color-success: oklch(64.8% 0.15 160);
    --color-success-content: oklch(0% 0 0);
    --color-warning: oklch(84.71% 0.199 83.87);
    --color-warning-content: oklch(0% 0 0);
    --color-error: oklch(71.76% 0.221 22.18);
    --color-error-content: oklch(0% 0 0);
    --radius-selector: 1rem;
    --radius-field: 2rem;
    --radius-box: 1rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 0;
    --noise: 0;
  }
}
@layer base {
  :root:has(input.theme-controller[value=aqua]:checked),[data-theme=aqua] {
    color-scheme: dark;
    --color-base-100: oklch(37% 0.146 265.522);
    --color-base-200: oklch(28% 0.091 267.935);
    --color-base-300: oklch(22% 0.091 267.935);
    --color-base-content: oklch(90% 0.058 230.902);
    --color-primary: oklch(85.661% 0.144 198.645);
    --color-primary-content: oklch(40.124% 0.068 197.603);
    --color-secondary: oklch(60.682% 0.108 309.782);
    --color-secondary-content: oklch(96% 0.016 293.756);
    --color-accent: oklch(93.426% 0.102 94.555);
    --color-accent-content: oklch(18.685% 0.02 94.555);
    --color-neutral: oklch(27% 0.146 265.522);
    --color-neutral-content: oklch(80% 0.146 265.522);
    --color-info: oklch(54.615% 0.215 262.88);
    --color-info-content: oklch(90.923% 0.043 262.88);
    --color-success: oklch(62.705% 0.169 149.213);
    --color-success-content: oklch(12.541% 0.033 149.213);
    --color-warning: oklch(66.584% 0.157 58.318);
    --color-warning-content: oklch(27% 0.077 45.635);
    --color-error: oklch(73.95% 0.19 27.33);
    --color-error-content: oklch(14.79% 0.038 27.33);
    --radius-selector: 1rem;
    --radius-field: 0.5rem;
    --radius-box: 1rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 1;
    --noise: 0;
  }
}
@layer base {
  :root:has(input.theme-controller[value=lofi]:checked),[data-theme=lofi] {
    color-scheme: light;
    --color-base-100: oklch(100% 0 0);
    --color-base-200: oklch(97% 0 0);
    --color-base-300: oklch(94% 0 0);
    --color-base-content: oklch(0% 0 0);
    --color-primary: oklch(15.906% 0 0);
    --color-primary-content: oklch(100% 0 0);
    --color-secondary: oklch(21.455% 0.001 17.278);
    --color-secondary-content: oklch(100% 0 0);
    --color-accent: oklch(26.861% 0 0);
    --color-accent-content: oklch(100% 0 0);
    --color-neutral: oklch(0% 0 0);
    --color-neutral-content: oklch(100% 0 0);
    --color-info: oklch(79.54% 0.103 205.9);
    --color-info-content: oklch(15.908% 0.02 205.9);
    --color-success: oklch(90.13% 0.153 164.14);
    --color-success-content: oklch(18.026% 0.03 164.14);
    --color-warning: oklch(88.37% 0.135 79.94);
    --color-warning-content: oklch(17.674% 0.027 79.94);
    --color-error: oklch(78.66% 0.15 28.47);
    --color-error-content: oklch(15.732% 0.03 28.47);
    --radius-selector: 2rem;
    --radius-field: 0.25rem;
    --radius-box: 0.5rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 0;
    --noise: 0;
  }
}
@layer base {
  :root:has(input.theme-controller[value=pastel]:checked),[data-theme=pastel] {
    color-scheme: light;
    --color-base-100: oklch(100% 0 0);
    --color-base-200: oklch(98.462% 0.001 247.838);
    --color-base-300: oklch(92.462% 0.001 247.838);
    --color-base-content: oklch(20% 0 0);
    --color-primary: oklch(90% 0.063 306.703);
    --color-primary-content: oklch(49% 0.265 301.924);
    --color-secondary: oklch(89% 0.058 10.001);
    --color-secondary-content: oklch(51% 0.222 16.935);
    --color-accent: oklch(90% 0.093 164.15);
    --color-accent-content: oklch(50% 0.118 165.612);
    --color-neutral: oklch(55% 0.046 257.417);
    --color-neutral-content: oklch(92% 0.013 255.508);
    --color-info: oklch(86% 0.127 207.078);
    --color-info-content: oklch(52% 0.105 223.128);
    --color-success: oklch(87% 0.15 154.449);
    --color-success-content: oklch(52% 0.154 150.069);
    --color-warning: oklch(83% 0.128 66.29);
    --color-warning-content: oklch(55% 0.195 38.402);
    --color-error: oklch(80% 0.114 19.571);
    --color-error-content: oklch(50% 0.213 27.518);
    --radius-selector: 1rem;
    --radius-field: 2rem;
    --radius-box: 1rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 2px;
    --depth: 0;
    --noise: 0;
  }
}
@layer base {
  :root:has(input.theme-controller[value=fantasy]:checked),[data-theme=fantasy] {
    color-scheme: light;
    --color-base-100: oklch(100% 0 0);
    --color-base-200: oklch(93% 0 0);
    --color-base-300: oklch(86% 0 0);
    --color-base-content: oklch(27.807% 0.029 256.847);
    --color-primary: oklch(37.45% 0.189 325.02);
    --color-primary-content: oklch(87.49% 0.037 325.02);
    --color-secondary: oklch(53.92% 0.162 241.36);
    --color-secondary-content: oklch(90.784% 0.032 241.36);
    --color-accent: oklch(75.98% 0.204 56.72);
    --color-accent-content: oklch(15.196% 0.04 56.72);
    --color-neutral: oklch(27.807% 0.029 256.847);
    --color-neutral-content: oklch(85.561% 0.005 256.847);
    --color-info: oklch(72.06% 0.191 231.6);
    --color-info-content: oklch(0% 0 0);
    --color-success: oklch(64.8% 0.15 160);
    --color-success-content: oklch(0% 0 0);
    --color-warning: oklch(84.71% 0.199 83.87);
    --color-warning-content: oklch(0% 0 0);
    --color-error: oklch(71.76% 0.221 22.18);
    --color-error-content: oklch(0% 0 0);
    --radius-selector: 1rem;
    --radius-field: 0.5rem;
    --radius-box: 1rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 1;
    --noise: 0;
  }
}
@layer base {
  :root:has(input.theme-controller[value=wireframe]:checked),[data-theme=wireframe] {
    color-scheme: light;
    --color-base-100: oklch(100% 0 0);
    --color-base-200: oklch(97% 0 0);
    --color-base-300: oklch(94% 0 0);
    --color-base-content: oklch(20% 0 0);
    --color-primary: oklch(87% 0 0);
    --color-primary-content: oklch(26% 0 0);
    --color-secondary: oklch(87% 0 0);
    --color-secondary-content: oklch(26% 0 0);
    --color-accent: oklch(87% 0 0);
    --color-accent-content: oklch(26% 0 0);
    --color-neutral: oklch(87% 0 0);
    --color-neutral-content: oklch(26% 0 0);
    --color-info: oklch(44% 0.11 240.79);
    --color-info-content: oklch(90% 0.058 230.902);
    --color-success: oklch(43% 0.095 166.913);
    --color-success-content: oklch(90% 0.093 164.15);
    --color-warning: oklch(47% 0.137 46.201);
    --color-warning-content: oklch(92% 0.12 95.746);
    --color-error: oklch(44% 0.177 26.899);
    --color-error-content: oklch(88% 0.062 18.334);
    --radius-selector: 0rem;
    --radius-field: 0.25rem;
    --radius-box: 0.25rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 0;
    --noise: 0;
  }
}
@layer base {
  :root:has(input.theme-controller[value=black]:checked),[data-theme=black] {
    color-scheme: dark;
    --color-base-100: oklch(0% 0 0);
    --color-base-200: oklch(19% 0 0);
    --color-base-300: oklch(22% 0 0);
    --color-base-content: oklch(87.609% 0 0);
    --color-primary: oklch(35% 0 0);
    --color-primary-content: oklch(100% 0 0);
    --color-secondary: oklch(35% 0 0);
    --color-secondary-content: oklch(100% 0 0);
    --color-accent: oklch(35% 0 0);
    --color-accent-content: oklch(100% 0 0);
    --color-neutral: oklch(35% 0 0);
    --color-neutral-content: oklch(100% 0 0);
    --color-info: oklch(45.201% 0.313 264.052);
    --color-info-content: oklch(89.04% 0.062 264.052);
    --color-success: oklch(51.975% 0.176 142.495);
    --color-success-content: oklch(90.395% 0.035 142.495);
    --color-warning: oklch(96.798% 0.211 109.769);
    --color-warning-content: oklch(19.359% 0.042 109.769);
    --color-error: oklch(62.795% 0.257 29.233);
    --color-error-content: oklch(12.559% 0.051 29.233);
    --radius-selector: 0rem;
    --radius-field: 0rem;
    --radius-box: 0rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 0;
    --noise: 0;
  }
}
@layer base {
  :root:has(input.theme-controller[value=luxury]:checked),[data-theme=luxury] {
    color-scheme: dark;
    --color-base-100: oklch(14.076% 0.004 285.822);
    --color-base-200: oklch(20.219% 0.004 308.229);
    --color-base-300: oklch(23.219% 0.004 308.229);
    --color-base-content: oklch(75.687% 0.123 76.89);
    --color-primary: oklch(100% 0 0);
    --color-primary-content: oklch(20% 0 0);
    --color-secondary: oklch(27.581% 0.064 261.069);
    --color-secondary-content: oklch(85.516% 0.012 261.069);
    --color-accent: oklch(36.674% 0.051 338.825);
    --color-accent-content: oklch(87.334% 0.01 338.825);
    --color-neutral: oklch(24.27% 0.057 59.825);
    --color-neutral-content: oklch(93.203% 0.089 90.861);
    --color-info: oklch(79.061% 0.121 237.133);
    --color-info-content: oklch(15.812% 0.024 237.133);
    --color-success: oklch(78.119% 0.192 132.154);
    --color-success-content: oklch(15.623% 0.038 132.154);
    --color-warning: oklch(86.127% 0.136 102.891);
    --color-warning-content: oklch(17.225% 0.027 102.891);
    --color-error: oklch(71.753% 0.176 22.568);
    --color-error-content: oklch(14.35% 0.035 22.568);
    --radius-selector: 1rem;
    --radius-field: 0.5rem;
    --radius-box: 1rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 1;
    --noise: 0;
  }
}
@layer base {
  :root:has(input.theme-controller[value=dracula]:checked),[data-theme=dracula] {
    color-scheme: dark;
    --color-base-100: oklch(28.822% 0.022 277.508);
    --color-base-200: oklch(26.805% 0.02 277.508);
    --color-base-300: oklch(24.787% 0.019 277.508);
    --color-base-content: oklch(97.747% 0.007 106.545);
    --color-primary: oklch(75.461% 0.183 346.812);
    --color-primary-content: oklch(15.092% 0.036 346.812);
    --color-secondary: oklch(74.202% 0.148 301.883);
    --color-secondary-content: oklch(14.84% 0.029 301.883);
    --color-accent: oklch(83.392% 0.124 66.558);
    --color-accent-content: oklch(16.678% 0.024 66.558);
    --color-neutral: oklch(39.445% 0.032 275.524);
    --color-neutral-content: oklch(87.889% 0.006 275.524);
    --color-info: oklch(88.263% 0.093 212.846);
    --color-info-content: oklch(17.652% 0.018 212.846);
    --color-success: oklch(87.099% 0.219 148.024);
    --color-success-content: oklch(17.419% 0.043 148.024);
    --color-warning: oklch(95.533% 0.134 112.757);
    --color-warning-content: oklch(19.106% 0.026 112.757);
    --color-error: oklch(68.22% 0.206 24.43);
    --color-error-content: oklch(13.644% 0.041 24.43);
    --radius-selector: 1rem;
    --radius-field: 0.5rem;
    --radius-box: 1rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 0;
    --noise: 0;
  }
}
@layer base {
  :root:has(input.theme-controller[value=cmyk]:checked),[data-theme=cmyk] {
    color-scheme: light;
    --color-base-100: oklch(100% 0 0);
    --color-base-200: oklch(95% 0 0);
    --color-base-300: oklch(90% 0 0);
    --color-base-content: oklch(20% 0 0);
    --color-primary: oklch(71.772% 0.133 239.443);
    --color-primary-content: oklch(14.354% 0.026 239.443);
    --color-secondary: oklch(64.476% 0.202 359.339);
    --color-secondary-content: oklch(12.895% 0.04 359.339);
    --color-accent: oklch(94.228% 0.189 105.306);
    --color-accent-content: oklch(18.845% 0.037 105.306);
    --color-neutral: oklch(21.778% 0 0);
    --color-neutral-content: oklch(84.355% 0 0);
    --color-info: oklch(68.475% 0.094 217.284);
    --color-info-content: oklch(13.695% 0.018 217.284);
    --color-success: oklch(46.949% 0.162 321.406);
    --color-success-content: oklch(89.389% 0.032 321.406);
    --color-warning: oklch(71.236% 0.159 52.023);
    --color-warning-content: oklch(14.247% 0.031 52.023);
    --color-error: oklch(62.013% 0.208 28.717);
    --color-error-content: oklch(12.402% 0.041 28.717);
    --radius-selector: 1rem;
    --radius-field: 0.5rem;
    --radius-box: 1rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 0;
    --noise: 0;
  }
}
@layer base {
  :root:has(input.theme-controller[value=autumn]:checked),[data-theme=autumn] {
    color-scheme: light;
    --color-base-100: oklch(95.814% 0 0);
    --color-base-200: oklch(89.107% 0 0);
    --color-base-300: oklch(82.4% 0 0);
    --color-base-content: oklch(19.162% 0 0);
    --color-primary: oklch(40.723% 0.161 17.53);
    --color-primary-content: oklch(88.144% 0.032 17.53);
    --color-secondary: oklch(61.676% 0.169 23.865);
    --color-secondary-content: oklch(12.335% 0.033 23.865);
    --color-accent: oklch(73.425% 0.094 60.729);
    --color-accent-content: oklch(14.685% 0.018 60.729);
    --color-neutral: oklch(54.367% 0.037 51.902);
    --color-neutral-content: oklch(90.873% 0.007 51.902);
    --color-info: oklch(69.224% 0.097 207.284);
    --color-info-content: oklch(13.844% 0.019 207.284);
    --color-success: oklch(60.995% 0.08 174.616);
    --color-success-content: oklch(12.199% 0.016 174.616);
    --color-warning: oklch(70.081% 0.164 56.844);
    --color-warning-content: oklch(14.016% 0.032 56.844);
    --color-error: oklch(53.07% 0.241 24.16);
    --color-error-content: oklch(90.614% 0.048 24.16);
    --radius-selector: 1rem;
    --radius-field: 0.5rem;
    --radius-box: 1rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 1;
    --noise: 0;
  }
}
@layer base {
  :root:has(input.theme-controller[value=business]:checked),[data-theme=business] {
    color-scheme: dark;
    --color-base-100: oklch(24.353% 0 0);
    --color-base-200: oklch(22.648% 0 0);
    --color-base-300: oklch(20.944% 0 0);
    --color-base-content: oklch(84.87% 0 0);
    --color-primary: oklch(41.703% 0.099 251.473);
    --color-primary-content: oklch(88.34% 0.019 251.473);
    --color-secondary: oklch(64.092% 0.027 229.389);
    --color-secondary-content: oklch(12.818% 0.005 229.389);
    --color-accent: oklch(67.271% 0.167 35.791);
    --color-accent-content: oklch(13.454% 0.033 35.791);
    --color-neutral: oklch(27.441% 0.013 253.041);
    --color-neutral-content: oklch(85.488% 0.002 253.041);
    --color-info: oklch(62.616% 0.143 240.033);
    --color-info-content: oklch(12.523% 0.028 240.033);
    --color-success: oklch(70.226% 0.094 156.596);
    --color-success-content: oklch(14.045% 0.018 156.596);
    --color-warning: oklch(77.482% 0.115 81.519);
    --color-warning-content: oklch(15.496% 0.023 81.519);
    --color-error: oklch(51.61% 0.146 29.674);
    --color-error-content: oklch(90.322% 0.029 29.674);
    --radius-selector: 0rem;
    --radius-field: 0.25rem;
    --radius-box: 0.25rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 0;
    --noise: 0;
  }
}
@layer base {
  :root:has(input.theme-controller[value=acid]:checked),[data-theme=acid] {
    color-scheme: light;
    --color-base-100: oklch(98% 0 0);
    --color-base-200: oklch(95% 0 0);
    --color-base-300: oklch(91% 0 0);
    --color-base-content: oklch(0% 0 0);
    --color-primary: oklch(71.9% 0.357 330.759);
    --color-primary-content: oklch(14.38% 0.071 330.759);
    --color-secondary: oklch(73.37% 0.224 48.25);
    --color-secondary-content: oklch(14.674% 0.044 48.25);
    --color-accent: oklch(92.78% 0.264 122.962);
    --color-accent-content: oklch(18.556% 0.052 122.962);
    --color-neutral: oklch(21.31% 0.128 278.68);
    --color-neutral-content: oklch(84.262% 0.025 278.68);
    --color-info: oklch(60.72% 0.227 252.05);
    --color-info-content: oklch(12.144% 0.045 252.05);
    --color-success: oklch(85.72% 0.266 158.53);
    --color-success-content: oklch(17.144% 0.053 158.53);
    --color-warning: oklch(91.01% 0.212 100.5);
    --color-warning-content: oklch(18.202% 0.042 100.5);
    --color-error: oklch(64.84% 0.293 29.349);
    --color-error-content: oklch(12.968% 0.058 29.349);
    --radius-selector: 1rem;
    --radius-field: 1rem;
    --radius-box: 1rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 1;
    --noise: 0;
  }
}
@layer base {
  :root:has(input.theme-controller[value=lemonade]:checked),[data-theme=lemonade] {
    color-scheme: light;
    --color-base-100: oklch(98.71% 0.02 123.72);
    --color-base-200: oklch(91.8% 0.018 123.72);
    --color-base-300: oklch(84.89% 0.017 123.72);
    --color-base-content: oklch(19.742% 0.004 123.72);
    --color-primary: oklch(58.92% 0.199 134.6);
    --color-primary-content: oklch(11.784% 0.039 134.6);
    --color-secondary: oklch(77.75% 0.196 111.09);
    --color-secondary-content: oklch(15.55% 0.039 111.09);
    --color-accent: oklch(85.39% 0.201 100.73);
    --color-accent-content: oklch(17.078% 0.04 100.73);
    --color-neutral: oklch(30.98% 0.075 108.6);
    --color-neutral-content: oklch(86.196% 0.015 108.6);
    --color-info: oklch(86.19% 0.047 224.14);
    --color-info-content: oklch(17.238% 0.009 224.14);
    --color-success: oklch(86.19% 0.047 157.85);
    --color-success-content: oklch(17.238% 0.009 157.85);
    --color-warning: oklch(86.19% 0.047 102.15);
    --color-warning-content: oklch(17.238% 0.009 102.15);
    --color-error: oklch(86.19% 0.047 25.85);
    --color-error-content: oklch(17.238% 0.009 25.85);
    --radius-selector: 1rem;
    --radius-field: 0.5rem;
    --radius-box: 1rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 0;
    --noise: 0;
  }
}
@layer base {
  :root:has(input.theme-controller[value=night]:checked),[data-theme=night] {
    color-scheme: dark;
    --color-base-100: oklch(20.768% 0.039 265.754);
    --color-base-200: oklch(19.314% 0.037 265.754);
    --color-base-300: oklch(17.86% 0.034 265.754);
    --color-base-content: oklch(84.153% 0.007 265.754);
    --color-primary: oklch(75.351% 0.138 232.661);
    --color-primary-content: oklch(15.07% 0.027 232.661);
    --color-secondary: oklch(68.011% 0.158 276.934);
    --color-secondary-content: oklch(13.602% 0.031 276.934);
    --color-accent: oklch(72.36% 0.176 350.048);
    --color-accent-content: oklch(14.472% 0.035 350.048);
    --color-neutral: oklch(27.949% 0.036 260.03);
    --color-neutral-content: oklch(85.589% 0.007 260.03);
    --color-info: oklch(68.455% 0.148 237.251);
    --color-info-content: oklch(0% 0 0);
    --color-success: oklch(78.452% 0.132 181.911);
    --color-success-content: oklch(15.69% 0.026 181.911);
    --color-warning: oklch(83.242% 0.139 82.95);
    --color-warning-content: oklch(16.648% 0.027 82.95);
    --color-error: oklch(71.785% 0.17 13.118);
    --color-error-content: oklch(14.357% 0.034 13.118);
    --radius-selector: 1rem;
    --radius-field: 0.5rem;
    --radius-box: 1rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 0;
    --noise: 0;
  }
}
@layer base {
  :root:has(input.theme-controller[value=coffee]:checked),[data-theme=coffee] {
    color-scheme: dark;
    --color-base-100: oklch(24% 0.023 329.708);
    --color-base-200: oklch(21% 0.021 329.708);
    --color-base-300: oklch(16% 0.019 329.708);
    --color-base-content: oklch(72.354% 0.092 79.129);
    --color-primary: oklch(71.996% 0.123 62.756);
    --color-primary-content: oklch(14.399% 0.024 62.756);
    --color-secondary: oklch(34.465% 0.029 199.194);
    --color-secondary-content: oklch(86.893% 0.005 199.194);
    --color-accent: oklch(42.621% 0.074 224.389);
    --color-accent-content: oklch(88.524% 0.014 224.389);
    --color-neutral: oklch(16.51% 0.015 326.261);
    --color-neutral-content: oklch(83.302% 0.003 326.261);
    --color-info: oklch(79.49% 0.063 184.558);
    --color-info-content: oklch(15.898% 0.012 184.558);
    --color-success: oklch(74.722% 0.072 131.116);
    --color-success-content: oklch(14.944% 0.014 131.116);
    --color-warning: oklch(88.15% 0.14 87.722);
    --color-warning-content: oklch(17.63% 0.028 87.722);
    --color-error: oklch(77.318% 0.128 31.871);
    --color-error-content: oklch(15.463% 0.025 31.871);
    --radius-selector: 1rem;
    --radius-field: 0.5rem;
    --radius-box: 1rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 0;
    --noise: 0;
  }
}
@layer base {
  :root:has(input.theme-controller[value=winter]:checked),[data-theme=winter] {
    color-scheme: light;
    --color-base-100: oklch(100% 0 0);
    --color-base-200: oklch(97.466% 0.011 259.822);
    --color-base-300: oklch(93.268% 0.016 262.751);
    --color-base-content: oklch(41.886% 0.053 255.824);
    --color-primary: oklch(56.86% 0.255 257.57);
    --color-primary-content: oklch(91.372% 0.051 257.57);
    --color-secondary: oklch(42.551% 0.161 282.339);
    --color-secondary-content: oklch(88.51% 0.032 282.339);
    --color-accent: oklch(59.939% 0.191 335.171);
    --color-accent-content: oklch(11.988% 0.038 335.171);
    --color-neutral: oklch(19.616% 0.063 257.651);
    --color-neutral-content: oklch(83.923% 0.012 257.651);
    --color-info: oklch(88.127% 0.085 214.515);
    --color-info-content: oklch(17.625% 0.017 214.515);
    --color-success: oklch(80.494% 0.077 197.823);
    --color-success-content: oklch(16.098% 0.015 197.823);
    --color-warning: oklch(89.172% 0.045 71.47);
    --color-warning-content: oklch(17.834% 0.009 71.47);
    --color-error: oklch(73.092% 0.11 20.076);
    --color-error-content: oklch(14.618% 0.022 20.076);
    --radius-selector: 1rem;
    --radius-field: 0.5rem;
    --radius-box: 1rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 0;
    --noise: 0;
  }
}
@layer base {
  :root:has(input.theme-controller[value=dim]:checked),[data-theme=dim] {
    color-scheme: dark;
    --color-base-100: oklch(30.857% 0.023 264.149);
    --color-base-200: oklch(28.036% 0.019 264.182);
    --color-base-300: oklch(26.346% 0.018 262.177);
    --color-base-content: oklch(82.901% 0.031 222.959);
    --color-primary: oklch(86.133% 0.141 139.549);
    --color-primary-content: oklch(17.226% 0.028 139.549);
    --color-secondary: oklch(73.375% 0.165 35.353);
    --color-secondary-content: oklch(14.675% 0.033 35.353);
    --color-accent: oklch(74.229% 0.133 311.379);
    --color-accent-content: oklch(14.845% 0.026 311.379);
    --color-neutral: oklch(24.731% 0.02 264.094);
    --color-neutral-content: oklch(82.901% 0.031 222.959);
    --color-info: oklch(86.078% 0.142 206.182);
    --color-info-content: oklch(17.215% 0.028 206.182);
    --color-success: oklch(86.171% 0.142 166.534);
    --color-success-content: oklch(17.234% 0.028 166.534);
    --color-warning: oklch(86.163% 0.142 94.818);
    --color-warning-content: oklch(17.232% 0.028 94.818);
    --color-error: oklch(82.418% 0.099 33.756);
    --color-error-content: oklch(16.483% 0.019 33.756);
    --radius-selector: 1rem;
    --radius-field: 0.5rem;
    --radius-box: 1rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 0;
    --noise: 0;
  }
}
@layer base {
  :root:has(input.theme-controller[value=nord]:checked),[data-theme=nord] {
    color-scheme: light;
    --color-base-100: oklch(95.127% 0.007 260.731);
    --color-base-200: oklch(93.299% 0.01 261.788);
    --color-base-300: oklch(89.925% 0.016 262.749);
    --color-base-content: oklch(32.437% 0.022 264.182);
    --color-primary: oklch(59.435% 0.077 254.027);
    --color-primary-content: oklch(11.887% 0.015 254.027);
    --color-secondary: oklch(69.651% 0.059 248.687);
    --color-secondary-content: oklch(13.93% 0.011 248.687);
    --color-accent: oklch(77.464% 0.062 217.469);
    --color-accent-content: oklch(15.492% 0.012 217.469);
    --color-neutral: oklch(45.229% 0.035 264.131);
    --color-neutral-content: oklch(89.925% 0.016 262.749);
    --color-info: oklch(69.207% 0.062 332.664);
    --color-info-content: oklch(13.841% 0.012 332.664);
    --color-success: oklch(76.827% 0.074 131.063);
    --color-success-content: oklch(15.365% 0.014 131.063);
    --color-warning: oklch(85.486% 0.089 84.093);
    --color-warning-content: oklch(17.097% 0.017 84.093);
    --color-error: oklch(60.61% 0.12 15.341);
    --color-error-content: oklch(12.122% 0.024 15.341);
    --radius-selector: 1rem;
    --radius-field: 0.25rem;
    --radius-box: 0.5rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 0;
    --noise: 0;
  }
}
@layer base {
  :root:has(input.theme-controller[value=sunset]:checked),[data-theme=sunset] {
    color-scheme: dark;
    --color-base-100: oklch(22% 0.019 237.69);
    --color-base-200: oklch(20% 0.019 237.69);
    --color-base-300: oklch(18% 0.019 237.69);
    --color-base-content: oklch(77.383% 0.043 245.096);
    --color-primary: oklch(74.703% 0.158 39.947);
    --color-primary-content: oklch(14.94% 0.031 39.947);
    --color-secondary: oklch(72.537% 0.177 2.72);
    --color-secondary-content: oklch(14.507% 0.035 2.72);
    --color-accent: oklch(71.294% 0.166 299.844);
    --color-accent-content: oklch(14.258% 0.033 299.844);
    --color-neutral: oklch(26% 0.019 237.69);
    --color-neutral-content: oklch(70% 0.019 237.69);
    --color-info: oklch(85.559% 0.085 206.015);
    --color-info-content: oklch(17.111% 0.017 206.015);
    --color-success: oklch(85.56% 0.085 144.778);
    --color-success-content: oklch(17.112% 0.017 144.778);
    --color-warning: oklch(85.569% 0.084 74.427);
    --color-warning-content: oklch(17.113% 0.016 74.427);
    --color-error: oklch(85.511% 0.078 16.886);
    --color-error-content: oklch(17.102% 0.015 16.886);
    --radius-selector: 1rem;
    --radius-field: 0.5rem;
    --radius-box: 1rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 0;
    --noise: 0;
  }
}
@layer base {
  :root:has(input.theme-controller[value=caramellatte]:checked),[data-theme=caramellatte] {
    color-scheme: light;
    --color-base-100: oklch(98% 0.016 73.684);
    --color-base-200: oklch(95% 0.038 75.164);
    --color-base-300: oklch(90% 0.076 70.697);
    --color-base-content: oklch(40% 0.123 38.172);
    --color-primary: oklch(0% 0 0);
    --color-primary-content: oklch(100% 0 0);
    --color-secondary: oklch(22.45% 0.075 37.85);
    --color-secondary-content: oklch(90% 0.076 70.697);
    --color-accent: oklch(46.44% 0.111 37.85);
    --color-accent-content: oklch(90% 0.076 70.697);
    --color-neutral: oklch(55% 0.195 38.402);
    --color-neutral-content: oklch(98% 0.016 73.684);
    --color-info: oklch(42% 0.199 265.638);
    --color-info-content: oklch(90% 0.076 70.697);
    --color-success: oklch(43% 0.095 166.913);
    --color-success-content: oklch(90% 0.076 70.697);
    --color-warning: oklch(82% 0.189 84.429);
    --color-warning-content: oklch(41% 0.112 45.904);
    --color-error: oklch(70% 0.191 22.216);
    --color-error-content: oklch(39% 0.141 25.723);
    --radius-selector: 2rem;
    --radius-field: 0.5rem;
    --radius-box: 1rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 2px;
    --depth: 1;
    --noise: 1;
  }
}
@layer base {
  :root:has(input.theme-controller[value=abyss]:checked),[data-theme=abyss] {
    color-scheme: dark;
    --color-base-100: oklch(20% 0.08 209);
    --color-base-200: oklch(15% 0.08 209);
    --color-base-300: oklch(10% 0.08 209);
    --color-base-content: oklch(90% 0.076 70.697);
    --color-primary: oklch(92% 0.2653 125);
    --color-primary-content: oklch(50% 0.2653 125);
    --color-secondary: oklch(83.27% 0.0764 298.3);
    --color-secondary-content: oklch(43.27% 0.0764 298.3);
    --color-accent: oklch(43% 0 0);
    --color-accent-content: oklch(98% 0 0);
    --color-neutral: oklch(30% 0.08 209);
    --color-neutral-content: oklch(90% 0.076 70.697);
    --color-info: oklch(74% 0.16 232.661);
    --color-info-content: oklch(29% 0.066 243.157);
    --color-success: oklch(79% 0.209 151.711);
    --color-success-content: oklch(26% 0.065 152.934);
    --color-warning: oklch(84.8% 0.1962 84.62);
    --color-warning-content: oklch(44.8% 0.1962 84.62);
    --color-error: oklch(65% 0.1985 24.22);
    --color-error-content: oklch(27% 0.1985 24.22);
    --radius-selector: 2rem;
    --radius-field: 0.25rem;
    --radius-box: 0.5rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 1;
    --noise: 0;
  }
}
@layer base {
  :root:has(input.theme-controller[value=silk]:checked),[data-theme=silk] {
    color-scheme: light;
    --color-base-100: oklch(97% 0.0035 67.78);
    --color-base-200: oklch(95% 0.0081 61.42);
    --color-base-300: oklch(90% 0.0081 61.42);
    --color-base-content: oklch(40% 0.0081 61.42);
    --color-primary: oklch(23.27% 0.0249 284.3);
    --color-primary-content: oklch(94.22% 0.2505 117.44);
    --color-secondary: oklch(23.27% 0.0249 284.3);
    --color-secondary-content: oklch(73.92% 0.2135 50.94);
    --color-accent: oklch(23.27% 0.0249 284.3);
    --color-accent-content: oklch(88.92% 0.2061 189.9);
    --color-neutral: oklch(20% 0 0);
    --color-neutral-content: oklch(80% 0.0081 61.42);
    --color-info: oklch(80.39% 0.1148 241.68);
    --color-info-content: oklch(30.39% 0.1148 241.68);
    --color-success: oklch(83.92% 0.0901 136.87);
    --color-success-content: oklch(23.92% 0.0901 136.87);
    --color-warning: oklch(83.92% 0.1085 80);
    --color-warning-content: oklch(43.92% 0.1085 80);
    --color-error: oklch(75.1% 0.1814 22.37);
    --color-error-content: oklch(35.1% 0.1814 22.37);
    --radius-selector: 2rem;
    --radius-field: 0.5rem;
    --radius-box: 1rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 2px;
    --depth: 1;
    --noise: 0;
  }
}
@layer base {
  :where( :root:has( .modal-open, .modal[open], .modal:target, .modal-toggle:checked, .drawer:not(.drawer-open) > .drawer-toggle:checked ) ) {
    scrollbar-gutter: stable;
    background-image: linear-gradient(var(--color-base-100), var(--color-base-100));
    --root-bg: var(--color-base-100);
    @supports (color: color-mix(in lab, red, red)) {
      --root-bg: color-mix(in srgb, var(--color-base-100), oklch(0% 0 0) 40%);
    }
  }
  :where(.modal[open], .modal-open, .modal-toggle:checked + .modal):not(.modal-start, .modal-end) {
    scrollbar-gutter: stable;
  }
}
@layer base {
  @property --radialprogress {
    syntax: "<percentage>";
    inherits: true;
    initial-value: 0%;
  }
}
@layer base {
  :root {
    --fx-noise: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 200 200'%3E%3Cfilter id='a'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='1.34' numOctaves='4' stitchTiles='stitch'%3E%3C/feTurbulence%3E%3C/filter%3E%3Crect width='200' height='200' filter='url(%23a)' opacity='0.2'%3E%3C/rect%3E%3C/svg%3E");
  }
}
@layer base {
  :root, [data-theme] {
    background-color: var(--root-bg, var(--color-base-100));
    color: var(--color-base-content);
  }
}
@layer base {
  :root {
    scrollbar-color: currentColor #0000;
    @supports (color: color-mix(in lab, red, red)) {
      scrollbar-color: color-mix(in oklch, currentColor 35%, #0000) #0000;
    }
  }
}
@layer base {
  :root:has( .modal-open, .modal[open], .modal:target, .modal-toggle:checked, .drawer:not([class*="drawer-open"]) > .drawer-toggle:checked ) {
    overflow: hidden;
  }
}
@keyframes dropdown {
  0% {
    opacity: 0;
  }
}
@keyframes radio {
  0% {
    padding: 5px;
  }
  50% {
    padding: 3px;
  }
}
@keyframes toast {
  0% {
    scale: 0.9;
    opacity: 0;
  }
  100% {
    scale: 1;
    opacity: 1;
  }
}
@keyframes rating {
  0%, 40% {
    scale: 1.1;
    filter: brightness(1.05) contrast(1.05);
  }
}
@keyframes skeleton {
  0% {
    background-position: 150%;
  }
  100% {
    background-position: -50%;
  }
}
@keyframes progress {
  50% {
    background-position-x: -115%;
  }
}
@layer base {
  :where(:root),:root:has(input.theme-controller[value=blueLight]:checked),[data-theme="blueLight"] {
    color-scheme: light;
    --color-base-100: #F7F8FA;
    --color-base-200: #EEF1F4;
    --color-base-300: #E2E7ED;
    --color-base-content: #1A1D21;
    --color-primary: #133A5E;
    --color-primary-content: #FFFFFF;
    --color-secondary: #5A6B7D;
    --color-secondary-content: #FFFFFF;
    --color-accent: #C8A85A;
    --color-accent-content: #1A1A1A;
    --color-neutral: #2A2F36;
    --color-neutral-content: #FFFFFF;
    --color-info: #2A6AA9;
    --color-info-content: oklch(96% 0.059 95.617);
    --color-success: #2E6F4E;
    --color-success-content: oklch(96% 0.059 95.617);
    --color-warning: #9C6B1C;
    --color-warning-content: oklch(96% 0.059 95.617);
    --color-error: #8E3B3B;
    --color-error-content: oklch(96% 0.059 95.617);
    --radius-selector: 0.5rem;
    --radius-field: 0.5rem;
    --radius-box: 0.5rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 1;
    --noise: 0;
  }
}
@layer base {
  @media (prefers-color-scheme: dark) {
    :root:not([data-theme]) {
      color-scheme: dark;
      --color-base-100: #0E1216;
      --color-base-200: #151A21;
      --color-base-300: #1E252E;
      --color-base-content: #E6E9EE;
      --color-primary: #2A6AA9;
      --color-primary-content: #FFFFFF;
      --color-secondary: #7A8A9B;
      --color-secondary-content: #0E1216;
      --color-accent: #D0B36A;
      --color-accent-content: #0E1216;
      --color-neutral: #2B3138;
      --color-neutral-content: #E6E9EE;
      --color-info: #4A8DC0;
      --color-info-content: #0E1216;
      --color-success: #4A8F73;
      --color-success-content: #0E1216;
      --color-warning: #B4893B;
      --color-warning-content: #0E1216;
      --color-error: #A75A5A;
      --color-error-content: #0E1216;
      --radius-selector: 0.5rem;
      --radius-field: 1rem;
      --radius-box: 0.5rem;
      --size-selector: 0.25rem;
      --size-field: 0.25rem;
      --border: 1px;
      --depth: 0;
      --noise: 0;
    }
  }
}
@layer base {
  :root:has(input.theme-controller[value=blueDark]:checked),[data-theme="blueDark"] {
    color-scheme: dark;
    --color-base-100: #0E1216;
    --color-base-200: #151A21;
    --color-base-300: #1E252E;
    --color-base-content: #E6E9EE;
    --color-primary: #2A6AA9;
    --color-primary-content: #FFFFFF;
    --color-secondary: #7A8A9B;
    --color-secondary-content: #0E1216;
    --color-accent: #D0B36A;
    --color-accent-content: #0E1216;
    --color-neutral: #2B3138;
    --color-neutral-content: #E6E9EE;
    --color-info: #4A8DC0;
    --color-info-content: #0E1216;
    --color-success: #4A8F73;
    --color-success-content: #0E1216;
    --color-warning: #B4893B;
    --color-warning-content: #0E1216;
    --color-error: #A75A5A;
    --color-error-content: #0E1216;
    --radius-selector: 0.5rem;
    --radius-field: 1rem;
    --radius-box: 0.5rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 0;
    --noise: 0;
  }
}
@layer base {
  :root:has(input.theme-controller[value=merlotLight]:checked),[data-theme="merlotLight"] {
    color-scheme: light;
    --color-base-100: #F9F5F0;
    --color-base-200: #EFE8DF;
    --color-base-300: #E3D9CD;
    --color-base-content: #1A1D21;
    --color-primary: #8E3B3B;
    --color-primary-content: #FFFFFF;
    --color-secondary: #5A6B7D;
    --color-secondary-content: #FFFFFF;
    --color-accent: #CCB06A;
    --color-accent-content: #1A1A1A;
    --color-neutral: #2A2F36;
    --color-neutral-content: #FFFFFF;
    --color-info: #2A6AA9;
    --color-info-content: oklch(96% 0.059 95.617);
    --color-success: #2E6F4E;
    --color-success-content: oklch(96% 0.059 95.617);
    --color-warning: #9C6B1C;
    --color-warning-content: oklch(96% 0.059 95.617);
    --color-error: #6C2A2A;
    --color-error-content: oklch(96% 0.059 95.617);
    --radius-selector: 0.5rem;
    --radius-field: 1rem;
    --radius-box: 0.5rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 0;
    --noise: 0;
  }
}
@layer base {
  @media (prefers-color-scheme: dark) {
    :root:not([data-theme]) {
      color-scheme: dark;
      --color-base-100: #121013;
      --color-base-200: #1A171B;
      --color-base-300: #232026;
      --color-base-content: #EAE7E5;
      --color-primary: #8E3B3B;
      --color-primary-content: #FFFFFF;
      --color-secondary: #7E8892;
      --color-secondary-content: #0E1216;
      --color-accent: #CCB06A;
      --color-accent-content: #0E1216;
      --color-neutral: #2B262C;
      --color-neutral-content: #EAE7E5;
      --color-info: #4A8DC0;
      --color-info-content: #0E1216;
      --color-success: #4A8F73;
      --color-success-content: #0E1216;
      --color-warning: #B4893B;
      --color-warning-content: #0E1216;
      --color-error: #B46868;
      --color-error-content: #0E1216;
      --radius-selector: 0.5rem;
      --radius-field: 1rem;
      --radius-box: 0.5rem;
      --size-selector: 0.25rem;
      --size-field: 0.25rem;
      --border: 1px;
      --depth: 0;
      --noise: 0;
    }
  }
}
@layer base {
  :root:has(input.theme-controller[value=merlotDark]:checked),[data-theme="merlotDark"] {
    color-scheme: dark;
    --color-base-100: #121013;
    --color-base-200: #1A171B;
    --color-base-300: #232026;
    --color-base-content: #EAE7E5;
    --color-primary: #8E3B3B;
    --color-primary-content: #FFFFFF;
    --color-secondary: #7E8892;
    --color-secondary-content: #0E1216;
    --color-accent: #CCB06A;
    --color-accent-content: #0E1216;
    --color-neutral: #2B262C;
    --color-neutral-content: #EAE7E5;
    --color-info: #4A8DC0;
    --color-info-content: #0E1216;
    --color-success: #4A8F73;
    --color-success-content: #0E1216;
    --color-warning: #B4893B;
    --color-warning-content: #0E1216;
    --color-error: #B46868;
    --color-error-content: #0E1216;
    --radius-selector: 0.5rem;
    --radius-field: 1rem;
    --radius-box: 0.5rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 0;
    --noise: 0;
  }
}
@property --tw-rotate-x {
  syntax: "*";
  inherits: false;
}
@property --tw-rotate-y {
  syntax: "*";
  inherits: false;
}
@property --tw-rotate-z {
  syntax: "*";
  inherits: false;
}
@property --tw-skew-x {
  syntax: "*";
  inherits: false;
}
@property --tw-skew-y {
  syntax: "*";
  inherits: false;
}
@property --tw-space-y-reverse {
  syntax: "*";
  inherits: false;
  initial-value: 0;
}
@property --tw-space-x-reverse {
  syntax: "*";
  inherits: false;
  initial-value: 0;
}
@property --tw-divide-y-reverse {
  syntax: "*";
  inherits: false;
  initial-value: 0;
}
@property --tw-border-style {
  syntax: "*";
  inherits: false;
  initial-value: solid;
}
@property --tw-font-weight {
  syntax: "*";
  inherits: false;
}
@property --tw-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-shadow-color {
  syntax: "*";
  inherits: false;
}
@property --tw-shadow-alpha {
  syntax: "<percentage>";
  inherits: false;
  initial-value: 100%;
}
@property --tw-inset-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-inset-shadow-color {
  syntax: "*";
  inherits: false;
}
@property --tw-inset-shadow-alpha {
  syntax: "<percentage>";
  inherits: false;
  initial-value: 100%;
}
@property --tw-ring-color {
  syntax: "*";
  inherits: false;
}
@property --tw-ring-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-inset-ring-color {
  syntax: "*";
  inherits: false;
}
@property --tw-inset-ring-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-ring-inset {
  syntax: "*";
  inherits: false;
}
@property --tw-ring-offset-width {
  syntax: "<length>";
  inherits: false;
  initial-value: 0px;
}
@property --tw-ring-offset-color {
  syntax: "*";
  inherits: false;
  initial-value: #fff;
}
@property --tw-ring-offset-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-outline-style {
  syntax: "*";
  inherits: false;
  initial-value: solid;
}
@property --tw-blur {
  syntax: "*";
  inherits: false;
}
@property --tw-brightness {
  syntax: "*";
  inherits: false;
}
@property --tw-contrast {
  syntax: "*";
  inherits: false;
}
@property --tw-grayscale {
  syntax: "*";
  inherits: false;
}
@property --tw-hue-rotate {
  syntax: "*";
  inherits: false;
}
@property --tw-invert {
  syntax: "*";
  inherits: false;
}
@property --tw-opacity {
  syntax: "*";
  inherits: false;
}
@property --tw-saturate {
  syntax: "*";
  inherits: false;
}
@property --tw-sepia {
  syntax: "*";
  inherits: false;
}
@property --tw-drop-shadow {
  syntax: "*";
  inherits: false;
}
@property --tw-drop-shadow-color {
  syntax: "*";
  inherits: false;
}
@property --tw-drop-shadow-alpha {
  syntax: "<percentage>";
  inherits: false;
  initial-value: 100%;
}
@property --tw-drop-shadow-size {
  syntax: "*";
  inherits: false;
}
@property --tw-ease {
  syntax: "*";
  inherits: false;
}
@layer properties {
  @supports ((-webkit-hyphens: none) and (not (margin-trim: inline))) or ((-moz-orient: inline) and (not (color:rgb(from red r g b)))) {
    *, ::before, ::after, ::backdrop {
      --tw-rotate-x: initial;
      --tw-rotate-y: initial;
      --tw-rotate-z: initial;
      --tw-skew-x: initial;
      --tw-skew-y: initial;
      --tw-space-y-reverse: 0;
      --tw-space-x-reverse: 0;
      --tw-divide-y-reverse: 0;
      --tw-border-style: solid;
      --tw-font-weight: initial;
      --tw-shadow: 0 0 #0000;
      --tw-shadow-color: initial;
      --tw-shadow-alpha: 100%;
      --tw-inset-shadow: 0 0 #0000;
      --tw-inset-shadow-color: initial;
      --tw-inset-shadow-alpha: 100%;
      --tw-ring-color: initial;
      --tw-ring-shadow: 0 0 #0000;
      --tw-inset-ring-color: initial;
      --tw-inset-ring-shadow: 0 0 #0000;
      --tw-ring-inset: initial;
      --tw-ring-offset-width: 0px;
      --tw-ring-offset-color: #fff;
      --tw-ring-offset-shadow: 0 0 #0000;
      --tw-outline-style: solid;
      --tw-blur: initial;
      --tw-brightness: initial;
      --tw-contrast: initial;
      --tw-grayscale: initial;
      --tw-hue-rotate: initial;
      --tw-invert: initial;
      --tw-opacity: initial;
      --tw-saturate: initial;
      --tw-sepia: initial;
      --tw-drop-shadow: initial;
      --tw-drop-shadow-color: initial;
      --tw-drop-shadow-alpha: 100%;
      --tw-drop-shadow-size: initial;
      --tw-ease: initial;
    }
  }
}

===== END:app/assets/builds/application.css =====

===== BEGIN:app/assets/config/manifest.js =====
//= link_tree ../images
//= link_tree ../../javascript .js
//= link_tree ../../../vendor/javascript .js
===== END:app/assets/config/manifest.js =====

===== BEGIN:app/assets/stylesheets/application.tailwind.css =====
@import "tailwindcss";
@plugin "daisyui" {
  themes: all;              /* or: themes: corporate --default; */
}

/* Light theme */
@plugin "daisyui/theme" {
  name: "blueLight";
  default: true;
  prefersdark: false;
  color-scheme: "light";
  --color-base-100: #F7F8FA;
  --color-base-200: #EEF1F4;
  --color-base-300: #E2E7ED;
  --color-base-content: #1A1D21;
  --color-primary: #133A5E;
  --color-primary-content: #FFFFFF;
  --color-secondary: #5A6B7D;
  --color-secondary-content: #FFFFFF;
  --color-accent: #C8A85A;
  --color-accent-content: #1A1A1A;
  --color-neutral: #2A2F36;
  --color-neutral-content: #FFFFFF;
  --color-info: #2A6AA9;
  --color-info-content: oklch(96% 0.059 95.617);
  --color-success: #2E6F4E;
  --color-success-content: oklch(96% 0.059 95.617);
  --color-warning: #9C6B1C;
  --color-warning-content: oklch(96% 0.059 95.617);
  --color-error: #8E3B3B;
  --color-error-content: oklch(96% 0.059 95.617);
  --radius-selector: 0.5rem;
  --radius-field: 0.5rem;
  --radius-box: 0.5rem;
  --size-selector: 0.25rem;
  --size-field: 0.25rem;
  --border: 1px;
  --depth: 1;
  --noise: 0;
}

/* Dark theme */
@plugin "daisyui/theme" {
  name: "blueDark";
  default: false;
  prefersdark: true;
  color-scheme: "dark";

  /* Bases */
  --color-base-100: #0E1216;
  --color-base-200: #151A21;
  --color-base-300: #1E252E;
  --color-base-content: #E6E9EE;

  /* Brand */
  --color-primary: #2A6AA9;            /* lighter navy for dark bg */
  --color-primary-content: #FFFFFF;
  --color-secondary: #7A8A9B;          /* slate, softened */
  --color-secondary-content: #0E1216;
  --color-accent: #D0B36A;             /* muted gold */
  --color-accent-content: #0E1216;
  --color-neutral: #2B3138;
  --color-neutral-content: #E6E9EE;

  /* States (conservative) */
  --color-info: #4A8DC0;
  --color-info-content: #0E1216;
  --color-success: #4A8F73;
  --color-success-content: #0E1216;
  --color-warning: #B4893B;
  --color-warning-content: #0E1216;
  --color-error: #A75A5A;
  --color-error-content: #0E1216;

  /* Shape and depth */
  --radius-selector: 0.5rem;
  --radius-field: 1rem;
  --radius-box: 0.5rem;
  --size-selector: 0.25rem;
  --size-field: 0.25rem;
  --border: 1px;
  --depth: 0;
  --noise: 0;
}

/* BankLight Merlot */
@plugin "daisyui/theme" {
  name: "merlotLight";
  default: false;
  prefersdark: false;
  color-scheme: "light";

  --color-base-100: #F9F5F0;
  --color-base-200: #EFE8DF;
  --color-base-300: #E3D9CD;
  --color-base-content: #1A1D21;

  /* Brand */
  --color-primary: #8E3B3B;           /* merlot */
  --color-primary-content: #FFFFFF;
  --color-secondary: #5A6B7D;         /* slate */
  --color-secondary-content: #FFFFFF;
  --color-accent: #CCB06A;            /* muted gold */
  --color-accent-content: #1A1A1A;
  --color-neutral: #2A2F36;
  --color-neutral-content: #FFFFFF;

  /* States (keep conservative; separate from primary red) */
  --color-info: #2A6AA9;
  --color-info-content: oklch(96% 0.059 95.617);
  --color-success: #2E6F4E;
  --color-success-content: oklch(96% 0.059 95.617);
  --color-warning: #9C6B1C;
  --color-warning-content: oklch(96% 0.059 95.617);
  --color-error: #6C2A2A;             /* darker, distinct from primary */
  --color-error-content: oklch(96% 0.059 95.617);

  /* Shape/depth (match other themes) */
  --radius-selector: 0.5rem;
  --radius-field: 1rem;
  --radius-box: 0.5rem;
  --size-selector: 0.25rem;
  --size-field: 0.25rem;
  --border: 1px;
  --depth: 0;
  --noise: 0;
}


/* Merlot Dark */
@plugin "daisyui/theme" {
  name: "merlotDark";
  default: false;
  prefersdark: true;
  color-scheme: "dark";

  /* Warm dark bases */
  --color-base-100: #121013;  /* near-black, warm */
  --color-base-200: #1A171B;
  --color-base-300: #232026;
  --color-base-content: #EAE7E5;

  /* Brand */
  --color-primary: #8E3B3B;     /* merlot */
  --color-primary-content: #FFFFFF;
  --color-secondary: #7E8892;   /* softened slate for dark */
  --color-secondary-content: #0E1216;
  --color-accent: #CCB06A;      /* warmer gold to match bases */
  --color-accent-content: #0E1216;
  --color-neutral: #2B262C;     /* warm graphite */
  --color-neutral-content: #EAE7E5;

  /* States (conservative, distinct from primary) */
  --color-info: #4A8DC0;
  --color-info-content: #0E1216;
  --color-success: #4A8F73;
  --color-success-content: #0E1216;
  --color-warning: #B4893B;
  --color-warning-content: #0E1216;
  --color-error: #B46868;       /* deeper than primary to avoid confusion */
  --color-error-content: #0E1216;

  /* Shape/depth */
  --radius-selector: 0.5rem;
  --radius-field: 1rem;
  --radius-box: 0.5rem;
  --size-selector: 0.25rem;
  --size-field: 0.25rem;
  --border: 1px;
  --depth: 0;
  --noise: 0;
}

===== END:app/assets/stylesheets/application.tailwind.css =====

===== BEGIN:app/assets/tailwind/application.css =====
@import "tailwindcss";

@source "../../../app/views/**/*";
@source "../../../app/helpers/**/*.rb";
@source "../../../app/javascript/**/*.js";

/* your other plugins... */
@plugin "daisyui" {
  themes: all;              /* or: themes: corporate --default; */
}

===== END:app/assets/tailwind/application.css =====

===== BEGIN:app/controllers/application_controller.rb =====
class ApplicationController < ActionController::Base
  # Only allow modern browsers supporting webp images, web push, badges, import maps, CSS nesting, and CSS :has.
  allow_browser versions: :modern
end

===== END:app/controllers/application_controller.rb =====

===== BEGIN:app/controllers/concerns/single_primary.rb =====
# app/models/concerns/single_primary.rb
module SinglePrimary
  extend ActiveSupport::Concern

  included do
    before_save :enforce_single_primary
    validates :is_primary, inclusion: { in: [true, false] }
  end

  private

  def enforce_single_primary
    return unless is_primary_changed? && is_primary? && party_id.present?
    self.class.where(party_id: party_id).where.not(id: id).update_all(is_primary: false)
  end
end

===== END:app/controllers/concerns/single_primary.rb =====

===== BEGIN:app/controllers/home_controller.rb =====
class HomeController < ApplicationController
  def index
  end
end

===== END:app/controllers/home_controller.rb =====

===== BEGIN:app/controllers/party/addresses_controller.rb =====
# app/controllers/party/addresses_controller.rb
module Party
  class AddressesController < ApplicationController
    before_action :set_party
    before_action :set_address, only: %i[edit update destroy primary]
    before_action :load_ref_options, only: %i[index new edit create update]

    def index
      redirect_to party_party_path(@party.public_id, anchor: "addresses")
    end

    def new
      @address = @party.addresses.new(country_code: "US")
      render layout: false
    end

    def edit
      render layout: false
    end

    def create
      @address = @party.addresses.new(address_params)
      if @address.save
        respond_to do |f|
          f.turbo_stream { render turbo_stream: refresh_list_and_close }
          f.html { redirect_to party_party_path(@party.public_id), notice: "Address added" }
        end
      else
        render :new, status: :unprocessable_entity, layout: false
      end
    end

    def update
      if @address.update(address_params)
        respond_to do |f|
          f.turbo_stream { render turbo_stream: refresh_list_and_close }
          f.html { redirect_to party_party_path(@party.public_id), notice: "Address updated" }
        end
      else
        render :edit, status: :unprocessable_entity, layout: false
      end
    end

    def destroy
      @address.destroy
      respond_to do |f|
        f.turbo_stream { render turbo_stream: [replace_list] }
        f.html { redirect_to party_party_path(@party.public_id), notice: "Address deleted" }
      end
    end

    def primary
      ::Party::Address.transaction do
        @party.addresses.update_all(is_primary: false)
        @address.update!(is_primary: true)
      end
      respond_to do |f|
        f.turbo_stream { render turbo_stream: [replace_list] }
        f.html { redirect_back fallback_location: party_party_path(@party.public_id) }
      end
    end

    private

    def set_party
      pid = params[:party_party_id] ||
            params[:party_party_public_id] ||
            params[:party_public_id] ||
            params[:public_id] ||
            params[:party_id]
      @party = ::Party::Party.find_by!(public_id: pid)
    end

    def set_address
      @address = @party.addresses.find(params[:id])
    end

    def address_params
      params.require(:party_address).permit(
        :address_type_code, :line1, :line2, :locality, :region_code, :postal_code, :country_code, :is_primary
      )
    end

    def replace_list
      @party.reload
      turbo_stream.replace(
        view_context.dom_id(@party, :addresses_section),
        partial: "party/addresses/list",
        locals: { party: @party }
      )
    end

    def refresh_list_and_close
      [replace_list, turbo_stream.replace("comm_modal_frame", partial: "shared/close_modal")]
    end

    def load_ref_options
      @address_types = Ref::AddressType.order(:name)
      @countries     = defined?(Ref::Country) ? Ref::Country.order(:name) : []
    end
  end
end

===== END:app/controllers/party/addresses_controller.rb =====

===== BEGIN:app/controllers/party/emails_controller.rb =====
# app/controllers/party/emails_controller.rb
class Party::EmailsController < ApplicationController
  before_action :set_party
  before_action :set_email, only: [:edit, :update, :destroy, :primary]

  def new
    @email = @party.emails.new
    render layout: false
  end

  def edit
    render layout: false
  end

  def create
    @email = @party.emails.new(email_params)
    if @email.save
      respond_to do |f|
        f.turbo_stream { render turbo_stream: refresh_list_and_close }
        f.html { redirect_to party_party_path(@party.public_id), notice: "Email added" }
      end
    else
      render :new, status: :unprocessable_entity, layout: false
    end
  end

  def update
    if @email.update(email_params)
      respond_to do |f|
        f.turbo_stream { render turbo_stream: refresh_list_and_close }
        f.html { redirect_to party_party_path(@party.public_id), notice: "Email updated" }
      end
    else
      render :edit, status: :unprocessable_entity, layout: false
    end
  end

  def destroy
    @email.destroy
    respond_to do |f|
      f.turbo_stream { render turbo_stream: [replace_list] }
      f.html { redirect_to party_party_path(@party.public_id), notice: "Email deleted" }
    end
  end

  def primary
    ::Party::Email.transaction do
      @party.emails.update_all(is_primary: false)
      @email.update!(is_primary: true)
    end
    respond_to do |f|
      f.turbo_stream { render turbo_stream: [replace_list] }
      f.html { redirect_back fallback_location: party_party_path(@party.public_id) }
    end
  end

  private

  def set_party
    pid = params[:party_party_id] ||
          params[:party_party_public_id] ||
          params[:party_public_id] ||
          params[:public_id] ||
          params[:party_id]
    @party = ::Party::Party.find_by!(public_id: pid)
  end

  def set_email
    @email = @party.emails.find(params[:id])
  end

  def email_params
    params.require(:party_email).permit(:email, :email_type_code, :is_primary)
  end

  def replace_list
    turbo_stream.replace(
      view_context.dom_id(@party, :emails_list),
      partial: "party/emails/list",
      locals: { party: @party }
    )
  end

  def refresh_list_and_close
    [replace_list, turbo_stream.replace("comm_modal_frame", partial: "shared/close_modal")]
  end
end

===== END:app/controllers/party/emails_controller.rb =====

===== BEGIN:app/controllers/party/group_memberships_controller.rb =====
module Party
  class GroupMembershipsController < ApplicationController
    before_action :set_group

    def index
      render json: @group.group_memberships.includes(:party)
    end

    def create
      party = Party::Party.find_by!(public_id: membership_params[:party_public_id])
      membership = @group.group_memberships.new(party_id: party.id)

      if membership.save
        render json: membership, status: :created
      else
        render json: { errors: membership.errors.full_messages }, status: :unprocessable_entity
      end
    end

    def destroy
      membership = @group.group_memberships.find(params[:id])
      membership.destroy
      head :no_content
    end

    private

    def set_group
      @group = Group.find(params[:group_id])
    end

    def membership_params
      params.require(:membership).permit(:party_public_id)
    end
  end
end

===== END:app/controllers/party/group_memberships_controller.rb =====

===== BEGIN:app/controllers/party/links_controller.rb =====
module Party
  class LinksController < ApplicationController
    # Create or list links across parties
    def index
      links = Link.order(created_at: :desc)
      render json: links
    end

    def create
      source = Party::Party.find_by!(public_id: link_params[:source_public_id])
      target = Party::Party.find_by!(public_id: link_params[:target_public_id])

      link = Link.new(
        source_party_id: source.id,
        target_party_id: target.id,
        party_link_type_code: link_params[:party_link_type_code]
      )

      if link.save
        render json: link, status: :created
      else
        render json: { errors: link.errors.full_messages }, status: :unprocessable_entity
      end
    end

    def destroy
      link = Link.find(params[:id])
      link.destroy
      head :no_content
    end

    private

    def link_params
      params.require(:link).permit(:source_public_id, :target_public_id, :party_link_type_code)
    end
  end
end

===== END:app/controllers/party/links_controller.rb =====

===== BEGIN:app/controllers/party/organizations_controller.rb =====
module Party
  class OrganizationsController < ApplicationController
    before_action :set_party
    before_action :ensure_party_type_org!

    def show
      render json: @party.organization || {}
    end

    def create
      return render json: { error: "Organization already exists" }, status: :conflict if @party.organization
      org = @party.build_organization(org_params)
      org.save! ? render(json: org, status: :created) :
                  render(json: { errors: org.errors.full_messages }, status: :unprocessable_entity)
    end

    def update
      org = @party.organization or return render json: { error: "Not found" }, status: :not_found
      org.update(org_params) ? render(json: org) :
                               render(json: { errors: org.errors.full_messages }, status: :unprocessable_entity)
    end

    def destroy
      @party.organization&.destroy
      head :no_content
    end

    private

    def set_party
      @party = Party::Party.find_by!(public_id: params[:party_public_id])
    end

    def ensure_party_type_org!
      return if @party.party_type == "organization"
      render json: { error: "party_type must be 'organization' for this endpoint" }, status: :unprocessable_entity
    end

    def org_params
      params.require(:organization).permit(:legal_name, :organization_type_code, :formation_date)
    end
  end
end

===== END:app/controllers/party/organizations_controller.rb =====

===== BEGIN:app/controllers/party/parties_controller.rb =====
# app/controllers/party/parties_controller.rb
module Party
  class PartiesController < ApplicationController
    before_action :set_party, only: [:show, :edit, :update, :destroy, :reveal_tax_id]
    before_action :load_ref_options, only: [:new, :edit, :create, :update]
    rescue_from ActionController::ParameterMissing, with: :handle_bad_params
    helper ::Party::PartiesHelper

    # LIST + SEARCH
    def index
      ppl   = ::Party::Person.table_name         # "party_people"
      orgs  = ::Party::Organization.table_name   # "party_organizations"
      emls  = ::Party::Email.table_name          # "party_emails"
      parts = ::Party::Party.table_name          # "parties"

      name_sql = "COALESCE(#{orgs}.legal_name, CONCAT_WS(' ', #{ppl}.first_name, #{ppl}.middle_name, #{ppl}.last_name))"

      scope = ::Party::Party
        .includes(:person, :organization, :emails, :phones, :addresses)
        .joins(<<~SQL.squish)
          LEFT JOIN #{ppl}  ON #{ppl}.party_id  = #{parts}.id
          LEFT JOIN #{orgs} ON #{orgs}.party_id = #{parts}.id
          LEFT JOIN #{emls} ON #{emls}.party_id = #{parts}.id
        SQL
        .distinct

      if params[:q].present?
        q = "%#{params[:q].strip}%"
        scope = scope.where(
          "#{ppl}.first_name LIKE :q OR #{ppl}.middle_name LIKE :q OR #{ppl}.last_name LIKE :q
          OR #{orgs}.legal_name LIKE :q OR #{emls}.email LIKE :q OR #{parts}.customer_number LIKE :q",
          q: q
        )
      end

      sort = params[:sort].to_s
      dir  = %w[asc desc].include?(params[:dir]) ? params[:dir] : "asc"

      order_sql =
        case sort
        when "name"             then "#{name_sql} #{dir}"
        when "customer_number"  then "#{parts}.customer_number #{dir}"
        when "updated_at"       then "#{parts}.updated_at #{dir}"
        else                          "#{parts}.updated_at DESC" # default
        end

      @parties = scope.reorder(Arel.sql(order_sql)).to_a
    end

    def show; end

    def new
      @party = ::Party::Party.new(party_type: "person")
      @party.build_person
      @party.build_organization
      @party.addresses.build(country_code: "US") if @party.addresses.empty?
      @party.emails.build                         if @party.emails.empty?
      @party.phones.build(country_alpha2: "US")   if @party.phones.empty?
    end

    def edit
      @party.build_person       unless @party.person
      @party.build_organization unless @party.organization
      @party.addresses.build(country_code: "US") if @party.addresses.empty?
      @party.emails.build                         if @party.emails.empty?
      @party.phones.build(country_alpha2: "US")   if @party.phones.empty?
    end

    def create
      return add_row_and_render(:new) if params[:add_address] || params[:add_email] || params[:add_phone]

      attrs = scrub_email_params(scrub_address_params(party_params)).dup
      attrs.delete(:tax_id) if attrs[:tax_id].blank?

      @party = ::Party::Party.new(attrs)
      if @party.save
        redirect_to party_party_path(@party.public_id), notice: "Party created"
      else
        render :new, status: :unprocessable_entity
      end
    end

    def update
      return add_row_and_render(:edit) if params[:add_address] || params[:add_email] || params[:add_phone]

      attrs = scrub_email_params(scrub_address_params(party_params)).dup
      attrs.delete(:tax_id) if attrs[:tax_id].blank?

      if @party.update(attrs)
        redirect_to party_party_path(@party.public_id), notice: "Party updated"
      else
        render :edit, status: :unprocessable_entity
      end
    end

    def destroy
      @party.destroy
      redirect_to party_parties_path, notice: "Party deleted"
    end

    # JSON reveal for Tax ID
    def reveal_tax_id
      response.set_header("Cache-Control", "no-store")
      render json: { value: @party.tax_id }
    end

    private

    def set_party
      pid = params[:public_id] || params[:party_public_id] || params[:id]
      raise ActiveRecord::RecordNotFound, "missing public_id" if pid.blank?
      @party = ::Party::Party.find_by!(public_id: pid)
    end

    def party_params
      params.require(:party_party).permit(
        :party_type, :tax_id, # :customer_number intentionally omitted
        person_attributes: [
          :id, :first_name, :middle_name, :last_name,
          :name_suffix, :courtesy_title, :date_of_birth, :_destroy
        ],
        organization_attributes: [
          :id, :legal_name, :operating_name, :organization_type_code, :formation_date, :_destroy
        ],
        addresses_attributes: [
          :id, :address_type_code, :line1, :line2, :line3, :locality,
          :region_code, :postal_code, :country_code, :is_primary, :_destroy
        ],
        emails_attributes: [
          :id, :email, :email_type_code, :is_primary, :_destroy
        ],
        phones_attributes: [
          :id, :phone_type_code, :number_raw, :country_alpha2, :phone_ext,
          :is_primary, :consent_sms, :_destroy
        ]
      )
    end

    def load_ref_options
      @address_types = Ref::AddressType.order(:name)
      @countries     = Ref::Country.order(:name)
      @org_types     = Ref::OrganizationType.order(:name)
      @email_types   = Ref::EmailType.order(:name)
      @phone_types   = Ref::PhoneType.order(:name)
    end

    def handle_bad_params(_ex)
      @party ||= ::Party::Party.new
      flash.now[:alert] = "Invalid form submission."
      render(action_name == "create" ? :new : :edit, status: :unprocessable_entity)
    end

    # ------- helpers --------------------------------------------------------

    def add_row_and_render(view)
      @party ||= ::Party::Party.new
      @party.assign_attributes(scrub_email_params(scrub_address_params(party_params)))
      @party.addresses.build(country_code: "US") if params[:add_address]
      @party.emails.build                        if params[:add_email]
      @party.phones.build(country_alpha2: "US")  if params[:add_phone]
      render view, status: :unprocessable_entity
    end

    def scrub_email_params(attrs)
      attrs = attrs.is_a?(ActionController::Parameters) ? attrs.to_unsafe_h : attrs
      attrs = attrs.deep_dup
      ehash = attrs[:emails_attributes]
      return attrs unless ehash.is_a?(Hash)

      cleaned = ehash.values.map { |h| h.symbolize_keys }
      cleaned.each { |h| h.delete(:email) if h[:id].present? && h[:email].to_s.strip.blank? }
      cleaned.select! { |h| h[:id].present? || h[:email].to_s.strip.present? }
      attrs[:emails_attributes] = cleaned.each_with_index.to_h { |h, i| [i.to_s, h] }
      attrs
    end

    def scrub_address_params(attrs)
      attrs = attrs.is_a?(ActionController::Parameters) ? attrs.to_unsafe_h : attrs
      attrs = attrs.deep_dup
      ahash = attrs[:addresses_attributes]
      return attrs unless ahash.is_a?(Hash)

      cleaned = ahash.values.map { |h| h.symbolize_keys }
      content_keys = %i[line1 line2 line3 locality region_code postal_code country_code address_type_code is_primary]
      cleaned.select! { |h| h[:id].present? || content_keys.any? { |k| h[k].to_s.strip.present? } }
      attrs[:addresses_attributes] = cleaned.each_with_index.to_h { |h, i| [i.to_s, h] }
      attrs
    end
  end
end

===== END:app/controllers/party/parties_controller.rb =====

===== BEGIN:app/controllers/party/people_controller.rb =====
module Party
  class PeopleController < ApplicationController
    before_action :set_party
    before_action :ensure_party_type_person!

    def show
      render json: @party.person || {}
    end

    def create
      return render json: { error: "Person already exists" }, status: :conflict if @party.person
      person = @party.build_person(person_params)
      person.save! ? render(json: person, status: :created) :
                     render(json: { errors: person.errors.full_messages }, status: :unprocessable_entity)
    end

    def update
      person = @party.person or return render json: { error: "Not found" }, status: :not_found
      person.update(person_params) ? render(json: person) :
                                     render(json: { errors: person.errors.full_messages }, status: :unprocessable_entity)
    end

    def destroy
      @party.person&.destroy
      head :no_content
    end

    private

    def set_party
      @party = Party::Party.find_by!(public_id: params[:party_public_id])
    end

    def ensure_party_type_person!
      return if @party.party_type == "person"
      render json: { error: "party_type must be 'person' for this endpoint" }, status: :unprocessable_entity
    end

    def person_params
    params.require(:person).permit(
      :first_name,
      :middle_name,
      :last_name,
      :name_suffix,
      :courtesy_title,
      :date_of_birth
    )
  end
  end
end

===== END:app/controllers/party/people_controller.rb =====

===== BEGIN:app/controllers/party/phones_controller.rb =====
# app/controllers/party/phones_controller.rb
module Party
  class PhonesController < ApplicationController
    before_action :set_party
    before_action :set_phone, only: %i[edit update destroy primary]

    def new
      @phone = @party.phones.new
      render layout: false
    end

    def edit
      render layout: false
    end

    def create
      @phone = @party.phones.new(phone_params)
      if @phone.save
        respond_to do |f|
          f.turbo_stream { render turbo_stream: refresh_list_and_close }
          f.html { redirect_to party_party_path(@party.public_id), notice: "Phone added" }
        end
      else
        render :new, status: :unprocessable_entity, layout: false
      end
    end

    def update
      if @phone.update(phone_params)
        respond_to do |f|
          f.turbo_stream { render turbo_stream: refresh_list_and_close }
          f.html { redirect_to party_party_path(@party.public_id), notice: "Phone updated" }
        end
      else
        render :edit, status: :unprocessable_entity, layout: false
      end
    end

    def destroy
      @phone.destroy
      respond_to do |f|
        f.turbo_stream { render turbo_stream: [replace_list] }
        f.html { redirect_to party_party_path(@party.public_id), notice: "Phone deleted" }
      end
    end

    def primary
      ::Party::Phone.transaction do
        @party.phones.update_all(is_primary: false)
        @phone.update!(is_primary: true)
      end
      respond_to do |f|
        f.turbo_stream { render turbo_stream: [replace_list] }
        f.html { redirect_back fallback_location: party_party_path(@party.public_id) }
      end
    end

    private

    def set_party
      pid = params[:party_party_public_id] ||
            params[:party_party_id] ||
            params[:party_public_id] ||
            params[:public_id] ||
            params[:party_id]
      @party = ::Party::Party.find_by!(public_id: pid)
    end

    def set_phone
      @phone = @party.phones.find(params[:id])
    end

    def phone_params
      params.require(:party_phone).permit(:phone_type_code, :phone_e164, :phone_ext, :consent_sms, :is_primary)
    end

    def replace_list
      @party.reload
      turbo_stream.replace(
        view_context.dom_id(@party, :phones_section),
        partial: "party/phones/list",
        locals: { party: @party }
      )
    end

    def refresh_list_and_close
      [replace_list, turbo_stream.replace("comm_modal_frame", partial: "shared/close_modal")]
    end
  end
end

===== END:app/controllers/party/phones_controller.rb =====

===== BEGIN:app/controllers/ref/regions_controller.rb =====
module Ref
  class RegionsController < ApplicationController
    def index
      code = params[:country].to_s.upcase
      regions = Ref::Region.where(country_code: code).order(:name)
      render json: regions.select(:code, :name)
    end
  end
end

===== END:app/controllers/ref/regions_controller.rb =====

===== BEGIN:app/helpers/application_helper.rb =====
module ApplicationHelper
    def nav_link_to_route(name, helper, **opts)
        h = Rails.application.routes.url_helpers
        path = h.respond_to?(helper) ? h.public_send(helper) : "#"
        nav_link_to(name, path, **opts)
    end
    def ref_label(ref)
        return "" if ref.blank?
        val = (ref.respond_to?(:name) && ref.name.presence) ||
            (ref.respond_to?(:key)  && ref.key.presence)  ||
            (ref.respond_to?(:code) && ref.code.presence)
        (val || ref).to_s.titleize
    end
end

===== END:app/helpers/application_helper.rb =====

===== BEGIN:app/helpers/mask_helper.rb =====
# app/helpers/mask_helper.rb
module MaskHelper
  def mask_email(email)
    return "" if email.blank?
    name, domain = email.split("@", 2)
    "#{name[0]}***@#{domain}"
  end

  def mask_tax_id(tax_id)
    return "" if tax_id.blank?
    # e.g., show last 4
    "•••-••-#{tax_id[-4..]}"
  end
end

===== END:app/helpers/mask_helper.rb =====

===== BEGIN:app/helpers/navigation_helper.rb =====
module NavigationHelper
  def nav_link_to(name, path, **opts)
    active = current_page?(path)
    classes = ["link", "px-2", ("font-semibold" if active), ("text-primary" if active)]
      .compact.join(" ")
    link_to name, path, { class: classes }.merge(opts)
  end
end
===== END:app/helpers/navigation_helper.rb =====

===== BEGIN:app/helpers/party/parties_helper.rb =====
# app/helpers/party/parties_helper.rb
module Party::PartiesHelper
  def party_type_icon(party, size: 20)
    t = party.party_type.to_s.downcase
    cls = "inline-block align-middle text-base-content" # visible color
    case t
    when "person"
      %Q(
        <svg class="#{cls}" width="#{size}" height="#{size}" viewBox="0 0 24 24" role="img" aria-label="Person">
          <title>Person</title>
          <path fill="currentColor" d="M12 12a5 5 0 1 0-5-5a5 5 0 0 0 5 5Zm0 2c-4.418 0-8 2.239-8 5v1h16v-1c0-2.761-3.582-5-8-5z"/>
        </svg>
      ).html_safe
    when "organization"
      %Q(
        <svg class="#{cls}" width="#{size}" height="#{size}" viewBox="0 0 24 24"
            role="img" aria-label="Organization"
            fill="none" stroke="currentColor" stroke-width="2"
            stroke-linecap="round" stroke-linejoin="round">
          <title>Organization</title>
          <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
          <path d="M3 7m0 2a2 2 0 0 1 2 -2h14a2 2 0 0 1 2 2v9a2 2 0 0 1 -2 2h-14a2 2 0 0 1 -2 -2z"/>
          <path d="M8 7v-2a2 2 0 0 1 2 -2h4a2 2 0 0 1 2 2v2"/>
          <path d="M12 12l0 .01"/>
          <path d="M3 13a20 20 0 0 0 18 0"/>
        </svg>
      ).html_safe
    else
      %Q(
        <svg class="#{cls}" width="#{size}" height="#{size}" viewBox="0 0 24 24" role="img" aria-label="Unknown">
          <title>Unknown</title>
          <path fill="currentColor" d="M12 2a10 10 0 1 0 10 10A10.011 10.011 0 0 0 12 2Zm1 16h-2v-2h2Zm1.07-7.75l-.9.92A1.49 1.49 0 0 0 12.5 13h-1v-1a2 2 0 0 1 .59-1.42l1.24-1.26a1.5 1.5 0 1 0-2.53-1.06H9.5a3.5 3.5 0 1 1 6.06 2.03Z"/>
        </svg>
      ).html_safe
    end
  end

    def sort_link(label, key)
        current = params[:sort].to_s
        dir     = params[:dir].to_s
        nextdir = (current == key.to_s && dir == "asc") ? "desc" : "asc"
        arrow   = current == key.to_s ? (dir == "asc" ? "▲" : "▼") : ""

        link_to "#{label} #{arrow}".strip,
                url_for(params.permit!.to_h.merge(sort: key, dir: nextdir, only_path: true)),
                class: "link link-hover"
    end

      # Returns [["Pennsylvania","PA"], ...] for a given country_code or []
      def regions_for(country_code)
        return [] if country_code.blank?
        Ref::Region.where(country_code: country_code)
                  .order(:name)
                  .pluck(:name, :code)
      end
    end

===== END:app/helpers/party/parties_helper.rb =====

===== BEGIN:app/helpers/phone_helper.rb =====
module PhoneHelper
  def phone_country_options
    if defined?(ISO3166::Country)
      ISO3166::Country.all
        .select(&:alpha2)
        .map { |c| ["#{c.emoji_flag} #{c.translations[I18n.locale.to_s] || c.name}", c.alpha2] }
        .sort_by(&:first)
    else
      # Minimal fallback
      [["🇺🇸 United States", "US"], ["🇨🇦 Canada", "CA"], ["🇬🇧 United Kingdom", "GB"]]
    end
  end
end
===== END:app/helpers/phone_helper.rb =====

===== BEGIN:app/javascript/application.js =====
import "@hotwired/turbo-rails"
import "controllers"
===== END:app/javascript/application.js =====

===== BEGIN:app/javascript/controllers/application.js =====
import { Application } from "@hotwired/stimulus"
import { eagerLoadControllersFrom } from "@hotwired/stimulus-loading"
export const application = Application.start()
eagerLoadControllersFrom("controllers", application)

===== END:app/javascript/controllers/application.js =====

===== BEGIN:app/javascript/controllers/copy_controller.js =====
import { Controller } from "@hotwired/stimulus"

export default class extends Controller {
  static values = { text: String }
  static targets = ["btn", "icon"]

  async copy(e) {
    e?.preventDefault()
    const text = this.textValue || this.element?.innerText || ""
    try {
      await navigator.clipboard.writeText(text.trim())
      this.flash()
    } catch {
      this.fallback(text)
      this.flash()
    }
  }

  fallback(text) {
    const ta = document.createElement("textarea")
    ta.value = text
    ta.setAttribute("readonly", "")
    ta.style.position = "absolute"
    ta.style.left = "-9999px"
    document.body.appendChild(ta)
    ta.select()
    document.execCommand("copy")
    document.body.removeChild(ta)
  }

  flash() {
    if (!this.hasBtnTarget) return
    this.btnTarget.classList.add("btn-success")
    setTimeout(() => this.btnTarget.classList.remove("btn-success"), 800)
  }
}

===== END:app/javascript/controllers/copy_controller.js =====

===== BEGIN:app/javascript/controllers/dependent_select_controller.js =====
// dependent_select_controller.js
import { Controller } from "@hotwired/stimulus"
export default class extends Controller {
  static targets = ["country","region"]
  static values = { url: String }
  connect(){ this.refresh() }
  async refresh(){
    const code = this.countryTarget.value
    this.regionTarget.innerHTML = "<option value=''>Select region</option>"
    if (!code) return
    const res = await fetch(`${this.urlValue}?country=${encodeURIComponent(code)}`, { headers: { Accept: "application/json" }})
    if (!res.ok) return
    const list = await res.json()
    this.regionTarget.insertAdjacentHTML("beforeend",
      list.map(r => `<option value="${r.code}">${r.name}</option>`).join("")
    )
    const current = this.regionTarget.getAttribute("data-current")
    if (current) this.regionTarget.value = current
  }
}
===== END:app/javascript/controllers/dependent_select_controller.js =====

===== BEGIN:app/javascript/controllers/hello_controller.js =====
import { Controller } from "@hotwired/stimulus"

export default class extends Controller {
  connect() {
    this.element.textContent = "Hello World!"
  }
}

===== END:app/javascript/controllers/hello_controller.js =====

===== BEGIN:app/javascript/controllers/index.js =====
import { application } from "controllers/application"
===== END:app/javascript/controllers/index.js =====

===== BEGIN:app/javascript/controllers/modal_controller.js =====
// app/javascript/controllers/modal_controller.js
import { Controller } from "@hotwired/stimulus"
export default class extends Controller {
  static values = { id: String }
  open()  { document.getElementById(this.idValue)?.showModal?.() }
  close() { document.getElementById(this.idValue)?.close?.() }
}

===== END:app/javascript/controllers/modal_controller.js =====

===== BEGIN:app/javascript/controllers/nested_form_controller.js =====
// app/javascript/controllers/nested_form_controller.js
import { Controller } from "@hotwired/stimulus"
export default class extends Controller {
  static targets = ["container", "template"]
  add(e){ e.preventDefault(); this.containerTarget.insertAdjacentHTML("beforeend",
    this.templateTarget.innerHTML.replace(/NEW_RECORD/g, Date.now().toString())
  )}
  remove(e){
    e.preventDefault()
    const wrapper = e.target.closest("[data-address-wrapper]")
    wrapper.querySelector("input[name*='[_destroy]']").value = "1"
    wrapper.classList.add("hidden")
  }

  // app/javascript/controllers/nested_form_controller.js
  add(e){
    e.preventDefault()
    const tmpl = this.templateTarget.content.cloneNode(true)
    const el = tmpl.querySelector("[data-address-wrapper]")
    // default country to US if empty
    const country = el.querySelector('[data-dependent-select-target="country"]')
    if (country && !country.value) {
      country.value = "US"
      country.dispatchEvent(new Event("change"))
    }
    this.containerTarget.appendChild(tmpl)
  }

}

===== END:app/javascript/controllers/nested_form_controller.js =====

===== BEGIN:app/javascript/controllers/party_type_controller.js =====
// app/javascript/controllers/party_type_controller.js
import { Controller } from "@hotwired/stimulus"
export default class extends Controller {
  static targets = ["select","personSection","orgSection","personDestroy","orgDestroy"]
  connect(){ this.sync() }
  change(){ this.sync() }
  sync(){
    const isPerson = this.selectTarget.value === "person"
    this.personSectionTarget.classList.toggle("hidden", !isPerson)
    this.orgSectionTarget.classList.toggle("hidden", isPerson)
    if (this.hasPersonDestroyTarget) this.personDestroyTarget.value = isPerson ? "0" : "1"
    if (this.hasOrgDestroyTarget)    this.orgDestroyTarget.value    = isPerson ? "1" : "0"
  }
}

===== END:app/javascript/controllers/party_type_controller.js =====

===== BEGIN:app/javascript/controllers/region_select_controller.js =====
// app/javascript/controllers/region_select_controller.js
import { Controller } from "@hotwired/stimulus"

export default class extends Controller {
  static values = { url: String }
  static targets = ["country", "region"]

  connect() { this.refresh() }

  async refresh() {
    const cc = this.countryTarget?.value
    if (!cc) { this.fill([]); return }
    try {
      const res = await fetch(`${this.urlValue}?country=${encodeURIComponent(cc)}`, { headers: { Accept: "application/json" } })
      const opts = await res.json() // [{code,name}]
      this.fill(opts)
    } catch {
      this.fill([])
    }
  }

  fill(opts) {
    const desired = this.regionTarget.dataset.selected || this.regionTarget.value || ""
    this.regionTarget.innerHTML =
      `<option value=""></option>` +
      opts.map(o => `<option value="${o.code}">${o.name}</option>`).join("")
    this.regionTarget.disabled = opts.length === 0

    if (desired && opts.some(o => o.code === desired)) {
      this.regionTarget.value = desired
    } else {
      this.regionTarget.value = ""
    }
    // keep selected for future refreshes
    this.regionTarget.dataset.selected = this.regionTarget.value
  }
}

===== END:app/javascript/controllers/region_select_controller.js =====

===== BEGIN:app/javascript/controllers/reveal_controller.js =====
// app/javascript/controllers/reveal_controller.js
import { Controller } from "@hotwired/stimulus"

export default class extends Controller {
  static values = { url: String }
  static targets = ["text", "button", "spinner"]

  async reveal(event) {
    event?.preventDefault()

    // simple demo fallback if no URL provided
    if (!this.hasUrlValue || !this.urlValue) {
      this.textTarget.textContent = "reveal clicked"
      return
    }

    this.buttonTarget.disabled = true
    this.buttonTarget.classList.add("hidden")
    if (this.hasSpinnerTarget) this.spinnerTarget.classList.remove("hidden")

    try {
      const res = await fetch(this.urlValue, {
        headers: { "Accept": "application/json" },
        credentials: "same-origin"
      })
      if (!res.ok) throw new Error("Reveal failed")
      const { value } = await res.json()
      this.textTarget.textContent = value || ""
    } catch (e) {
      console.error(e)
      this.buttonTarget.disabled = false
      this.buttonTarget.classList.remove("hidden")
      alert("Unable to reveal right now.")
    } finally {
      if (this.hasSpinnerTarget) this.spinnerTarget.classList.add("hidden")
    }
  }
}

===== END:app/javascript/controllers/reveal_controller.js =====

===== BEGIN:app/javascript/controllers/tabs_controller.js =====
import { Controller } from "@hotwired/stimulus"

export default class extends Controller {
  static targets = ["panel", "button"]
  static values = { active: String }

  connect() {
    const key = this.activeValue || this.buttonTargets[0]?.dataset.tab
    this.showByKey(key)
  }

  show(e) { this.showByKey(e.currentTarget.dataset.tab) }

  showByKey(key) {
    if (!key) return
    this.panelTargets.forEach(p => p.classList.toggle("hidden", p.dataset.panel !== key))
    this.buttonTargets.forEach(b => {
      const on = b.dataset.tab === key
      b.classList.toggle("menu-active", on)
      b.ariaSelected = on
    })
    this.activeValue = key
  }
}

===== END:app/javascript/controllers/tabs_controller.js =====

===== BEGIN:app/javascript/controllers/toggle_input_controller.js =====
// app/javascript/controllers/toggle_input_controller.js
import { Controller } from "@hotwired/stimulus"
export default class extends Controller {
  static targets = ["field"]
  enable() {
    if (this.fieldTarget.hasAttribute("readonly")) {
      this.fieldTarget.removeAttribute("readonly")
    }
  }
}

===== END:app/javascript/controllers/toggle_input_controller.js =====

===== BEGIN:app/jobs/application_job.rb =====
class ApplicationJob < ActiveJob::Base
  # Automatically retry jobs that encountered a deadlock
  # retry_on ActiveRecord::Deadlocked

  # Most jobs are safe to ignore if the underlying records are no longer available
  # discard_on ActiveJob::DeserializationError
end

===== END:app/jobs/application_job.rb =====

===== BEGIN:app/mailers/application_mailer.rb =====
class ApplicationMailer < ActionMailer::Base
  default from: "from@example.com"
  layout "mailer"
end

===== END:app/mailers/application_mailer.rb =====

===== BEGIN:app/models/application_record.rb =====
class ApplicationRecord < ActiveRecord::Base
  primary_abstract_class
end

===== END:app/models/application_record.rb =====

===== BEGIN:app/models/concerns/single_primary.rb =====
# app/models/concerns/single_primary.rb
module SinglePrimary
  extend ActiveSupport::Concern
  included { before_save :enforce_single_primary }

  private
  def enforce_single_primary
    return unless will_save_change_to_is_primary? && is_primary
    self.class.where(party_id: party_id).where.not(id: id).update_all(is_primary: false)
  end
end

===== END:app/models/concerns/single_primary.rb =====

===== BEGIN:app/models/customer_number_counter.rb =====
# app/models/customer_number_counter.rb
class CustomerNumberCounter < ApplicationRecord
  # Returns next integer in [min_value..max_value] cycling, inside a row lock.
  def self.next_value!
    transaction do
      counter = lock(true).first || create!(current_value: 1000, min_value: 1001, max_value: 9_999_999)
      nxt = counter.current_value + 1
      nxt = counter.min_value if nxt > counter.max_value
      counter.update!(current_value: nxt)
      nxt
    end
  end
end

===== END:app/models/customer_number_counter.rb =====

===== BEGIN:app/models/party/address.rb =====
module Party
  class Address < ApplicationRecord
    include SinglePrimary
    self.table_name = "party_addresses"
    include SinglePrimary

    belongs_to :party, class_name: "Party::Party", inverse_of: :addresses

    belongs_to :address_type, class_name: "Ref::AddressType",
               foreign_key: :address_type_code, primary_key: :code

    belongs_to :country, class_name: "Ref::Country",
               foreign_key: :country_code,  primary_key: :code

    # scope region by country_code to match the FK
    belongs_to :region, ->(addr) { where(country_code: addr.country_code) },
               class_name: "Ref::Region",
               foreign_key: :region_code, primary_key: :code, optional: true

    # normalize before validations
    before_validation { self.country_code = (country_code.presence || "US").to_s.upcase.strip }
    before_validation { self.region_code  = region_code.to_s.upcase.strip }
    before_validation :normalize_codes

    validates :country_code,      presence: true
    validates :address_type_code, presence: true

    private

    def normalize_codes
      self.region_code = nil if region_code.blank?
    end
  end
end

===== END:app/models/party/address.rb =====

===== BEGIN:app/models/party/email.rb =====
# frozen_string_literal: true
module Party
  class Email < ApplicationRecord
    include SinglePrimary
    self.table_name = "party_emails"

    belongs_to :party, class_name: "Party::Party", inverse_of: :emails
    belongs_to :email_type, class_name: "Ref::EmailType",
      foreign_key: :email_type_code, primary_key: :code, optional: true

    # Encryption + blind index
    encrypts :email, deterministic: true
    blind_index :email,
      key: BlindIndex.master_key,
      encode: false,
      expression: ->(v) { v.to_s.strip.downcase }  # column is email_bidx by default

    # Normalize
    before_validation { self.email = email.to_s.strip.downcase.presence }

    # If the blind index is missing (legacy rows), force recompute
    before_validation :ensure_email_bidx

    validates :email,
      presence: true,
      format: { with: /\A[^@\s]+@[^@\s]+\z/ },
      if: -> { new_record? || will_save_change_to_email? }

    validates :party_id, uniqueness: { scope: :email_bidx }

    validate :only_one_primary, if: -> { is_primary? }
    before_save :set_domain_and_masked

    def masked
      return email_masked if email_masked.present?
      self.class.mask(email)
    end

    def self.mask(raw)
      local, dom = raw.to_s.split("@", 2)
      return raw if local.blank? || dom.blank?
      first = local[0]
      last  = local[-1]
      stars = "*" * [local.length - 2, 0].max
      "#{first}#{stars}#{last}@#{dom}"
    end

    private

    def ensure_email_bidx
      # If we have an email but no blind index, reassign to trigger blind_index callback.
      if email.present? && email_bidx.nil?
        self.email = email
      end
    end

    def set_domain_and_masked
      return if email.blank?
      _local, d = email.split("@", 2)
      self.domain       = d
      self.email_masked = self.class.mask(email)
    end

    def only_one_primary
      sibling = party&.emails&.where(is_primary: true)&.where.not(id: id)&.exists?
      errors.add(:is_primary, "already have a primary email") if sibling
    end
  end
end

===== END:app/models/party/email.rb =====

===== BEGIN:app/models/party/group_membership.rb =====
module Party
  class GroupMembership < ApplicationRecord
    self.table_name = "party_group_memberships"

    belongs_to :party, class_name: "Party::Party", foreign_key: :party_id
    belongs_to :group, class_name: "Party::Group", foreign_key: :group_id

    validates :party_id, presence: true
    validates :group_id, presence: true
  end
end

===== END:app/models/party/group_membership.rb =====

===== BEGIN:app/models/party/group.rb =====
module Party
  class Group < ApplicationRecord
    self.table_name = "party_groups"

    belongs_to :group_type, class_name: "Ref::PartyGroupType",
           foreign_key: "party_group_type_code", primary_key: "code",
           optional: true

    has_many :group_memberships, class_name: "Party::GroupMembership",
              foreign_key: :group_id, dependent: :destroy

    has_many :parties, through: :group_memberships, class_name: "Party::Party"

    validates :name, presence: true
  end
end

===== END:app/models/party/group.rb =====

===== BEGIN:app/models/party/link.rb =====
module Party
  class Link < ApplicationRecord
    self.table_name = "party_links"

    belongs_to :source_party, class_name: "Party::Party", foreign_key: :source_party_id
    belongs_to :target_party, class_name: "Party::Party", foreign_key: :target_party_id

    belongs_to :link_type, class_name: "Ref::PartyLinkType",
               foreign_key: :party_link_type_code, primary_key: :code

    validates :party_link_type_code, presence: true

    # Optional: validations to prevent loops or self-linking
    validate :source_and_target_cannot_be_same

    def source_and_target_cannot_be_same
      errors.add(:target_party_id, "can't be same as source") if source_party_id == target_party_id
    end
  end
end

===== END:app/models/party/link.rb =====

===== BEGIN:app/models/party/organization.rb =====
module Party
  class Organization < ApplicationRecord
    self.primary_key = "party_id"
    self.table_name = "party_organizations"

    belongs_to :party, class_name: "Party::Party", foreign_key: :party_id

    belongs_to :organization_type, class_name: "Ref::OrganizationType",
           foreign_key: :organization_type_code, primary_key: :code,
           optional: true

    before_validation do
      self.legal_name = legal_name&.strip
      self.operating_name = operating_name&.strip
    end

    validates :legal_name, presence: true

    def display_name
      return legal_name.to_s if operating_name.blank?
      "#{legal_name} [d/b/a #{operating_name}]"
    end
  end
end

===== END:app/models/party/organization.rb =====

===== BEGIN:app/models/party/party.rb =====
# app/models/party/party.rb
module Party
  class Party < ApplicationRecord
    self.table_name = "parties"

    # Sensitive fields
    encrypts :tax_id, deterministic: true
    blind_index :tax_id, key: BlindIndex.master_key, encode: false

    # Associations
    has_one  :person,       class_name: "Party::Person",       inverse_of: :party, dependent: :destroy
    has_one  :organization, class_name: "Party::Organization", inverse_of: :party, dependent: :destroy
    has_many :addresses,    class_name: "Party::Address",      inverse_of: :party, dependent: :destroy
    has_many :emails,       class_name: "Party::Email",        inverse_of: :party, dependent: :destroy
    has_many :phones,       class_name: "Party::Phone",        inverse_of: :party, dependent: :destroy

    # Nested attrs
    accepts_nested_attributes_for :person, allow_destroy: true
    accepts_nested_attributes_for :organization, allow_destroy: true
    accepts_nested_attributes_for :addresses, allow_destroy: true, reject_if: ->(h) {
      %i[line1 line2 line3 locality region_code postal_code country_code].all? { |k| h[k].to_s.strip.blank? }
    }
    accepts_nested_attributes_for :emails, allow_destroy: true, reject_if: ->(h) { h["email"].to_s.strip.blank? }
    accepts_nested_attributes_for :phones, allow_destroy: true, reject_if: ->(h) {
      h['id'].blank? && h['number_raw'].to_s.strip.blank? && h['phone_e164'].to_s.strip.blank? && h['phone_ext'].to_s.strip.blank?
    }

    # Callbacks
    before_validation :ensure_public_id
    before_validation :ensure_customer_number

    # Validations
    validates :public_id,       presence: true, uniqueness: true
    validates :customer_number, presence: true, uniqueness: true

    # Display helpers
    def display_name
      if person
        [person.first_name, person.middle_name, person.last_name, person.name_suffix]
          .compact_blank
          .join(" ")
      elsif organization
        organization.display_name
      else
        "(Unnamed Party)"
      end
    end

    def to_param = public_id
    def primary_email   = emails.find { |e| e.is_primary? } || emails.first
    def primary_address = addresses.find { |a| a.is_primary? } || addresses.first
    def primary_phone   = phones.first

    private

    def ensure_public_id
      self.public_id = SecureRandom.uuid if public_id.blank?
    end

    def ensure_customer_number
      return if customer_number.present?

      # try service up to 5 times
      5.times do
        candidate =
          if defined?(CustomerNumber::Generator) && CustomerNumber::Generator.respond_to?(:call)
            CustomerNumber::Generator.call.to_s.strip
          else
            ""
          end
        next if candidate.blank?
        unless self.class.exists?(customer_number: candidate)
          self.customer_number = candidate
          return
        end
      end

      # fallback if service failed
      loop do
        fallback = "C#{Time.current.strftime('%y%m%d')}#{format('%06d', SecureRandom.random_number(1_000_000))}"
        break(self.customer_number = fallback) unless self.class.exists?(customer_number: fallback)
      end
    end
  end
end

===== END:app/models/party/party.rb =====

===== BEGIN:app/models/party/person.rb =====
module Party
  class Person < ApplicationRecord
    self.primary_key = "party_id"
    self.table_name = "party_people"

    belongs_to :party, class_name: "Party::Party", foreign_key: :party_id

    # optional validations:
    validates :first_name, presence: true
    validates :last_name, presence: true
  end
end

===== END:app/models/party/person.rb =====

===== BEGIN:app/models/party/phone.rb =====
module Party
  class Phone < ApplicationRecord
    include SinglePrimary
    self.table_name = "party_phones"

    belongs_to :party, class_name: "Party::Party", inverse_of: :phones
    belongs_to :phone_type, class_name: "Ref::PhoneType",
      foreign_key: :phone_type_code, primary_key: :code, optional: true

    # virtuals posted by the form
    attr_accessor :number_raw, :country_alpha2

    # show something in the form when editing
    def number_raw = @number_raw.presence || phone_e164
    def country_alpha2 = @country_alpha2.presence || "US"

    before_validation :normalize_phone!

    # validate only when user entered anything
    with_options if: :row_has_content? do
      validates :phone_e164, presence: true
      validates :phone_type_code, presence: true
    end

    def national_format
      parsed = Phonelib.parse(phone_e164.presence || number_raw, country_alpha2.presence)
      base   = parsed.valid? ? parsed.national : (number_raw.presence || phone_e164)
      phone_ext.present? ? "#{base} x#{phone_ext}" : base
    end

    def international_pretty
      p = Phonelib.parse(phone_e164.presence || number_raw, country_alpha2.presence)
      base = p.valid? ? p.international : (phone_e164.presence || number_raw)
      phone_ext.present? ? "#{base} x#{phone_ext}" : base
    end

    private

    def set_party
      pid = params[:party_party_id] ||
            params[:party_party_public_id] ||
            params[:party_public_id] ||
            params[:public_id] ||
            params[:party_id]
      @party = ::Party::Party.find_by!(public_id: pid)
    end

    def row_has_content?
      number_raw.to_s.strip.present? || phone_ext.to_s.strip.present? || phone_type_code.to_s.strip.present?
    end

    def normalize_phone!
      raw = number_raw.to_s.strip
      return if raw.blank? # reject_if will drop empty rows

      # strip extension typed as "x123" or "ext 123"
      ext  = raw[/\b(?:ext\.?|x)\s*([0-9]{1,10})\b/i, 1]
      main = raw.sub(/\s*\b(?:ext\.?|x)\s*[0-9]{1,10}\b/i, "").strip

      region = main.start_with?("+") ? nil : country_alpha2
      parsed = Phonelib.parse(main, region)

      unless parsed.valid?
        errors.add(:number_raw, "is not a valid phone number")
        return
      end

      self.phone_e164 = parsed.e164
      self.phone_ext  = ext.presence || phone_ext.to_s.strip.presence
    end

  end
end

===== END:app/models/party/phone.rb =====

===== BEGIN:app/models/ref/address_type.rb =====
module Ref
  class AddressType < ApplicationRecord
    self.table_name  = "ref_address_types"
    self.primary_key = "code"

    has_many :addresses,
      class_name: "Party::Address",
      foreign_key: :address_type_code,
      primary_key: :code,
      inverse_of: :address_type,
      dependent: :restrict_with_error

    validates :code, presence: true
    validates :name, presence: true
  end
end
===== END:app/models/ref/address_type.rb =====

===== BEGIN:app/models/ref/country.rb =====
module Ref
  class Country < ApplicationRecord
    self.table_name  = "ref_countries"
    self.primary_key = "code"

    has_many :regions,
      class_name: "Ref::Region",
      foreign_key: :country_code,
      primary_key: :code,
      inverse_of: :country,
      dependent: :restrict_with_error

    has_many :addresses,
      class_name: "Party::Address",
      foreign_key: :country_code,
      primary_key: :code,
      inverse_of: :country,
      dependent: :restrict_with_error

    validates :code, presence: true
    validates :name, presence: true
  end
end
===== END:app/models/ref/country.rb =====

===== BEGIN:app/models/ref/email_type.rb =====
module Ref
  class EmailType < ApplicationRecord
    self.table_name  = "ref_email_types"
    self.primary_key = "code"

    has_many :emails,
      class_name: "Party::Email",
      foreign_key: :email_type_code,
      primary_key: :code,
      inverse_of: :email_type,
      dependent: :restrict_with_error

    validates :code, presence: true
    validates :name, presence: true
  end
end
===== END:app/models/ref/email_type.rb =====

===== BEGIN:app/models/ref/organization_type.rb =====
module Ref
  class OrganizationType < ApplicationRecord
    self.table_name  = "ref_organization_types"
    self.primary_key = "code"

    has_many :organizations,
      class_name: "Party::Organization",
      foreign_key: :organization_type_code,
      primary_key: :code,
      inverse_of: :organization_type,
      dependent: :restrict_with_error

    validates :code, presence: true
    validates :name, presence: true
  end
end
===== END:app/models/ref/organization_type.rb =====

===== BEGIN:app/models/ref/party_group_type.rb =====
module Ref
  class PartyGroupType < ApplicationRecord
    self.table_name  = "ref_party_group_types"
    self.primary_key = "code"

    has_many :groups,
      class_name: "Party::Group",
      foreign_key: :party_group_type_code,
      primary_key: :code,
      inverse_of: :party_group_type,
      dependent: :restrict_with_error

    validates :code, presence: true
    validates :name, presence: true
  end
end
===== END:app/models/ref/party_group_type.rb =====

===== BEGIN:app/models/ref/party_link_type.rb =====
module Ref
  class PartyLinkType < ApplicationRecord
    self.table_name  = "ref_party_link_types"
    self.primary_key = "code"

    has_many :links,
      class_name: "Party::Link",
      foreign_key: :party_link_type_code,
      primary_key: :code,
      inverse_of: :party_link_type,
      dependent: :restrict_with_error

    validates :code, presence: true
    validates :name, presence: true
  end
end
===== END:app/models/ref/party_link_type.rb =====

===== BEGIN:app/models/ref/phone_type.rb =====
module Ref
  class PhoneType < ApplicationRecord
    self.table_name = "ref_phone_types"
    # add scopes later if you add columns like disabled_at
  end
end

===== END:app/models/ref/phone_type.rb =====

===== BEGIN:app/models/ref/region.rb =====
module Ref
  class Region < ApplicationRecord
    self.table_name  = "ref_regions"
    self.primary_key = "code"

    belongs_to :country,
      class_name: "Ref::Country",
      foreign_key: :country_code,
      primary_key: :code,
      inverse_of: :regions,
      optional: false

    has_many :addresses,
      class_name: "Party::Address",
      foreign_key: :region_code,
      primary_key: :code,
      inverse_of: :region,
      dependent: :restrict_with_error

    validates :code, presence: true
    validates :name, presence: true
    validates :country_code, presence: true
  end
end
===== END:app/models/ref/region.rb =====

===== BEGIN:app/services/customer_number/generator.rb =====
# app/services/customer_number/generator.rb
module CustomerNumber
  class Generator
    class << self
      # Builds: 7-digit seq (zero-padded) + YY + Luhn check
      def call(now: Time.current)
        seq   = CustomerNumberCounter.next_value!
        base7 = format("%07d", seq)
        yy    = now.strftime("%y")
        body  = "#{base7}#{yy}"
        check = luhn_check_digit(body)
        "#{body}#{check}"
      end

      private

      def luhn_check_digit(num_str)
        raise ArgumentError, "digits only" unless num_str.match?(/\A\d+\z/)
        digits = num_str.chars.map { |c| c.ord - 48 } # '0' -> 0
        sum = 0
        digits.reverse.each_with_index do |d, i|
          if i.odd?        # double every second from the right
            d *= 2
            d -= 9 if d > 9
          end
          sum += d
        end
        (10 - (sum % 10)) % 10
      end
      private :luhn_check_digit
    end
  end
end

===== END:app/services/customer_number/generator.rb =====

===== BEGIN:app/views/home/index.html.erb =====
<div class="grid gap-4 md:grid-cols-3">
  <section class="card bg-base-100 card-bordered">
    <div class="card-body">
      <div class="card-title">Quick Actions</div>
      <div class="flex flex-wrap gap-2">
        <%= link_to "View Parties", party_parties_path, class: "btn btn-primary btn-sm" %>
        <%= link_to "New Party", new_party_party_path, class: "btn btn-secondary btn-sm" %>
      </div>
    </div>
  </section>

  <section class="card bg-base-100 card-bordered">
    <div class="card-body">
      <div class="card-title">Shortcuts</div>
      <ul class="list space-y-2">
        <li class="list-row"><a class="link" href="#">Open Account</a></li>
        <li class="list-row"><a class="link" href="#">Recent Transactions</a></li>
        <li class="list-row"><a class="link" href="#">Reports</a></li>
      </ul>
    </div>
  </section>

  <section class="card bg-base-100 card-bordered">
    <div class="card-body">
      <div class="card-title">Status</div>
      <p class="text-sm opacity-70">System nominal.</p>
    </div>
  </section>
</div>

<section class="card bg-base-100 card-bordered mt-4">
  <div class="card-body">
    <div class="card-title items-center justify-between">
      <span>Recent Parties</span>
      <%= link_to "All Parties", party_parties_path, class: "btn btn-outline btn-sm" %>
    </div>
    <div class="overflow-x-auto">
      <table class="table table-zebra w-full">
        <thead>
          <tr><th>Name</th><th>Type</th><th>Created</th><th></th></tr>
        </thead>
        <tbody>
          <tr>
            <td>Acme Holdings, LLC</td><td>Organization</td><td>2025-08-12</td>
            <td><a class="link" href="#">View</a></td>
          </tr>
          <tr>
            <td>Jane Doe</td><td>Person</td><td>2025-09-01</td>
            <td><a class="link" href="#">View</a></td>
          </tr>
        </tbody>
      </table>
    </div>
  </div>
</section>

===== END:app/views/home/index.html.erb =====

===== BEGIN:app/views/layouts/application.html.erb =====
<!DOCTYPE html>
<html lang="en" data-theme="blueLight">
  <head>
    <title><%= content_for?(:title) ? yield(:title) : "BankEncoRRe" %></title>
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>
    <%= stylesheet_link_tag "application", "data-turbo-track": "reload" %>
    <%= javascript_importmap_tags %>
    <script>
      (function(){
        const KEY="daisy-theme",root=document.documentElement;
        const saved=localStorage.getItem(KEY);
        if(saved) root.setAttribute("data-theme",saved);
        document.addEventListener("change",e=>{
          const t=e.target;
          if(t?.classList?.contains("theme-controller")){
            root.setAttribute("data-theme",t.value);
            try{localStorage.setItem(KEY,t.value);}catch(_){}
          }
        });
        document.addEventListener("DOMContentLoaded",()=>{
          const current=root.getAttribute("data-theme")||"blueLight";
          document.querySelectorAll(".theme-controller").forEach(el=>{el.checked=(el.value===current);});
        });
      })();
    </script>
    <!-- SVG (preferred) -->
    <link rel="icon" type="image/svg+xml" href="<%= asset_path('favicon.svg') %>">

    <!-- PNG fallbacks -->
    <link rel="icon" sizes="32x32"  type="image/png" href="<%= asset_path('favicon-32.png') %>">
    <link rel="icon" sizes="192x192" type="image/png" href="<%= asset_path('favicon-192.png') %>">
    <link rel="icon" sizes="512x512" type="image/png" href="<%= asset_path('favicon-512.png') %>">

    <!-- iOS/Android home screen -->
    <link rel="apple-touch-icon" sizes="180x180" href="<%= asset_path('favicon-180.png') %>">

    <!-- Safari pinned tab (optional) -->
    <link rel="mask-icon" href="<%= asset_path('mask-icon.svg') %>" color="#8E3B3B">

    <!-- Address bar color (optional) -->
    <meta name="theme-color" content="#F9F5F0">
  </head>

  <body class="min-h-screen">
    <header class="bg-base-100 border-b">
      <div class="max-w-7xl mx-auto flex flex-row flex-wrap md:flex-nowrap items-center justify-between gap-3 px-4 md:px-6 py-3">

        <!-- left: logo -->
        <%= link_to root_path, class: "flex items-center gap-2 shrink-0" do %>
          <%= render "shared/logo" %>
        <% end %>

        <!-- center: nav -->
        <nav class="hidden md:flex flex-1 justify-center items-center gap-2" role="navigation" aria-label="Main">
          <%= link_to "Home", root_path, class: "btn btn-ghost btn-sm" %>
          <%= link_to "Parties", party_parties_path, class: "btn btn-ghost btn-sm" %>
          <%= link_to "Cases", "#", class: "btn btn-ghost btn-sm" %>
          <%= link_to "Reports", "#", class: "btn btn-ghost btn-sm" %>
        </nav>

        <!-- right: actions -->
        <div class="flex items-center gap-3 shrink-0">
          <%= form_with url: party_parties_path, method: :get, local: true, class: "join hidden md:flex" do %>
            <input name="q" aria-label="Search parties" class="input input-bordered join-item w-64 md:w-80" placeholder="Search by name or customer #">
            <button class="btn join-item" type="submit">Search</button>
          <% end %>

          <%= link_to "New Party", new_party_party_path, class: "btn btn-primary btn-sm hidden md:inline-flex" %>

          <div class="dropdown dropdown-end">
              <button tabindex="0" class="btn btn-ghost btn-circle btn-sm" aria-label="User menu">
                <span class="w-8 h-8 rounded-full bg-base-300 text-base-content grid place-items-center">
                  <svg class="w-5 h-5 block" viewBox="0 0 24 24" aria-label="User">
                    <title>User</title>
                    <path fill="currentColor"
                      d="M12 14c-3.9 0-7 1.8-7 4v1h14v-1c0-2.2-3.1-4-7-4Zm0-2a4 4 0 1 0 0-8 4 4 0 0 0 0 8Z"/>
                  </svg>
                </span>
              </button>
            <div tabindex="0" class="dropdown-content z-10 bg-base-100 rounded-box shadow p-3 w-64">
              <div class="mb-2 text-sm font-semibold">Appearance</div>
              <div class="grid grid-cols-2 gap-2 text-sm">
                <% ["blueLight","merlotLight","blueDark","merlotDark"].each do |t| %>
                  <label class="label cursor-pointer justify-start gap-2">
                    <input type="radio" name="theme" value="<%= t %>" class="theme-controller">
                    <span><%= t.gsub(/([a-z])([A-Z])/,'\1 \2').split.map(&:capitalize).join(' ') %></span>
                  </label>
                <% end %>
              </div>
              <div class="divider my-2"></div>
              <ul class="menu">
                <li><a href="#">Profile</a></li>
                <li><a href="#">Sign out</a></li>
              </ul>
            </div>
          </div>
        </div>

      </div>
    </header>

    <main class="max-w-7xl mx-auto px-4 md:px-6 py-6">
      <% flash.each do |type, msg| %>
        <% tone = { notice: "info", alert: "warning", error: "error", success: "success" }[type.to_sym] || "info" %>
        <div class="alert alert-<%= tone %> mb-3"><%= msg %></div>
      <% end %>
      <%= yield %>
    </main>

    <footer class="border-t">
      <div class="max-w-7xl mx-auto p-4 text-sm opacity-70">
        © <%= Time.current.year %> YourApp · <a href="#" class="link">Privacy</a>
      </div>
    </footer>
  </body>
</html>

===== END:app/views/layouts/application.html.erb =====

===== BEGIN:app/views/layouts/mailer.html.erb =====
<!DOCTYPE html>
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <style>
      /* Email styles need to be inline */
    </style>
  </head>

  <body>
    <%= yield %>
  </body>
</html>

===== END:app/views/layouts/mailer.html.erb =====

===== BEGIN:app/views/layouts/mailer.text.erb =====
<%= yield %>

===== END:app/views/layouts/mailer.text.erb =====

===== BEGIN:app/views/party/addresses/_card.html.erb =====
<div class="card card-border p-3 flex items-center justify-between">
  <div class="opacity-80">
    <div><%= address.address_type_code&.titleize %></div>
    <div><%= address.line1 %><% if address.line2.present? %>, <%= address.line2 %><% end %></div>
    <div><%= [address.locality, address.region_code, address.postal_code].compact.join(", ") %></div>
    <div><%= address.country_code %></div>
    <% if address.is_primary %><span class="badge badge-primary mt-1">Primary</span><% end %>
  </div>
  <div class="flex gap-2">
    <%= button_to "Primary",
      primary_party_party_phone_path(party.public_id, phone),
      method: :patch,
      form: { data: { turbo_frame: dom_id(party, :phones_section) } },
      class: "btn btn-soft btn-sm" %>
  </div>
  <div class="card-actions">
    <%= link_to "Edit",
      edit_party_party_address_path(party.public_id, address, from: :show),
      data: { turbo_frame: "comm_modal_frame", action: "click->modal#open" },
      class: "btn btn-soft btn-xsm" %>

    <%= button_to "Delete",
      party_party_address_path(party.public_id, address),
      method: :delete,
      form: { data: { turbo_confirm: "Delete this address?" } },
      class: "btn btn-error btn-soft btn-xsm" %>
  </div>
</div>

===== END:app/views/party/addresses/_card.html.erb =====

===== BEGIN:app/views/party/addresses/edit.html.erb =====
<!-- app/views/party/emails/edit.html.erb -->
<turbo-frame id="comm_modal_frame">
  <%= render "form" %>
</turbo-frame>

===== END:app/views/party/addresses/edit.html.erb =====

===== BEGIN:app/views/party/addresses/_form.html.erb =====
<!-- app/views/party/addresses/_form.html.erb -->
<%= form_with model: @address,
      scope: :party_address,
      url: (@address.persisted? ?
              party_party_address_path(@party.public_id, @address) :
              party_party_addresses_path(@party.public_id)),
      data: { turbo_frame: "comm_modal_frame" } do |f| %>

  <div class="grid gap-3"
       data-controller="region-select"
       data-region-select-url-value="<%= ref_regions_path(format: :json) %>">

    <!-- Address Type -->
    <div class="select">
      <%= f.collection_select :address_type_code, @address_types, :code, :name,
            { include_blank: true }, {} %>
    </div>

    <!-- Country -->
    <div class="select">
      <% if @countries.present? %>
        <%= f.collection_select :country_code, @countries, :code, :name,
              { include_blank: true },
              { data: { region_select_target: "country", action: "change->region-select#refresh" } } %>
      <% else %>
        <%= f.select :country_code,
              options_for_select([["United States","US"],["Canada","CA"]], @address.country_code || "US"),
              { include_blank: true },
              { data: { region_select_target: "country", action: "change->region-select#refresh" } } %>
      <% end %>
    </div>

    <!-- Street 1 -->
    <div class="input">
      <%= f.text_field :line1, required: true, placeholder: "Address line 1" %>
    </div>

    <!-- Street 2 -->
    <div class="input">
      <%= f.text_field :line2, placeholder: "Address line 2" %>
    </div>

    <!-- Locality / City -->
    <div class="input">
      <%= f.text_field :locality, required: true, placeholder: "Locality / City" %>
    </div>

    <!-- State / Region -->
    <div class="select">
      <%= f.select :region_code,
            options_for_select(regions_for(@address.country_code), @address.region_code),
            { include_blank: true },
            { data: { region_select_target: "region" },
              disabled: @address.country_code.blank? } %>
    </div>

    <!-- Postal Code -->
    <div class="input">
      <%= f.text_field :postal_code, placeholder: "Postal code" %>
    </div>

    <label class="flex items-center gap-2">
      <%= f.check_box :is_primary %> Primary
    </label>
  </div>

  <div class="mt-4 flex justify-end gap-2">
    <button type="button" class="btn btn-soft" data-action="modal#close">Cancel</button>
    <%= f.submit "Save", class: "btn btn-primary" %>
  </div>
<% end %>

===== END:app/views/party/addresses/_form.html.erb =====

===== BEGIN:app/views/party/addresses/_list.html.erb =====
<section id="<%= dom_id(party, :phones_section) %>">
  <div class="flex items-center justify-between mb-2">
    <h3 class="text-lg font-semibold">Phones</h3>
    <%= link_to "Add",
      new_party_party_phone_path(party.public_id, from: :show),
      data: { turbo_frame: "comm_modal_frame", action: "click->modal#open" },
      class: "btn btn-primary btn-sm" %>
  </div>

  <div class="grid gap-3">
    <% party.phones.each do |phone| %>
      <%= render "party/phones/card", party: party, phone: phone %>
    <% end %>
  </div>
</section>

===== END:app/views/party/addresses/_list.html.erb =====

===== BEGIN:app/views/party/addresses/new.html.erb =====
<!-- app/views/party/emails/new.html.erb -->
<turbo-frame id="comm_modal_frame">
  <%= render "form" %>
</turbo-frame>


===== END:app/views/party/addresses/new.html.erb =====

===== BEGIN:app/views/party/emails/_card.html.erb =====
<div class="card card-border p-3 flex items-center justify-between">
  <div>
    <div class="opacity-80"><%= email.email %></div>
    <% if email.is_primary %><span class="badge badge-primary mt-1">Primary</span><% end %>
  </div>

  <div class="flex gap-2">
    <%= button_to "Primary",
      primary_party_party_email_path(party.public_id, email),
      method: :patch,
      form: { data: { turbo_frame: dom_id(party, :emails_list) } },
      class: "btn btn-soft btn-sm" %>

    <%= link_to "Edit",
      edit_party_party_email_path(party.public_id, email, from: :show),
      data: { turbo_frame: "comm_modal_frame", action: "click->modal#open" },
      class: "btn btn-soft btn-sm" %>

    <%= button_to "Delete",
      party_party_email_path(party.public_id, email),
      method: :delete,
      form: { data: { turbo_confirm: "Delete this email?" } },
      class: "btn btn-error btn-soft btn-sm" %>
  </div>
</div>

===== END:app/views/party/emails/_card.html.erb =====

===== BEGIN:app/views/party/emails/edit.html.erb =====
<!-- app/views/party/emails/edit.html.erb -->
<turbo-frame id="comm_modal_frame">
  <%= render "form", party: @party, email: @email %>
</turbo-frame>
===== END:app/views/party/emails/edit.html.erb =====

===== BEGIN:app/views/party/emails/_form.html.erb =====
<%= form_with scope: :party_email,
      url: (@email.persisted? ?
              party_party_email_path(@party.public_id, @email) :
              party_party_emails_path(@party.public_id)),
      data: { turbo_frame: "comm_modal_frame" } do |f| %>
  <div class="space-y-3">
    <div class="input"><%= f.email_field :email, required: true %></div>
    <label class="flex items-center gap-2"><%= f.check_box :is_primary %> Primary</label>
  </div>
  <div class="mt-4 flex justify-end gap-2">
    <button type="button" class="btn btn-soft" data-action="modal#close">Cancel</button>
    <%= f.submit "Save", class: "btn btn-primary" %>
  </div>
<% end %>

===== END:app/views/party/emails/_form.html.erb =====

===== BEGIN:app/views/party/emails/_list.html.erb =====
<!-- app/views/party/emails/_list.html.erb -->
<section>
  <div class="flex items-center justify-between mb-2">
    <h3 class="text-lg font-semibold">Emails</h3>
    <%= link_to "Add",
      new_party_party_email_path(party.public_id, from: :show),
      data: { turbo_frame: "comm_modal_frame", action: "click->modal#open" },
      class: "btn btn-primary btn-sm" %>
  </div>
  <div id="<%= dom_id(party, :emails_list) %>" class="grid gap-3">
    <% party.emails.each do |email| %>
      <%= render "party/emails/card", party: party, email: email %>
    <% end %>
  </div>
</section>

===== END:app/views/party/emails/_list.html.erb =====

===== BEGIN:app/views/party/emails/new.html.erb =====
<!-- app/views/party/emails/new.html.erb -->
<turbo-frame id="comm_modal_frame">
  <%= render "form", party: @party, email: @email %>
</turbo-frame>

<!-- app/views/party/emails/edit.html.erb -->
<turbo-frame id="comm_modal_frame">
  <%= render "form", party: @party, email: @email %>
</turbo-frame>

===== END:app/views/party/emails/new.html.erb =====

===== BEGIN:app/views/party/parties/_address_fields.html.erb =====
<div class="grid md:grid-cols-6 gap-4">
  <div class="md:col-span-2">
    <label class="label"><span class="label-text">Type</span></label>
    <%= f.collection_select :address_type_code, @address_types, :code, :name,
          { include_blank: "Select type" }, class: "select select-bordered w-full" %>
  </div>

  <div class="md:col-span-2">
    <label class="label"><span class="label-text">Country</span></label>
    <%= f.collection_select :country_code, @countries, :code, :name,
          { selected: (f.object.country_code.presence || "US") },
          class: "select select-bordered w-full" %>
  </div>

  <div class="md:col-span-2">
    <label class="label"><span class="label-text">Region/State</span></label>
    <%= f.text_field :region_code, class: "input input-bordered w-full", placeholder: "MI" %>
  </div>

  <div class="md:col-span-3">
    <label class="label"><span class="label-text">Address line 1</span></label>
    <%= f.text_field :line1, class: "input input-bordered w-full" %>
  </div>

  <div class="md:col-span-3">
    <label class="label"><span class="label-text">Address line 2</span></label>
    <%= f.text_field :line2, class: "input input-bordered w-full" %>
  </div>

  <div class="md:col-span-3">
    <label class="label"><span class="label-text">Address line 3</span></label>
    <%= f.text_field :line3, class: "input input-bordered w-full" %>
  </div>

  <div class="md:col-span-2">
    <label class="label"><span class="label-text">City</span></label>
    <%= f.text_field :locality, class: "input input-bordered w-full" %>
  </div>

  <div>
    <label class="label"><span class="label-text">Postal code</span></label>
    <%= f.text_field :postal_code, class: "input input-bordered w-full" %>
  </div>

  <div class="md:col-span-6 flex items-center justify-between">
    <label class="label cursor-pointer gap-2">
      <%= f.check_box :is_primary, class: "checkbox" %>
      <span class="label-text">Primary</span>
    </label>

    <% if f.object.persisted? %>
      <% uid = "address_#{f.object.id}_destroy" %>
      <div>
        <%= f.check_box :_destroy, include_hidden: false, id: uid %>
        <%= f.label :_destroy, "Remove", for: uid, class: "text-sm" %>
      </div>
    <% else %>
      <%= f.hidden_field :_destroy, value: "0", id: nil %>
      <button type="button" class="btn btn-ghost btn-sm" data-action="nested-form#remove">Remove</button>
    <% end %>
  </div>
</div>

===== END:app/views/party/parties/_address_fields.html.erb =====

===== BEGIN:app/views/party/parties/edit.html.erb =====
<div class="p-6">
  <h1 class="text-2xl font-bold mb-4">Edit Party</h1>
  <%= render "form", party: @party %>
</div>

===== END:app/views/party/parties/edit.html.erb =====

===== BEGIN:app/views/party/parties/_email_fields.html.erb =====
<div class="grid md:grid-cols-5 gap-4">
  <div class="md:col-span-3">
    <label class="label"><span class="label-text">Email</span></label>
    <%= f.email_field :email, class: "input input-bordered w-full" %>
  </div>

  <div>
    <label class="label"><span class="label-text">Type</span></label>
    <%= f.collection_select :email_type_code, @email_types, :code, :name,
          { include_blank: "Select type" }, class: "select select-bordered w-full" %>
  </div>

  <div class="flex items-end">
    <label class="label cursor-pointer gap-2">
      <%= f.check_box :is_primary, class: "checkbox" %>
      <span class="label-text">Primary</span>
    </label>
  </div>

  <div class="md:col-span-5 text-right">
    <% if f.object.persisted? %>
      <% uid = "email_#{f.object.id}_destroy" %>
      <%= f.check_box :_destroy, include_hidden: false, id: uid %>
      <%= f.label :_destroy, "Remove", for: uid, class: "text-sm" %>
    <% else %>
      <%= f.hidden_field :_destroy, value: "0", id: nil %>
      <button type="button" class="btn btn-ghost btn-sm" data-action="nested-form#remove">Remove</button>
    <% end %>
  </div>
</div>

===== END:app/views/party/parties/_email_fields.html.erb =====

===== BEGIN:app/views/party/parties/_form.html.erb =====
<%# app/views/party/parties/_form.html.erb — DROP-IN CLEAN %>
<%= form_with model: @party,
      scope: :party_party,
      url: (@party.persisted? ? party_party_path(@party.public_id) : party_parties_path),
      data: { turbo: false },
      class: "space-y-6" do |f| %>

  <% if @party.errors.any? ||
        @party.person&.errors&.any? || @party.organization&.errors&.any? ||
        @party.addresses.any? { |a| a.errors.any? } ||
        @party.phones.any?   { |p| p.errors.any? } ||
        @party.emails.any?   { |e| e.errors.any? } %>
    <div class="alert alert-error">
      <div class="font-semibold">Please fix the errors below.</div>
      <ul class="mt-2 list-disc list-inside text-sm">
        <% @party.errors.full_messages.each { |m| %><li><%= m %></li><% } %>
        <% if @party.person %><% @party.person.errors.full_messages.each { |m| %><li>Person: <%= m %></li><% } %><% end %>
        <% if @party.organization %><% @party.organization.errors.full_messages.each { |m| %><li>Organization: <%= m %></li><% } %><% end %>
        <% @party.addresses.each_with_index { |a,i| a.errors.full_messages.each { |m| %><li>Address <%= i+1 %>: <%= m %></li><% } } %>
        <% @party.phones.each_with_index   { |p,i| p.errors.full_messages.each { |m| %><li>Phone <%= i+1 %>: <%= m %></li><% } } %>
        <% @party.emails.each_with_index   { |e,i| e.errors.full_messages.each { |m| %><li>Email <%= i+1 %>: <%= m %></li><% } } %>
      </ul>
    </div>
  <% end %>

  <%# === Identity ========================================================= %>
  <div class="card bg-base-100 shadow">
    <div class="card-body">
      <fieldset class="grid md:grid-cols-2 gap-4" data-controller="party-type">
        <legend class="text-base font-semibold mb-2">Identity</legend>

        <div>
          <label class="label"><span class="label-text">Party type</span></label>
          <%= f.select :party_type,
                options_for_select([["Person","person"],["Organization","organization"]], @party.party_type),
                {},
                class: "select select-bordered w-full max-w-xs",
                data: { party_type_target: "select", action: "change->party-type#change" } %>
        </div>

        <div>
          <label class="label"><span class="label-text">Tax ID</span></label>
          <%= f.password_field :tax_id,
                autocomplete: "off", inputmode: "numeric",
                class: "input input-bordered w-full",
                placeholder: "•••-••-••••" %>
          <p class="text-xs opacity-70 mt-1">Encrypted at rest. Leave blank to keep existing.</p>
        </div>

        <fieldset class="<%= @party.party_type=='organization' ? 'hidden' : '' %> md:col-span-2"
                  data-party-type-target="personSection">
          <legend class="text-sm font-semibold uppercase opacity-70 mb-2">Person</legend>
          <%= f.fields_for :person do |pf| %>
            <%= pf.hidden_field :_destroy, value: "0", data: { party_type_target: "personDestroy" } %>
            <div class="grid grid-cols-2 gap-3">
              <div class="col-span-2 md:col-span-1">
                <%= pf.label :courtesy_title, class: "label-text" %>
                <%= pf.text_field :courtesy_title, class: "input input-bordered w-full", autocapitalize: "words" %>
              </div>
              <div>
                <%= pf.label :first_name, class: "label-text" %>
                <%= pf.text_field :first_name, class: "input input-bordered w-full", autocomplete: "given-name", autocapitalize: "words" %>
              </div>
              <div>
                <%= pf.label :middle_name, class: "label-text" %>
                <%= pf.text_field :middle_name, class: "input input-bordered w-full", autocomplete: "additional-name", autocapitalize: "words" %>
              </div>
              <div>
                <%= pf.label :last_name, class: "label-text" %>
                <%= pf.text_field :last_name, class: "input input-bordered w-full", autocomplete: "family-name", autocapitalize: "words" %>
              </div>
              <div>
                <%= pf.label :name_suffix, class: "label-text" %>
                <%= pf.text_field :name_suffix, class: "input input-bordered w-full", autocomplete: "honorific-suffix" %>
              </div>
              <div class="col-span-2 md:col-span-1">
                <%= pf.label :date_of_birth, class: "label-text" %>
                <%= pf.date_field :date_of_birth, class: "input input-bordered w-full", autocomplete: "bday" %>
              </div>
            </div>
          <% end %>
        </fieldset>

        <fieldset class="<%= @party.party_type=='person' ? 'hidden' : '' %> md:col-span-2"
                  data-party-type-target="orgSection">
          <legend class="text-sm font-semibold uppercase opacity-70 mb-2">Organization</legend>
          <%= f.fields_for :organization do |of| %>
            <%= of.hidden_field :_destroy, value: "1", data: { party_type_target: "orgDestroy" } %>
            <div class="grid gap-3">
              <div>
                <%= of.label :legal_name, class: "label-text" %>
                <%= of.text_field :legal_name, class: "input input-bordered w-full", autocapitalize: "words" %>
              </div>
              <div>
                <%= of.label :operating_name, class: "label-text" %>
                <%= of.text_field :operating_name, class: "input input-bordered w-full", autocapitalize: "words" %>
              </div>
              <div class="grid grid-cols-2 gap-3">
                <div>
                  <%= of.label :organization_type_code, "Type", class: "label-text" %>
                  <%= of.text_field :organization_type_code, class: "input input-bordered w-full" %>
                </div>
                <div>
                  <%= of.label :formation_date, class: "label-text" %>
                  <%= of.date_field :formation_date, class: "input input-bordered w-full" %>
                </div>
              </div>
            </div>
          <% end %>
        </fieldset>
      </fieldset>
    </div>
  </div>

  <%# === Addresses ======================================================== %>
  <div class="card bg-base-100 shadow">
    <div class="card-body">
      <fieldset>
        <legend class="card-title text-base">Addresses</legend>
        <div class="flex justify-end mb-2">
          <%= button_tag "Add address", name: :add_address, value: "1", class: "btn btn-ghost btn-xs" %>
        </div>

        <ul role="list" class="space-y-3">
          <% @party.addresses.each do |a| %>
            <li class="border rounded-box p-3"
                data-controller="region-select"
                data-region-select-url-value="<%= ref_regions_path(format: :json) %>">
              <%= f.fields_for :addresses, a do |af| %>
                <div class="grid md:grid-cols-12 gap-3">
                  <div class="md:col-span-3">
                    <%= af.label :address_type_code, "Address type", class: "label-text" %>
                    <%= af.collection_select :address_type_code, @address_types, :code, :name,
                          { include_blank: true }, { class: "select select-bordered w-full" } %>
                  </div>

                  <div class="md:col-span-9">
                    <%= af.label :line1, class: "label-text" %>
                    <%= af.text_field :line1, class: "input input-bordered w-full",
                          placeholder: "Street address", autocomplete: "address-line1" %>
                  </div>

                  <div class="md:col-span-6">
                    <%= af.text_field :line2, placeholder: "Apt, suite, etc. (optional)",
                          class: "input input-bordered w-full", autocomplete: "address-line2" %>
                  </div>
                  <div class="md:col-span-6">
                    <%= af.text_field :line3, placeholder: "Attention / care of (optional)",
                          class: "input input-bordered w-full", autocomplete: "address-line3" %>
                  </div>

                  <div class="md:col-span-4">
                    <%= af.label :country_code, "Country", class: "label-text" %>
                    <%= af.collection_select :country_code, @countries, :code, :name,
                          { include_blank: true },
                          { class: "select select-bordered w-full",
                            data: { region_select_target: "country", action: "change->region-select#refresh" },
                            autocomplete: "country" } %>
                  </div>

                  <div class="md:col-span-4">
                    <%= af.label :region_code, "Region/State", class: "label-text" %>
                    <%= af.select :region_code,
                          options_for_select(regions_for(a.country_code), a.region_code),
                          { include_blank: true },
                          { class: "select select-bordered w-full",
                            data: { region_select_target: "region", selected: a.region_code },
                            autocomplete: "address-level1",
                            disabled: a.country_code.blank? } %>
                  </div>

                  <div class="md:col-span-4">
                    <%= af.label :city, "City", class: "label-text" %>
                    <%= af.text_field :locality, class: "input input-bordered w-full",
                          autocomplete: "address-level2" %>
                  </div>

                  <div class="md:col-span-4">
                    <%= af.label :postal_code, "Postal", class: "label-text" %>
                    <%= af.text_field :postal_code, class: "input input-bordered w-full",
                          inputmode: "numeric", autocomplete: "postal-code" %>
                  </div>

                  <div class="md:col-span-8 flex items-center gap-4 pt-1">
                    <label class="label cursor-pointer gap-2">
                      <%= af.check_box :is_primary, class: "checkbox" %><span class="label-text">Primary</span>
                    </label>
                    <label class="label cursor-pointer gap-2">
                      <%= af.check_box :_destroy, class: "checkbox" %><span class="label-text">Remove</span>
                    </label>
                  </div>
                </div>
              <% end %>
            </li>
          <% end %>
        </ul>
      </fieldset>
    </div>
  </div>

  <%# === Phones =========================================================== %>
  <div class="card bg-base-100 shadow">
    <div class="card-body">
      <fieldset>
        <legend class="card-title text-base">Phones</legend>
        <div class="flex justify-end mb-2">
          <%= button_tag "Add phone", name: :add_phone, value: "1", class: "btn btn-ghost btn-xs" %>
        </div>

        <ul role="list" class="space-y-3">
          <% @party.phones.each do |p| %>
            <li class="border rounded-box p-3">
              <%= f.fields_for :phones, p do |pf| %>
                <div class="grid md:grid-cols-5 gap-3">
                  <div>
                    <%= pf.label :phone_type_code, "Phone type", class: "label-text" %>
                    <%= pf.collection_select :phone_type_code, @phone_types, :code, :name,
                          { include_blank: true }, { class: "select select-bordered w-full" } %>
                  </div>
                  <div class="md:col-span-2">
                    <%= pf.label :phone_e164, "Phone", class: "label-text" %>
                    <%= pf.telephone_field :phone_e164, class: "input input-bordered w-full",
                          placeholder: "+15551234567", inputmode: "tel", autocomplete: "tel" %>
                  </div>
                  <div>
                    <%= pf.label :phone_ext, "Ext", class: "label-text" %>
                    <%= pf.text_field :phone_ext, class: "input input-bordered w-full", inputmode: "numeric" %>
                  </div>
                  <div class="flex items-center gap-4 pt-6">
                    <label class="label cursor-pointer gap-2">
                      <%= pf.check_box :consent_sms, class: "checkbox" %><span class="label-text">SMS consent</span>
                    </label>
                  </div>
                </div>
                <div class="mt-3 flex items-center gap-4">
                  <label class="label cursor-pointer gap-2">
                    <%= pf.check_box :is_primary, class: "checkbox" %><span class="label-text">Primary</span>
                  </label>
                  <label class="label cursor-pointer gap-2">
                    <%= pf.check_box :_destroy, class: "checkbox" %><span class="label-text">Remove</span>
                  </label>
                </div>
              <% end %>
            </li>
          <% end %>
        </ul>
      </fieldset>
    </div>
  </div>

  <%# === Emails =========================================================== %>
  <div class="card bg-base-100 shadow">
    <div class="card-body">
      <fieldset>
        <legend class="card-title text-base">Emails</legend>
        <div class="flex justify-end mb-2">
          <%= button_tag "Add email", name: :add_email, value: "1", class: "btn btn-ghost btn-xs" %>
        </div>

        <ul role="list" class="space-y-3">
          <% @party.emails.each do |e| %>
            <li class="border rounded-box p-3">
              <%= f.fields_for :emails, e do |ef| %>
                <div class="grid md:grid-cols-3 gap-3">
                  <div>
                    <%= ef.label :email_type_code, "Email type", class: "label-text" %>
                    <%= ef.collection_select :email_type_code, @email_types, :code, :name,
                          { include_blank: true }, { class: "select select-bordered w-full" } %>
                  </div>
                  <div class="md:col-span-2">
                    <%= ef.label :email, class: "label-text" %>
                    <%= ef.email_field :email, class: "input input-bordered w-full", autocomplete: "email" %>
                  </div>
                </div>
                <div class="mt-3 flex items-center gap-4">
                  <label class="label cursor-pointer gap-2">
                    <%= ef.check_box :is_primary, class: "checkbox" %><span class="label-text">Primary</span>
                  </label>
                  <label class="label cursor-pointer gap-2">
                    <%= ef.check_box :_destroy, class: "checkbox" %><span class="label-text">Remove</span>
                  </label>
                </div>
              <% end %>
            </li>
          <% end %>
        </ul>
      </fieldset>
    </div>
  </div>

  <%# === Actions ========================================================== %>
  <div class="flex items-center justify-end gap-2">
    <%= link_to "Cancel",
          (@party.persisted? ? party_party_path(@party.public_id) : party_parties_path),
          class: "btn btn-ghost" %>
    <%= f.submit(@party.persisted? ? "Update" : "Create", class: "btn btn-primary") %>
  </div>
<% end %>

===== END:app/views/party/parties/_form.html.erb =====

===== BEGIN:app/views/party/parties/index.html.erb =====
<%# app/views/party/parties/index.html.erb %>
<div class="flex items-center justify-between mb-4">
  <h1 class="text-2xl font-semibold">Parties</h1>
  <%= link_to "New Party", new_party_party_path, class: "btn btn-primary btn-sm" %>
</div>

<% if @parties.blank? %>
  <%= render "shared/empty_state",
      title: "No parties found",
      subtitle: "Search by name, email, or customer #.",
      cta: link_to("New Party", new_party_party_path, class: "btn btn-primary btn-sm") %>
<% else %>
  <div class="overflow-x-auto">
    <table class="table table-zebra">
    <thead>
      <tr>
        <th class="w-8"></th>
        <th><%= sort_link("Name", :name) %></th>
        <th><%= sort_link("Customer #", :customer_number) %></th>
        <th>Phone</th>
        <th><%= sort_link("City, Region", :updated_at) %></th> <!-- change later if you add sortable city -->
        <th class="w-0"></th>
      </tr>
    </thead>
      <tbody>
        <% @parties.each do |p| %>
          <% addr  = p.primary_address %>
          <% phone = p.primary_phone %>
          <tr>
            <td class="align-middle"><%= party_type_icon(p, size: 20) %></td>
            <td><%= link_to p.display_name, party_party_path(p), class: "link" %></td>
            <td class="font-mono"><%= p.customer_number.presence || "—" %></td>
            <td class="font-mono"><%= phone&.international_pretty || "—" %></td>
            <td><%= [addr&.locality, addr&.region_code].compact_blank.join(", ").presence || "—" %></td>
            <td class="text-right"><%= link_to "View", party_party_path(p), class: "btn btn-ghost btn-xs" %></td>
          </tr>
        <% end %>
      </tbody>
    </table>
  </div>
<% end %>

===== END:app/views/party/parties/index.html.erb =====

===== BEGIN:app/views/party/parties/new.html.erb =====
<div class="p-6">
  <h1 class="text-2xl font-bold mb-4">New Party</h1>
  <%= render "form", party: @party %>
</div>

===== END:app/views/party/parties/new.html.erb =====

===== BEGIN:app/views/party/parties/_organization.html.erb =====
<% o = party.organization %>
<% if o.present? %>
  <% display_name = o.operating_name.present? ? "#{o.legal_name} d/b/a #{o.operating_name}" : o.legal_name %>

  <div class="grid md:grid-cols-3 gap-4">
    <div class="md:col-span-3">
      <div class="label"><span class="label-text">Display name</span></div>
      <div><%= display_name %></div>
    </div>

    <div>
      <div class="label"><span class="label-text">Legal name</span></div>
      <div><%= o.legal_name %></div>
    </div>

    <div>
      <div class="label"><span class="label-text">Operating name (d/b/a)</span></div>
      <div><%= o.operating_name.presence || "—" %></div>
    </div>

    <div>
      <div class="label"><span class="label-text">Type</span></div>
      <div><%= o.organization_type_code %></div>
    </div>

    <div>
      <div class="label"><span class="label-text">Formation date</span></div>
      <div><%= o.formation_date %></div>
    </div>
  </div>
<% else %>
  <div class="text-sm opacity-70">No organization profile.</div>
<% end %>

===== END:app/views/party/parties/_organization.html.erb =====

===== BEGIN:app/views/party/parties/_person.html.erb =====
<% p = party.person %>
<% if p.present? %>
  <div class="grid md:grid-cols-3 gap-4">

    <div>
      <div class="label"><span class="label-text">Courtesy title</span></div>
      <div><%= p.courtesy_title.presence || "—" %></div>
    </div>

    <div>
      <div class="label"><span class="label-text">First name</span></div>
      <div><%= p.first_name %></div>
    </div>

    <div>
      <div class="label"><span class="label-text">Middle name</span></div>
      <div><%= p.middle_name.presence || "—" %></div>
    </div>

    <div>
      <div class="label"><span class="label-text">Last name</span></div>
      <div><%= p.last_name %></div>
    </div>

    <div>
      <div class="label"><span class="label-text">Suffix</span></div>
      <div><%= p.name_suffix.presence || "—" %></div>
    </div>

    <div>
      <div class="label"><span class="label-text">Date of birth</span></div>
      <div><%= p.date_of_birth&.strftime("%Y-%m-%d") || "—" %></div>
    </div>

  </div>
<% else %>
  <div class="text-sm opacity-70">No person profile.</div>
<% end %>

===== END:app/views/party/parties/_person.html.erb =====

===== BEGIN:app/views/party/parties/_phone_fields.html.erb =====
<!-- app/views/party/parties/_phone_fields.html.erb -->
<div class="grid md:grid-cols-6 gap-4">
  <div>
    <label class="label"><span class="label-text">Type</span></label>
    <%= f.collection_select :phone_type_code, @phone_types, :code, :name,
          { include_blank: "Select type" }, class: "select select-bordered w-full" %>
  </div>

  <div>
    <label class="label"><span class="label-text">Country</span></label>
    <%= f.select :country_alpha2, phone_country_options,
          { selected: (f.object.try(:country_alpha2).presence || "US") },
          class: "select select-bordered w-full" %>
  </div>

  <div class="md:col-span-2">
    <label class="label"><span class="label-text">Number</span></label>
    <%= f.text_field :number_raw, class: "input input-bordered w-full",
          placeholder: "(555) 123-4567 x123" %>
  </div>

  <div>
    <label class="label"><span class="label-text">Ext</span></label>
    <%= f.text_field :phone_ext, class: "input input-bordered w-full" %>
  </div>

  <div class="flex items-end gap-4">
    <label class="label cursor-pointer gap-2">
      <%= f.check_box :is_primary, class: "checkbox" %>
      <span class="label-text">Primary</span>
    </label>
    <label class="label cursor-pointer gap-2">
      <%= f.check_box :consent_sms, class: "checkbox" %>
      <span class="label-text">SMS consent</span>
    </label>
  </div>

  <div class="md:col-span-6 text-right">
    <% if f.object.persisted? %>
      <% uid = "phone_#{f.object.id}_destroy" %>
      <%= f.check_box :_destroy, include_hidden: false, id: uid %>
      <%= f.label :_destroy, "Remove", for: uid, class: "text-sm" %>
    <% else %>
      <%= f.hidden_field :_destroy, value: "0", id: nil %>
      <button type="button" class="btn btn-ghost btn-sm" data-action="nested-form#remove">Remove</button>
    <% end %>
  </div>
</div>

===== END:app/views/party/parties/_phone_fields.html.erb =====

===== BEGIN:app/views/party/parties/show.html.erb =====
<%# ===== Page header + modal mount ===== %>
<div data-controller="modal" data-modal-id-value="comm-modal">
  <%= render "shared/modal" %>

  <div class="flex items-center justify-between mb-6">
    <div>
      <h1 class="text-2xl md:text-3xl font-semibold"><%= @party.display_name %></h1>
      <div class="mt-2 flex flex-wrap gap-2 text-sm">
        <span class="badge badge-outline"><%= @party.party_type %></span>
        <% if @party.customer_number.present? %>
          <span class="badge badge-outline">
            Customer # <%= @party.customer_number %>
          </span>
          <button
            class="btn btn-ghost btn-xs focus-visible:outline focus-visible:outline-2"
            data-controller="copy"
            data-copy-text-value="<%= @party.customer_number %>"
            data-action="copy#copy"
            aria-label="Copy customer number">
            Copy
          </button>
        <% end %>
        <span class="badge badge-ghost">Updated <%= l(@party.updated_at, format: :short) %></span>
      </div>
    </div>
    <div class="flex gap-2">
      <%= link_to "Edit", edit_party_party_path(@party.public_id), class: "btn btn-ghost btn-sm" %>
      <button class="btn btn-error btn-soft btn-sm"
              onclick="document.getElementById('confirm-delete').showModal()"
              aria-label="Delete party">
        Delete
      </button>
      <%= link_to "Back", party_parties_path, class: "btn btn-ghost btn-sm" %>
    </div>
  </div>

  <%# ===== Two-column layout ===== %>
  <div class="grid md:grid-cols-2 gap-4">
    <%# --- Left: Identity card --- %>
    <div class="card bg-base-100 shadow">
      <div class="card-body">
        <h2 class="card-title text-base">Identity</h2>

        <dl class="divide-y divide-base-200">
          <% if @party.person %>
            <div class="py-2 grid grid-cols-3 gap-2">
              <dt class="opacity-70">Name</dt>
              <dd class="col-span-2">
                <%= [@party.person.first_name, @party.person.middle_name, @party.person.last_name, @party.person.name_suffix].compact_blank.join(" ") %>
              </dd>
            </div>
            <% if @party.person.courtesy_title.present? %>
              <div class="py-2 grid grid-cols-3 gap-2">
                <dt class="opacity-70">Title</dt>
                <dd class="col-span-2"><%= @party.person.courtesy_title %></dd>
              </div>
            <% end %>
            <% if @party.person.date_of_birth.present? %>
              <div class="py-2 grid grid-cols-3 gap-2">
                <dt class="opacity-70">DOB</dt>
                <dd class="col-span-2"><%= @party.person&.date_of_birth&.to_fs(:mmm_d_yyyy) %></dd>
              </div>
            <% end %>
          <% elsif @party.organization %>
            <div class="py-2 grid grid-cols-3 gap-2">
              <dt class="opacity-70">Legal name</dt>
              <dd class="col-span-2"><%= @party.organization.legal_name %></dd>
            </div>
            <% if @party.organization.operating_name.present? %>
              <div class="py-2 grid grid-cols-3 gap-2">
                <dt class="opacity-70">DBA</dt>
                <dd class="col-span-2"><%= @party.organization.operating_name %></dd>
              </div>
            <% end %>
            <% if @party.organization.organization_type_code.present? %>
              <div class="py-2 grid grid-cols-3 gap-2">
                <dt class="opacity-70">Type</dt>
                <dd class="col-span-2"><span class="badge badge-outline"><%= @party.organization.organization_type_code %></span></dd>
              </div>
            <% end %>
            <% if @party.organization.formation_date.present? %>
              <div class="py-2 grid grid-cols-3 gap-2">
                <dt class="opacity-70">Formed</dt>
                <dd class="col-span-2"><%= @party.organization.formation_date&.to_fs(:mmm_d_yyyy) %></dd>
              </div>
            <% end %>
          <% else %>
            <div class="py-2 text-sm opacity-70">No identity details</div>
          <% end %>

          <%# Tax ID with Reveal %>
          <div class="py-2 grid grid-cols-3 gap-2 items-center"
               data-controller="reveal"
               data-reveal-url-value="<%= reveal_tax_id_party_party_path(@party.public_id) %>">
            <dt class="opacity-70">Tax ID</dt>
            <dd class="col-span-2">
              <span class="font-mono" data-reveal-target="text" aria-live="polite">
                <%= mask_tax_id(@party.tax_id) %>
              </span>
              <button class="btn btn-xs btn-outline ml-2" data-reveal-target="button" data-action="reveal#reveal">Reveal</button>
              <span class="loading loading-spinner loading-xs hidden align-middle ml-2" data-reveal-target="spinner"></span>
            </dd>
          </div>
        </dl>
      </div>
    </div>

    <%# --- Right: Communications via modal lists --- %>
    <div class="flex flex-col gap-4">
      <div class="grid gap-8">
        <%= render "party/emails/list",    party: @party %>
        <%= render "party/phones/list",    party: @party %>
        <%= render "party/addresses/list", party: @party %>
      </div>
    </div>
  </div>

  <%# ===== Delete dialog (unchanged) ===== %>
  <dialog id="confirm-delete" class="modal">
    <div class="modal-box">
      <h3 class="font-bold text-lg">Delete party?</h3>
      <p class="py-2">This cannot be undone.</p>
      <div class="modal-action">
        <form method="dialog">
          <button class="btn btn-ghost">Cancel</button>
        </form>
        <%= button_to "Delete",
              party_party_path(@party.public_id),
              method: :delete,
              form: { class: "inline" },
              class: "btn btn-error",
              data: { turbo_confirm: nil },
              aria: { label: "Confirm delete" } %>
      </div>
    </div>
    <form method="dialog" class="modal-backdrop">
      <button aria-label="Close modal">close</button>
    </form>
  </dialog>
</div>

===== END:app/views/party/parties/show.html.erb =====

===== BEGIN:app/views/party/phones/_card.html.erb =====
<div class="card card-border p-3 flex items-center justify-between">
  <div>
    <div class="font-medium"><%= phone.phone_type_code&.titleize %></div>
    <div class="opacity-80">
      <%= phone.phone_e164.presence || phone.number_raw %><%=
        phone.phone_ext.present? ? " x#{phone.phone_ext}" : "" %>
    </div>
    <div class="flex gap-2 mt-1">
      <% if phone.is_primary %><span class="badge badge-primary">Primary</span><% end %>
      <% if phone.consent_sms %><span class="badge">SMS</span><% end %>
    </div>
  </div>

  <div class="flex gap-2">
    <%= button_to "Primary",
      primary_party_party_phone_path(party.public_id, phone),
      method: :patch,
      class: "btn btn-soft btn-sm" %>

    <%= link_to "Edit",
      edit_party_party_phone_path(party.public_id, phone, from: :show),
      data: { turbo_frame: "comm_modal_frame", action: "click->modal#open" },
      class: "btn btn-soft btn-sm" %>

    <%= button_to "Delete",
      party_party_phone_path(party.public_id, phone),
      method: :delete,
      form: { data: { turbo_confirm: "Delete this phone?" } },
      class: "btn btn-error btn-soft btn-sm" %>
  </div>
</div>

===== END:app/views/party/phones/_card.html.erb =====

===== BEGIN:app/views/party/phones/edit.html.erb =====
<!-- app/views/party/emails/edit.html.erb -->
<turbo-frame id="comm_modal_frame">
  <%= render "form", party: @party, phone: @phone %>
</turbo-frame>
===== END:app/views/party/phones/edit.html.erb =====

===== BEGIN:app/views/party/phones/_form.html.erb =====
<!-- app/views/party/phones/_form.html.erb -->
<%= form_with scope: :party_phone,
      url: (@phone.persisted? ?
              party_party_phone_path(@party.public_id, @phone) :
              party_party_phones_path(@party.public_id)),
      data: { turbo_frame: "comm_modal_frame" } do |f| %>
  <div class="grid gap-3">
    <div class="select"><%= f.select :phone_type_code, options_for_select(%w[mobile home work fax other], phone.phone_type_code) %></div>
    <div class="input"><%= f.telephone_field :phone_e164, placeholder: "+15551234567" %></div>
    <div class="input"><%= f.text_field :phone_ext, placeholder: "ext" %></div>
    <label class="flex items-center gap-2"><%= f.check_box :consent_sms %> SMS consent</label>
    <label class="flex items-center gap-2"><%= f.check_box :is_primary %> Primary</label>
  </div>
  <div class="mt-4 flex justify-end gap-2">
    <button type="button" class="btn btn-soft" data-action="modal#close">Cancel</button>
    <%= f.submit "Save", class: "btn btn-primary" %>
  </div>
<% end %>
===== END:app/views/party/phones/_form.html.erb =====

===== BEGIN:app/views/party/phones/_list.html.erb =====
<!-- app/views/party/phones/_list.html.erb -->
<section>
  <div class="flex items-center justify-between mb-2">
    <h3 class="text-lg font-semibold">Phones</h3>
    <%= link_to "Add",
        new_party_party_phone_path(party.public_id, from: :show),
        data: { turbo_frame: "comm_modal_frame", action: "click->modal#open" },
        class: "btn btn-primary btn-sm" %>
  </div>
  <div id="<%= dom_id(party, :phones_list) %>" class="grid gap-3">
    <% party.phones.each do |phone| %>
      <%= render "party/phones/card", party: party, phone: phone %>
    <% end %>
  </div>
</section>

===== END:app/views/party/phones/_list.html.erb =====

===== BEGIN:app/views/party/phones/new.html.erb =====
<!-- app/views/party/emails/new.html.erb -->
<turbo-frame id="comm_modal_frame">
  <%= render "form", party: @party, phone: @phone %>
</turbo-frame>

<!-- app/views/party/emails/edit.html.erb -->
<turbo-frame id="comm_modal_frame">
  <%= render "form", party: @party, phone: @phone %>
</turbo-frame>

===== END:app/views/party/phones/new.html.erb =====

===== BEGIN:app/views/pwa/manifest.json.erb =====
{
  "name": "Betest",
  "icons": [
    {
      "src": "/icon.png",
      "type": "image/png",
      "sizes": "512x512"
    },
    {
      "src": "/icon.png",
      "type": "image/png",
      "sizes": "512x512",
      "purpose": "maskable"
    }
  ],
  "start_url": "/",
  "display": "standalone",
  "scope": "/",
  "description": "Betest.",
  "theme_color": "red",
  "background_color": "red"
}

===== END:app/views/pwa/manifest.json.erb =====

===== BEGIN:app/views/pwa/service-worker.js =====
// Add a service worker for processing Web Push notifications:
//
// self.addEventListener("push", async (event) => {
//   const { title, options } = await event.data.json()
//   event.waitUntil(self.registration.showNotification(title, options))
// })
//
// self.addEventListener("notificationclick", function(event) {
//   event.notification.close()
//   event.waitUntil(
//     clients.matchAll({ type: "window" }).then((clientList) => {
//       for (let i = 0; i < clientList.length; i++) {
//         let client = clientList[i]
//         let clientPath = (new URL(client.url)).pathname
//
//         if (clientPath == event.notification.data.path && "focus" in client) {
//           return client.focus()
//         }
//       }
//
//       if (clients.openWindow) {
//         return clients.openWindow(event.notification.data.path)
//       }
//     })
//   )
// })

===== END:app/views/pwa/service-worker.js =====

===== BEGIN:app/views/shared/_brand.html.erb =====
<div class="flex items-center gap-2">
  <%# optional logo %>
  <%# <%= image_tag "logo.svg", alt: "", class: "h-6 w-6" %> %>
  <%= link_to "BankEncoRRe", root_path, class: "text-lg font-semibold" %>
</div>

===== END:app/views/shared/_brand.html.erb =====

===== BEGIN:app/views/shared/_close_modal.turbo_stream.html.erb =====
<!-- app/views/shared/_close_modal.turbo_stream.erb -->
<turbo-stream action="remove" target="comm_modal_frame"></turbo-stream>
<script>document.getElementById("comm-modal")?.close()</script>

===== END:app/views/shared/_close_modal.turbo_stream.html.erb =====

===== BEGIN:app/views/shared/_empty_state.html.erb =====
<div class="text-center p-10 border border-dashed rounded-box">
  <div class="text-3xl mb-2">📄</div>
  <div class="font-medium mb-1"><%= title || "No results" %></div>
  <p class="opacity-70 mb-3"><%= subtitle || "Try a different search term." %></p>
  <%= cta if defined?(cta) && cta %>
</div>

===== END:app/views/shared/_empty_state.html.erb =====

===== BEGIN:app/views/shared/_flash.html.erb =====
<% flash.each do |type, msg| %>
  <% tone = { notice: "info", alert: "warning", error: "error", success: "success" }[type.to_sym] || "info" %>
  <div class="alert alert-<%= tone %> mb-3"><%= msg %></div>
<% end %>

===== END:app/views/shared/_flash.html.erb =====

===== BEGIN:app/views/shared/_logo.html.erb =====
<!-- app/views/shared/_logo.html.erb -->
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 160 32"
     class="h-8 w-auto select-none" role="img" aria-label="BankEncoRRe">
  <title>BankEncoRRe</title>

  <!-- Mark (shield) uses primary -->
  <g class="text-primary" fill="currentColor">
    <!-- shield -->
    <path d="M16 2c5 2 10 2 14 3v9c0 8-8 13-14 16C10 27 2 22 2 14V5c4-1 9-1 14-3Z"/>
    <!-- columns (cutouts) -->
    <g class="text-base-100" fill="currentColor">
      <rect x="10" y="9" width="2.5" height="11" rx="1"/>
      <rect x="15" y="7.5" width="2.5" height="12.5" rx="1"/>
      <rect x="20" y="9" width="2.5" height="11" rx="1"/>
    </g>
    <!-- accent stripe -->
    <rect x="8" y="6" width="17" height="1.6" rx="0.8" class="text-accent" fill="currentColor"/>
  </g>

  <!-- Wordmark uses base-content -->
  <g class="text-base-content" fill="currentColor" transform="translate(40,2)">
    <!-- simple, legible geometric wordmark -->
    <text x="0" y="22" font-family="ui-sans-serif, system-ui, sans-serif"
          font-size="16" font-weight="700" letter-spacing="0.5">
      BankEncoRRe
    </text>
  </g>
</svg>
===== END:app/views/shared/_logo.html.erb =====

===== BEGIN:app/views/shared/_logo_mark_only.hrml.erb =====
<!-- app/views/shared/_logo_mark_only.html.erb -->
<svg viewBox="0 0 32 32" class="h-8 w-8 text-primary" aria-label="BankEncoRRe mark">
  <title>BankEncoRRe</title>
  <path d="M16 2c5 2 10 2 14 3v9c0 8-8 13-14 16C10 27 2 22 2 14V5c4-1 9-1 14-3Z" fill="currentColor"/>
  <g class="text-base-100" fill="currentColor">
    <rect x="10" y="9" width="2.5" height="11" rx="1"/>
    <rect x="15" y="7.5" width="2.5" height="12.5" rx="1"/>
    <rect x="20" y="9" width="2.5" height="11" rx="1"/>
  </g>
  <rect x="8" y="6" width="17" height="1.6" rx="0.8" class="text-accent" fill="currentColor"/>
</svg>
===== END:app/views/shared/_logo_mark_only.hrml.erb =====

===== BEGIN:app/views/shared/_modal.html.erb =====
<!-- app/views/shared/_modal.html.erb -->
<dialog id="comm-modal" class="modal">
  <div class="modal-box">
    <turbo-frame id="comm_modal_frame"></turbo-frame>
    <div class="mt-4 flex justify-end gap-2">
      <form method="dialog"><button class="btn btn-soft">Close</button></form>
    </div>
  </div>
  <form method="dialog" class="modal-backdrop"><button>close</button></form>
</dialog>

===== END:app/views/shared/_modal.html.erb =====

===== BEGIN:app/views/shared/_user_menu.html.erb =====
<div class="dropdown dropdown-end">
  <div tabindex="0" role="button" class="btn btn-ghost btn-sm">User</div>
  <ul tabindex="0" class="dropdown-content menu bg-base-100 rounded-box shadow p-2 w-52">
    <li><%= link_to "Profile", "#" %></li>
    <li><%= link_to "Sign out", destroy_user_session_path, data: { turbo_method: :delete } %></li>
  </ul>
</div>

===== END:app/views/shared/_user_menu.html.erb =====

===== BEGIN:config/application.rb =====
require_relative "boot"

require "rails/all"

# Require the gems listed in Gemfile, including any gems
# you've limited to :test, :development, or :production.
Bundler.require(*Rails.groups)

module Betest
  class Application < Rails::Application
    # Initialize configuration defaults for originally generated Rails version.
    config.load_defaults 8.0

    # Please, add to the `ignore` list any other `lib` subdirectories that do
    # not contain `.rb` files, or that should not be reloaded or eager loaded.
    # Common ones are `templates`, `generators`, or `middleware`, for example.
    config.autoload_lib(ignore: %w[assets tasks])

    # Configuration for the application, engines, and railties goes here.
    #
    # These settings can be overridden in specific environments using the files
    # in config/environments, which are processed later.
    #
    # config.time_zone = "Central Time (US & Canada)"
    # config.eager_load_paths << Rails.root.join("extras")
    config.active_job.queue_adapter = :sidekiq
  end
end

===== END:config/application.rb =====

===== BEGIN:config/boot.rb =====
ENV["BUNDLE_GEMFILE"] ||= File.expand_path("../Gemfile", __dir__)

require "bundler/setup" # Set up gems listed in the Gemfile.
require "bootsnap/setup" # Speed up boot time by caching expensive operations.

===== END:config/boot.rb =====

===== BEGIN:config/cable.yml =====
# Async adapter only works within the same process, so for manually triggering cable updates from a console,
# and seeing results in the browser, you must do so from the web console (running inside the dev process),
# not a terminal started via bin/rails console! Add "console" to any action or any ERB template view
# to make the web console appear.
development:
  adapter: async

test:
  adapter: test

production:
  adapter: solid_cable
  connects_to:
    database:
      writing: cable
  polling_interval: 0.1.seconds
  message_retention: 1.day

===== END:config/cable.yml =====

===== BEGIN:config/cache.yml =====
default: &default
  store_options:
    # Cap age of oldest cache entry to fulfill retention policies
    # max_age: <%= 60.days.to_i %>
    max_size: <%= 256.megabytes %>
    namespace: <%= Rails.env %>

development:
  <<: *default

test:
  <<: *default

production:
  database: cache
  <<: *default

===== END:config/cache.yml =====

===== BEGIN:config/database.yml =====
default: &default
  adapter: mysql2
  encoding: utf8mb4
  host: <%= ENV.fetch("DB_HOST", "127.0.0.1") %>
  port: <%= ENV.fetch("DB_PORT", 3306) %>
  username: <%= ENV.fetch("DB_USER", "bankencorre") %>
  password: <%= ENV.fetch("DB_PASSWORD", "") %>
  pool: <%= ENV.fetch("RAILS_MAX_THREADS", 5) %>

development:
  <<: *default
  database: <%= ENV.fetch("DB_NAME", "bankencorre_development") %>

test:
  <<: *default
  database: <%= ENV.fetch("DB_NAME_TEST", "bankencorre_test") %>

production:
  <<: *default
  database: <%= ENV["DB_NAME_PROD"] || ENV["DB_NAME"] || "bankencorre_production" %>
  username: <%= ENV["DB_USER_PROD"] || ENV["DB_USER"] || "bankencorre" %>
  password: <%= ENV["DB_PASSWORD_PROD"] || ENV["DB_PASSWORD"] %>

===== END:config/database.yml =====

===== BEGIN:config/deploy.yml =====
# Name of your application. Used to uniquely configure containers.
service: betest

# Name of the container image.
image: your-user/betest

# Deploy to these servers.
servers:
  web:
    - 192.168.0.1
  # job:
  #   hosts:
  #     - 192.168.0.1
  #   cmd: bin/jobs

# Enable SSL auto certification via Let's Encrypt and allow for multiple apps on a single web server.
# Remove this section when using multiple web servers and ensure you terminate SSL at your load balancer.
#
# Note: If using Cloudflare, set encryption mode in SSL/TLS setting to "Full" to enable CF-to-app encryption.
proxy:
  ssl: true
  host: app.example.com

# Credentials for your image host.
registry:
  # Specify the registry server, if you're not using Docker Hub
  # server: registry.digitalocean.com / ghcr.io / ...
  username: your-user

  # Always use an access token rather than real password when possible.
  password:
    - KAMAL_REGISTRY_PASSWORD

# Inject ENV variables into containers (secrets come from .kamal/secrets).
env:
  secret:
    - RAILS_MASTER_KEY
  clear:
    # Run the Solid Queue Supervisor inside the web server's Puma process to do jobs.
    # When you start using multiple servers, you should split out job processing to a dedicated machine.
    SOLID_QUEUE_IN_PUMA: true

    # Set number of processes dedicated to Solid Queue (default: 1)
    # JOB_CONCURRENCY: 3

    # Set number of cores available to the application on each server (default: 1).
    # WEB_CONCURRENCY: 2

    # Match this to any external database server to configure Active Record correctly
    # Use betest-db for a db accessory server on same machine via local kamal docker network.
    # DB_HOST: 192.168.0.2

    # Log everything from Rails
    # RAILS_LOG_LEVEL: debug

# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal logs -r job" will tail logs from the first server in the job section.
aliases:
  console: app exec --interactive --reuse "bin/rails console"
  shell: app exec --interactive --reuse "bash"
  logs: app logs -f
  dbc: app exec --interactive --reuse "bin/rails dbconsole"


# Use a persistent storage volume for sqlite database files and local Active Storage files.
# Recommended to change this to a mounted volume path that is backed up off server.
volumes:
  - "betest_storage:/rails/storage"


# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
asset_path: /rails/public/assets

# Configure the image builder.
builder:
  arch: amd64

  # # Build image via remote server (useful for faster amd64 builds on arm64 computers)
  # remote: ssh://docker@docker-builder-server
  #
  # # Pass arguments and secrets to the Docker build process
  # args:
  #   RUBY_VERSION: ruby-3.4.5
  # secrets:
  #   - GITHUB_TOKEN
  #   - RAILS_MASTER_KEY

# Use a different ssh user than root
# ssh:
#   user: app

# Use accessory services (secrets come from .kamal/secrets).
# accessories:
#   db:
#     image: mysql:8.0
#     host: 192.168.0.2
#     # Change to 3306 to expose port to the world instead of just local network.
#     port: "127.0.0.1:3306:3306"
#     env:
#       clear:
#         MYSQL_ROOT_HOST: '%'
#       secret:
#         - MYSQL_ROOT_PASSWORD
#     files:
#       - config/mysql/production.cnf:/etc/mysql/my.cnf
#       - db/production.sql:/docker-entrypoint-initdb.d/setup.sql
#     directories:
#       - data:/var/lib/mysql
#   redis:
#     image: redis:7.0
#     host: 192.168.0.2
#     port: 6379
#     directories:
#       - data:/data

===== END:config/deploy.yml =====

===== BEGIN:config/environment.rb =====
# Load the Rails application.
require_relative "application"

# Initialize the Rails application.
Rails.application.initialize!

===== END:config/environment.rb =====

===== BEGIN:config/environments/development.rb =====
require "active_support/core_ext/integer/time"

Rails.application.configure do
  # Settings specified here will take precedence over those in config/application.rb.

  # Make code changes take effect immediately without server restart.
  config.enable_reloading = true

  # Do not eager load code on boot.
  config.eager_load = false

  # Show full error reports.
  config.consider_all_requests_local = true

  # Enable server timing.
  config.server_timing = true

  # Enable/disable Action Controller caching. By default Action Controller caching is disabled.
  # Run rails dev:cache to toggle Action Controller caching.
  if Rails.root.join("tmp/caching-dev.txt").exist?
    config.action_controller.perform_caching = true
    config.action_controller.enable_fragment_cache_logging = true
    config.public_file_server.headers = { "cache-control" => "public, max-age=#{2.days.to_i}" }
  else
    config.action_controller.perform_caching = false
  end

  # Change to :null_store to avoid any caching.
  config.cache_store = :memory_store

  # Store uploaded files on the local file system (see config/storage.yml for options).
  config.active_storage.service = :local

  # Don't care if the mailer can't send.
  config.action_mailer.raise_delivery_errors = false

  # Make template changes take effect immediately.
  config.action_mailer.perform_caching = false

  # Set localhost to be used by links generated in mailer templates.
  config.action_mailer.default_url_options = { host: "localhost", port: 3000 }

  # Print deprecation notices to the Rails logger.
  config.active_support.deprecation = :log

  # Raise an error on page load if there are pending migrations.
  config.active_record.migration_error = :page_load

  # Highlight code that triggered database queries in logs.
  config.active_record.verbose_query_logs = true

  # Append comments with runtime information tags to SQL queries in logs.
  config.active_record.query_log_tags_enabled = true

  # Highlight code that enqueued background job in logs.
  config.active_job.verbose_enqueue_logs = true

  # Raises error for missing translations.
  # config.i18n.raise_on_missing_translations = true

  # Annotate rendered view with file names.
  config.action_view.annotate_rendered_view_with_filenames = true

  # Uncomment if you wish to allow Action Cable access from any origin.
  # config.action_cable.disable_request_forgery_protection = true

  # Raise error when a before_action's only/except options reference missing actions.
  config.action_controller.raise_on_missing_callback_actions = true

  # Apply autocorrection by RuboCop to files generated by `bin/rails generate`.
  # config.generators.apply_rubocop_autocorrect_after_generate!
  
end

===== END:config/environments/development.rb =====

===== BEGIN:config/environments/production.rb =====
require "active_support/core_ext/integer/time"

Rails.application.configure do
  # Settings specified here will take precedence over those in config/application.rb.

  # Code is not reloaded between requests.
  config.enable_reloading = false

  # Eager load code on boot for better performance and memory savings (ignored by Rake tasks).
  config.eager_load = true

  # Full error reports are disabled.
  config.consider_all_requests_local = false

  # Turn on fragment caching in view templates.
  config.action_controller.perform_caching = true

  # Cache assets for far-future expiry since they are all digest stamped.
  config.public_file_server.headers = { "cache-control" => "public, max-age=#{1.year.to_i}" }

  # Enable serving of images, stylesheets, and JavaScripts from an asset server.
  # config.asset_host = "http://assets.example.com"

  # Store uploaded files on the local file system (see config/storage.yml for options).
  config.active_storage.service = :local

  # Assume all access to the app is happening through a SSL-terminating reverse proxy.
  config.assume_ssl = true

  # Force all access to the app over SSL, use Strict-Transport-Security, and use secure cookies.
  config.force_ssl = true

  # Skip http-to-https redirect for the default health check endpoint.
  # config.ssl_options = { redirect: { exclude: ->(request) { request.path == "/up" } } }

  # Log to STDOUT with the current request id as a default log tag.
  config.log_tags = [ :request_id ]
  config.logger   = ActiveSupport::TaggedLogging.logger(STDOUT)

  # Change to "debug" to log everything (including potentially personally-identifiable information!)
  config.log_level = ENV.fetch("RAILS_LOG_LEVEL", "info")

  # Prevent health checks from clogging up the logs.
  config.silence_healthcheck_path = "/up"

  # Don't log any deprecations.
  config.active_support.report_deprecations = false

  # Replace the default in-process memory cache store with a durable alternative.
  config.cache_store = :solid_cache_store

  # Replace the default in-process and non-durable queuing backend for Active Job.
  config.active_job.queue_adapter = :sidekiq
  config.solid_queue.connects_to = { database: { writing: :queue } }

  # Ignore bad email addresses and do not raise email delivery errors.
  # Set this to true and configure the email server for immediate delivery to raise delivery errors.
  # config.action_mailer.raise_delivery_errors = false

  # Set host to be used by links generated in mailer templates.
  config.action_mailer.default_url_options = { host: "example.com" }

  # Specify outgoing SMTP server. Remember to add smtp/* credentials via rails credentials:edit.
  # config.action_mailer.smtp_settings = {
  #   user_name: Rails.application.credentials.dig(:smtp, :user_name),
  #   password: Rails.application.credentials.dig(:smtp, :password),
  #   address: "smtp.example.com",
  #   port: 587,
  #   authentication: :plain
  # }

  # Enable locale fallbacks for I18n (makes lookups for any locale fall back to
  # the I18n.default_locale when a translation cannot be found).
  config.i18n.fallbacks = true

  # Do not dump schema after migrations.
  config.active_record.dump_schema_after_migration = false

  # Only use :id for inspections in production.
  config.active_record.attributes_for_inspect = [ :id ]

  # Enable DNS rebinding protection and other `Host` header attacks.
  # config.hosts = [
  #   "example.com",     # Allow requests from example.com
  #   /.*\.example\.com/ # Allow requests from subdomains like `www.example.com`
  # ]
  #
  # Skip DNS rebinding protection for the default health check endpoint.
  # config.host_authorization = { exclude: ->(request) { request.path == "/up" } }
end

===== END:config/environments/production.rb =====

===== BEGIN:config/environments/test.rb =====
# The test environment is used exclusively to run your application's
# test suite. You never need to work with it otherwise. Remember that
# your test database is "scratch space" for the test suite and is wiped
# and recreated between test runs. Don't rely on the data there!

Rails.application.configure do
  # Settings specified here will take precedence over those in config/application.rb.

  # While tests run files are not watched, reloading is not necessary.
  config.enable_reloading = false

  # Eager loading loads your entire application. When running a single test locally,
  # this is usually not necessary, and can slow down your test suite. However, it's
  # recommended that you enable it in continuous integration systems to ensure eager
  # loading is working properly before deploying your code.
  config.eager_load = ENV["CI"].present?

  # Configure public file server for tests with cache-control for performance.
  config.public_file_server.headers = { "cache-control" => "public, max-age=3600" }

  # Show full error reports.
  config.consider_all_requests_local = true
  config.cache_store = :null_store

  # Render exception templates for rescuable exceptions and raise for other exceptions.
  config.action_dispatch.show_exceptions = :rescuable

  # Disable request forgery protection in test environment.
  config.action_controller.allow_forgery_protection = false

  # Store uploaded files on the local file system in a temporary directory.
  config.active_storage.service = :test

  # Tell Action Mailer not to deliver emails to the real world.
  # The :test delivery method accumulates sent emails in the
  # ActionMailer::Base.deliveries array.
  config.action_mailer.delivery_method = :test

  # Set host to be used by links generated in mailer templates.
  config.action_mailer.default_url_options = { host: "example.com" }

  # Print deprecation notices to the stderr.
  config.active_support.deprecation = :stderr

  # Raises error for missing translations.
  # config.i18n.raise_on_missing_translations = true

  # Annotate rendered view with file names.
  # config.action_view.annotate_rendered_view_with_filenames = true

  # Raise error when a before_action's only/except options reference missing actions.
  config.action_controller.raise_on_missing_callback_actions = true
end

===== END:config/environments/test.rb =====

===== BEGIN:config/importmap.rb =====
pin "application"
pin "@hotwired/turbo-rails", to: "turbo.min.js"
pin "@hotwired/stimulus", to: "stimulus.min.js"
pin "@hotwired/stimulus-loading", to: "stimulus-loading.js"
pin "controllers", to: "controllers/index.js"
pin_all_from "app/javascript/controllers", under: "controllers"

===== END:config/importmap.rb =====

===== BEGIN:config/initializers/active_record_encryption.rb =====
cfg = Rails.application.config.active_record.encryption
cfg.primary_key         = ENV["ACTIVE_RECORD_ENCRYPTION_PRIMARY_KEY"]
cfg.deterministic_key   = ENV["ACTIVE_RECORD_ENCRYPTION_DETERMINISTIC_KEY"]
cfg.key_derivation_salt = ENV["ACTIVE_RECORD_ENCRYPTION_KEY_DERIVATION_SALT"]

===== END:config/initializers/active_record_encryption.rb =====

===== BEGIN:config/initializers/assets.rb =====
# Be sure to restart your server when you modify this file.

# Version of your assets, change this if you want to expire all your assets.
Rails.application.config.assets.version = "1.0"
Rails.application.config.assets.paths << Rails.root.join("app/javascript")

# Add additional assets to the asset load path.
# Rails.application.config.assets.paths << Emoji.images_path

===== END:config/initializers/assets.rb =====

===== BEGIN:config/initializers/blind_index.rb =====
# config/initializers/active_record_encryption.rb
cfg = Rails.application.config.active_record.encryption
cfg.primary_key         = ENV["ACTIVE_RECORD_ENCRYPTION_PRIMARY_KEY"]
cfg.deterministic_key   = ENV["ACTIVE_RECORD_ENCRYPTION_DETERMINISTIC_KEY"]
cfg.key_derivation_salt = ENV["ACTIVE_RECORD_ENCRYPTION_KEY_DERIVATION_SALT"]

===== END:config/initializers/blind_index.rb =====

===== BEGIN:config/initializers/content_security_policy.rb =====
# Be sure to restart your server when you modify this file.

# Define an application-wide content security policy.
# See the Securing Rails Applications Guide for more information:
# https://guides.rubyonrails.org/security.html#content-security-policy-header

# Rails.application.configure do
#   config.content_security_policy do |policy|
#     policy.default_src :self, :https
#     policy.font_src    :self, :https, :data
#     policy.img_src     :self, :https, :data
#     policy.object_src  :none
#     policy.script_src  :self, :https
#     policy.style_src   :self, :https
#     # Specify URI for violation reports
#     # policy.report_uri "/csp-violation-report-endpoint"
#   end
#
#   # Generate session nonces for permitted importmap, inline scripts, and inline styles.
#   config.content_security_policy_nonce_generator = ->(request) { request.session.id.to_s }
#   config.content_security_policy_nonce_directives = %w(script-src style-src)
#
#   # Report violations without enforcing the policy.
#   # config.content_security_policy_report_only = true
# end

===== END:config/initializers/content_security_policy.rb =====

===== BEGIN:config/initializers/date_formats.rb =====
# config/initializers/date_formats.rb
Date::DATE_FORMATS[:mmm_d_yyyy] = "%b %-d, %Y"   # e.g., Sep 5, 2025
Time::DATE_FORMATS[:mmm_d_yyyy] = "%b %-d, %Y"

===== END:config/initializers/date_formats.rb =====

===== BEGIN:config/initializers/filter_parameter_logging.rb =====
# Be sure to restart your server when you modify this file.

# Configure parameters to be partially matched (e.g. passw matches password) and filtered from the log file.
# Use this to limit dissemination of sensitive information.
# See the ActiveSupport::ParameterFilter documentation for supported notations and behaviors.
Rails.application.config.filter_parameters += [
  :passw, :email, :secret, :token, :_key, :crypt, :salt, :certificate, :otp, :ssn, :cvv, :cvc
]

===== END:config/initializers/filter_parameter_logging.rb =====

===== BEGIN:config/initializers/inflections.rb =====
# Be sure to restart your server when you modify this file.

# Add new inflection rules using the following format. Inflections
# are locale specific, and you may define rules for as many different
# locales as you wish. All of these examples are active by default:
# ActiveSupport::Inflector.inflections(:en) do |inflect|
#   inflect.plural /^(ox)$/i, "\\1en"
#   inflect.singular /^(ox)en/i, "\\1"
#   inflect.irregular "person", "people"
#   inflect.uncountable %w( fish sheep )
# end

# These inflection rules are supported but not enabled by default:
# ActiveSupport::Inflector.inflections(:en) do |inflect|
#   inflect.acronym "RESTful"
# end

===== END:config/initializers/inflections.rb =====

===== BEGIN:config/initializers/phonelib.rb =====
# config/initializers/phonelib.rb
Phonelib.default_country = "US"
Phonelib.strict_check = false

===== END:config/initializers/phonelib.rb =====

===== BEGIN:config/locales/en.yml =====
# Files in the config/locales directory are used for internationalization and
# are automatically loaded by Rails. If you want to use locales other than
# English, add the necessary files in this directory.
#
# To use the locales, use `I18n.t`:
#
#     I18n.t "hello"
#
# In views, this is aliased to just `t`:
#
#     <%= t("hello") %>
#
# To use a different locale, set it with `I18n.locale`:
#
#     I18n.locale = :es
#
# This would use the information in config/locales/es.yml.
#
# To learn more about the API, please read the Rails Internationalization guide
# at https://guides.rubyonrails.org/i18n.html.
#
# Be aware that YAML interprets the following case-insensitive strings as
# booleans: `true`, `false`, `on`, `off`, `yes`, `no`. Therefore, these strings
# must be quoted to be interpreted as strings. For example:
#
#     en:
#       "yes": yup
#       enabled: "ON"

en:
  hello: "Hello world"

===== END:config/locales/en.yml =====

===== BEGIN:config/puma.rb =====
# This configuration file will be evaluated by Puma. The top-level methods that
# are invoked here are part of Puma's configuration DSL. For more information
# about methods provided by the DSL, see https://puma.io/puma/Puma/DSL.html.
#
# Puma starts a configurable number of processes (workers) and each process
# serves each request in a thread from an internal thread pool.
#
# You can control the number of workers using ENV["WEB_CONCURRENCY"]. You
# should only set this value when you want to run 2 or more workers. The
# default is already 1.
#
# The ideal number of threads per worker depends both on how much time the
# application spends waiting for IO operations and on how much you wish to
# prioritize throughput over latency.
#
# As a rule of thumb, increasing the number of threads will increase how much
# traffic a given process can handle (throughput), but due to CRuby's
# Global VM Lock (GVL) it has diminishing returns and will degrade the
# response time (latency) of the application.
#
# The default is set to 3 threads as it's deemed a decent compromise between
# throughput and latency for the average Rails application.
#
# Any libraries that use a connection pool or another resource pool should
# be configured to provide at least as many connections as the number of
# threads. This includes Active Record's `pool` parameter in `database.yml`.
threads_count = ENV.fetch("RAILS_MAX_THREADS", 3)
threads threads_count, threads_count

# Specifies the `port` that Puma will listen on to receive requests; default is 3000.
port ENV.fetch("PORT", 3000)

# Allow puma to be restarted by `bin/rails restart` command.
plugin :tmp_restart

# Run the Solid Queue supervisor inside of Puma for single-server deployments

# Specify the PID file. Defaults to tmp/pids/server.pid in development.
# In other environments, only set the PID file if requested.
pidfile ENV["PIDFILE"] if ENV["PIDFILE"]

===== END:config/puma.rb =====

===== BEGIN:config/queue.yml =====
default: &default
  dispatchers:
    - polling_interval: 1
      batch_size: 500
  workers:
    - queues: "*"
      threads: 3
      processes: <%= ENV.fetch("JOB_CONCURRENCY", 1) %>
      polling_interval: 0.1

development:
  <<: *default

test:
  <<: *default

production:
  <<: *default

===== END:config/queue.yml =====

===== BEGIN:config/recurring.yml =====
# examples:
#   periodic_cleanup:
#     class: CleanSoftDeletedRecordsJob
#     queue: background
#     args: [ 1000, { batch_size: 500 } ]
#     schedule: every hour
#   periodic_cleanup_with_command:
#     command: "SoftDeletedRecord.due.delete_all"
#     priority: 2
#     schedule: at 5am every day

production:
  clear_solid_queue_finished_jobs:
    command: "SolidQueue::Job.clear_finished_in_batches(sleep_between_batches: 0.3)"
    schedule: every hour at minute 12

===== END:config/recurring.yml =====

===== BEGIN:config/routes.rb =====
Rails.application.routes.draw do
  get "up" => "rails/health#show", as: :rails_health_check
  root "home#index"

  namespace :party do
    resources :parties, param: :public_id do
      member do
        get  :reveal_tax_id
        post :reveal_tax_id
      end

      resources :emails,    only: %i[new create edit update destroy] do
        member { patch :primary; get :reveal }
      end
      resources :phones,    only: %i[new create edit update destroy] do
        member { patch :primary }
      end
      resources :addresses, only: %i[index new create edit update destroy] do
        member { patch :primary }
      end
    end

    resources :groups do
      resources :group_memberships, path: :memberships, only: %i[index create destroy]
    end

    resources :links, only: %i[index create destroy]
  end

  namespace :ref do
    resources :regions, only: :index
  end

  namespace :ref do
    resources :regions, only: :index
  end

  def index
    redirect_to party_party_path(@party.public_id, anchor: "addresses")
  end

end

===== END:config/routes.rb =====

===== BEGIN:config/storage.yml =====
test:
  service: Disk
  root: <%= Rails.root.join("tmp/storage") %>

local:
  service: Disk
  root: <%= Rails.root.join("storage") %>

# Use bin/rails credentials:edit to set the AWS secrets (as aws:access_key_id|secret_access_key)
# amazon:
#   service: S3
#   access_key_id: <%= Rails.application.credentials.dig(:aws, :access_key_id) %>
#   secret_access_key: <%= Rails.application.credentials.dig(:aws, :secret_access_key) %>
#   region: us-east-1
#   bucket: your_own_bucket-<%= Rails.env %>

# Remember not to checkin your GCS keyfile to a repository
# google:
#   service: GCS
#   project: your_project
#   credentials: <%= Rails.root.join("path/to/gcs.keyfile") %>
#   bucket: your_own_bucket-<%= Rails.env %>

# Use bin/rails credentials:edit to set the Azure Storage secret (as azure_storage:storage_access_key)
# microsoft:
#   service: AzureStorage
#   storage_account_name: your_account_name
#   storage_access_key: <%= Rails.application.credentials.dig(:azure_storage, :storage_access_key) %>
#   container: your_container_name-<%= Rails.env %>

# mirror:
#   service: Mirror
#   primary: local
#   mirrors: [ amazon, google, microsoft ]

===== END:config/storage.yml =====

===== BEGIN:config/tailwind.config.js =====
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./app/views/**/*.{html.erb, html, js}",
    "./app/helpers/**/*.rb",
    "./app/javascript/**/*.js",
    "./public/**/*.html",
  ],
  theme: {
    extend: {
      colors: {
        // your custom colors
      },
      // etc
    }
  },
  plugins: [
    require("daisyui"),
    // other plugins
  ],
  daisyui: {
    themes: [
      "light",
      "dark",
      // etc
    ],
  },
};

===== END:config/tailwind.config.js =====
